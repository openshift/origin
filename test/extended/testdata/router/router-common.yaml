kind: List
apiVersion: v1
items:
# ensure the router can access routes and endpoints
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: system-router
  subjects:
  - kind: ServiceAccount
    name: default
  roleRef:
    kind: ClusterRole
    apiGroup: rbac.authorization.k8s.io
    name: system:router

# two routes that differ only by their labels and names
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: route-1
    labels:
      test: router
      select: first
  spec:
    host: first.example.com
    path: /Letter
    tls:
      insecureEdgeTerminationPolicy: Allow
      termination: Edge
    to:
      name: endpoints
    ports:
    - targetPort: 8080
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: route-2
    labels:
      test: router
      select: second
  spec:
    host: second.example.com
    path: /Letter
    tls:
      insecureEdgeTerminationPolicy: Allow
      termination: Edge
    to:
      name: endpoints
    ports:
    - targetPort: http

# routes that contain overridden domains
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: route-override-domain-1
    labels:
      test: router
      select: override-domains
  spec:
    host: y.a.null.ptr
    path: /Letter
    to:
      name: endpoints
    ports:
    - targetPort: 8080
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: route-override-domain-2
    labels:
      test: router
      select: override-domains
  spec:
    host: main.void.str
    path: /Letter
    to:
      name: endpoints
    ports:
    - targetPort: 8080

# a service to be routed to
- apiVersion: v1
  kind: Service
  metadata:
    name: endpoints
    labels:
      test: router
  spec:
    selector:
      test: router
      endpoints: router
    ports:
    - port: 8080
# a pod that serves a response
- apiVersion: v1
  kind: Pod
  metadata:
    name: endpoint-1
    labels:
      test: router
      endpoints: router
  spec:
    terminationGracePeriodSeconds: 1
    containers:
    - name: test
      image: registry.k8s.io/e2e-test-images/agnhost:2.52
      args: ["netexec"]
      ports:
      - containerPort: 8080
        name: http
      - containerPort: 100
        protocol: UDP

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
    ie8677ce2c7e1b4c22e9c3827ecd078d41185424dd9eeb92b7d971ed2d49a392e "github.com/microsoft/kiota-abstractions-go/store"
)

type ProcessContentResponse struct {
    // Stores model information.
    backingStore ie8677ce2c7e1b4c22e9c3827ecd078d41185424dd9eeb92b7d971ed2d49a392e.BackingStore
}
// NewProcessContentResponse instantiates a new ProcessContentResponse and sets the default values.
func NewProcessContentResponse()(*ProcessContentResponse) {
    m := &ProcessContentResponse{
    }
    m.backingStore = ie8677ce2c7e1b4c22e9c3827ecd078d41185424dd9eeb92b7d971ed2d49a392e.BackingStoreFactoryInstance();
    m.SetAdditionalData(make(map[string]any))
    return m
}
// CreateProcessContentResponseFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateProcessContentResponseFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewProcessContentResponse(), nil
}
// GetAdditionalData gets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
// returns a map[string]any when successful
func (m *ProcessContentResponse) GetAdditionalData()(map[string]any) {
    val , err :=  m.backingStore.Get("additionalData")
    if err != nil {
        panic(err)
    }
    if val == nil {
        var value = make(map[string]any);
        m.SetAdditionalData(value);
    }
    return val.(map[string]any)
}
// GetBackingStore gets the BackingStore property value. Stores model information.
// returns a BackingStore when successful
func (m *ProcessContentResponse) GetBackingStore()(ie8677ce2c7e1b4c22e9c3827ecd078d41185424dd9eeb92b7d971ed2d49a392e.BackingStore) {
    return m.backingStore
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *ProcessContentResponse) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := make(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error))
    res["@odata.type"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetOdataType(val)
        }
        return nil
    }
    res["policyActions"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(CreateDlpActionInfoFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]DlpActionInfoable, len(val))
            for i, v := range val {
                if v != nil {
                    res[i] = v.(DlpActionInfoable)
                }
            }
            m.SetPolicyActions(res)
        }
        return nil
    }
    res["processingErrors"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(CreateProcessingErrorFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]ProcessingErrorable, len(val))
            for i, v := range val {
                if v != nil {
                    res[i] = v.(ProcessingErrorable)
                }
            }
            m.SetProcessingErrors(res)
        }
        return nil
    }
    res["protectionScopeState"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetEnumValue(ParseProtectionScopeState)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetProtectionScopeState(val.(*ProtectionScopeState))
        }
        return nil
    }
    return res
}
// GetOdataType gets the @odata.type property value. The OdataType property
// returns a *string when successful
func (m *ProcessContentResponse) GetOdataType()(*string) {
    val, err := m.GetBackingStore().Get("odataType")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetPolicyActions gets the policyActions property value. A collection of policy actions (like DLP actions) triggered by the processed content. NOTE: Currently, the only policy action supported in for this resource type is restrictAccess.
// returns a []DlpActionInfoable when successful
func (m *ProcessContentResponse) GetPolicyActions()([]DlpActionInfoable) {
    val, err := m.GetBackingStore().Get("policyActions")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.([]DlpActionInfoable)
    }
    return nil
}
// GetProcessingErrors gets the processingErrors property value. A collection of errors encountered during the content processing.
// returns a []ProcessingErrorable when successful
func (m *ProcessContentResponse) GetProcessingErrors()([]ProcessingErrorable) {
    val, err := m.GetBackingStore().Get("processingErrors")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.([]ProcessingErrorable)
    }
    return nil
}
// GetProtectionScopeState gets the protectionScopeState property value. The protectionScopeState property
// returns a *ProtectionScopeState when successful
func (m *ProcessContentResponse) GetProtectionScopeState()(*ProtectionScopeState) {
    val, err := m.GetBackingStore().Get("protectionScopeState")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*ProtectionScopeState)
    }
    return nil
}
// Serialize serializes information the current object
func (m *ProcessContentResponse) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    {
        err := writer.WriteStringValue("@odata.type", m.GetOdataType())
        if err != nil {
            return err
        }
    }
    if m.GetPolicyActions() != nil {
        cast := make([]i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, len(m.GetPolicyActions()))
        for i, v := range m.GetPolicyActions() {
            if v != nil {
                cast[i] = v.(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable)
            }
        }
        err := writer.WriteCollectionOfObjectValues("policyActions", cast)
        if err != nil {
            return err
        }
    }
    if m.GetProcessingErrors() != nil {
        cast := make([]i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, len(m.GetProcessingErrors()))
        for i, v := range m.GetProcessingErrors() {
            if v != nil {
                cast[i] = v.(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable)
            }
        }
        err := writer.WriteCollectionOfObjectValues("processingErrors", cast)
        if err != nil {
            return err
        }
    }
    if m.GetProtectionScopeState() != nil {
        cast := (*m.GetProtectionScopeState()).String()
        err := writer.WriteStringValue("protectionScopeState", &cast)
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteAdditionalData(m.GetAdditionalData())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetAdditionalData sets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
func (m *ProcessContentResponse) SetAdditionalData(value map[string]any)() {
    err := m.GetBackingStore().Set("additionalData", value)
    if err != nil {
        panic(err)
    }
}
// SetBackingStore sets the BackingStore property value. Stores model information.
func (m *ProcessContentResponse) SetBackingStore(value ie8677ce2c7e1b4c22e9c3827ecd078d41185424dd9eeb92b7d971ed2d49a392e.BackingStore)() {
    m.backingStore = value
}
// SetOdataType sets the @odata.type property value. The OdataType property
func (m *ProcessContentResponse) SetOdataType(value *string)() {
    err := m.GetBackingStore().Set("odataType", value)
    if err != nil {
        panic(err)
    }
}
// SetPolicyActions sets the policyActions property value. A collection of policy actions (like DLP actions) triggered by the processed content. NOTE: Currently, the only policy action supported in for this resource type is restrictAccess.
func (m *ProcessContentResponse) SetPolicyActions(value []DlpActionInfoable)() {
    err := m.GetBackingStore().Set("policyActions", value)
    if err != nil {
        panic(err)
    }
}
// SetProcessingErrors sets the processingErrors property value. A collection of errors encountered during the content processing.
func (m *ProcessContentResponse) SetProcessingErrors(value []ProcessingErrorable)() {
    err := m.GetBackingStore().Set("processingErrors", value)
    if err != nil {
        panic(err)
    }
}
// SetProtectionScopeState sets the protectionScopeState property value. The protectionScopeState property
func (m *ProcessContentResponse) SetProtectionScopeState(value *ProtectionScopeState)() {
    err := m.GetBackingStore().Set("protectionScopeState", value)
    if err != nil {
        panic(err)
    }
}
type ProcessContentResponseable interface {
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.AdditionalDataHolder
    ie8677ce2c7e1b4c22e9c3827ecd078d41185424dd9eeb92b7d971ed2d49a392e.BackedModel
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetBackingStore()(ie8677ce2c7e1b4c22e9c3827ecd078d41185424dd9eeb92b7d971ed2d49a392e.BackingStore)
    GetOdataType()(*string)
    GetPolicyActions()([]DlpActionInfoable)
    GetProcessingErrors()([]ProcessingErrorable)
    GetProtectionScopeState()(*ProtectionScopeState)
    SetBackingStore(value ie8677ce2c7e1b4c22e9c3827ecd078d41185424dd9eeb92b7d971ed2d49a392e.BackingStore)()
    SetOdataType(value *string)()
    SetPolicyActions(value []DlpActionInfoable)()
    SetProcessingErrors(value []ProcessingErrorable)()
    SetProtectionScopeState(value *ProtectionScopeState)()
}

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type RestrictAccessActionBase struct {
    DlpActionInfo
}
// NewRestrictAccessActionBase instantiates a new RestrictAccessActionBase and sets the default values.
func NewRestrictAccessActionBase()(*RestrictAccessActionBase) {
    m := &RestrictAccessActionBase{
        DlpActionInfo: *NewDlpActionInfo(),
    }
    return m
}
// CreateRestrictAccessActionBaseFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateRestrictAccessActionBaseFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    if parseNode != nil {
        mappingValueNode, err := parseNode.GetChildNode("@odata.type")
        if err != nil {
            return nil, err
        }
        if mappingValueNode != nil {
            mappingValue, err := mappingValueNode.GetStringValue()
            if err != nil {
                return nil, err
            }
            if mappingValue != nil {
                switch *mappingValue {
                    case "#microsoft.graph.restrictAccessAction":
                        return NewRestrictAccessAction(), nil
                }
            }
        }
    }
    return NewRestrictAccessActionBase(), nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *RestrictAccessActionBase) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.DlpActionInfo.GetFieldDeserializers()
    res["restrictionAction"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetEnumValue(ParseRestrictionAction)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetRestrictionAction(val.(*RestrictionAction))
        }
        return nil
    }
    return res
}
// GetRestrictionAction gets the restrictionAction property value. Action for the app to take. The possible values are: warn, audit, block.
// returns a *RestrictionAction when successful
func (m *RestrictAccessActionBase) GetRestrictionAction()(*RestrictionAction) {
    val, err := m.GetBackingStore().Get("restrictionAction")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*RestrictionAction)
    }
    return nil
}
// Serialize serializes information the current object
func (m *RestrictAccessActionBase) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.DlpActionInfo.Serialize(writer)
    if err != nil {
        return err
    }
    if m.GetRestrictionAction() != nil {
        cast := (*m.GetRestrictionAction()).String()
        err = writer.WriteStringValue("restrictionAction", &cast)
        if err != nil {
            return err
        }
    }
    return nil
}
// SetRestrictionAction sets the restrictionAction property value. Action for the app to take. The possible values are: warn, audit, block.
func (m *RestrictAccessActionBase) SetRestrictionAction(value *RestrictionAction)() {
    err := m.GetBackingStore().Set("restrictionAction", value)
    if err != nil {
        panic(err)
    }
}
type RestrictAccessActionBaseable interface {
    DlpActionInfoable
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetRestrictionAction()(*RestrictionAction)
    SetRestrictionAction(value *RestrictionAction)()
}

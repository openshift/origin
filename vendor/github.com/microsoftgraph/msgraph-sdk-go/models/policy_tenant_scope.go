// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type PolicyTenantScope struct {
    PolicyScopeBase
}
// NewPolicyTenantScope instantiates a new PolicyTenantScope and sets the default values.
func NewPolicyTenantScope()(*PolicyTenantScope) {
    m := &PolicyTenantScope{
        PolicyScopeBase: *NewPolicyScopeBase(),
    }
    odataTypeValue := "#microsoft.graph.policyTenantScope"
    m.SetOdataType(&odataTypeValue)
    return m
}
// CreatePolicyTenantScopeFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreatePolicyTenantScopeFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewPolicyTenantScope(), nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *PolicyTenantScope) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.PolicyScopeBase.GetFieldDeserializers()
    res["policyScope"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreatePolicyBindingFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetPolicyScope(val.(PolicyBindingable))
        }
        return nil
    }
    return res
}
// GetPolicyScope gets the policyScope property value. Specifies the users and groups included in or excluded from this tenant-level policy scope.
// returns a PolicyBindingable when successful
func (m *PolicyTenantScope) GetPolicyScope()(PolicyBindingable) {
    val, err := m.GetBackingStore().Get("policyScope")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(PolicyBindingable)
    }
    return nil
}
// Serialize serializes information the current object
func (m *PolicyTenantScope) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.PolicyScopeBase.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteObjectValue("policyScope", m.GetPolicyScope())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetPolicyScope sets the policyScope property value. Specifies the users and groups included in or excluded from this tenant-level policy scope.
func (m *PolicyTenantScope) SetPolicyScope(value PolicyBindingable)() {
    err := m.GetBackingStore().Set("policyScope", value)
    if err != nil {
        panic(err)
    }
}
type PolicyTenantScopeable interface {
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    PolicyScopeBaseable
    GetPolicyScope()(PolicyBindingable)
    SetPolicyScope(value PolicyBindingable)()
}

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type LabelContentRight struct {
    Entity
}
// NewLabelContentRight instantiates a new LabelContentRight and sets the default values.
func NewLabelContentRight()(*LabelContentRight) {
    m := &LabelContentRight{
        Entity: *NewEntity(),
    }
    return m
}
// CreateLabelContentRightFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateLabelContentRightFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewLabelContentRight(), nil
}
// GetCid gets the cid property value. The content identifier.
// returns a *string when successful
func (m *LabelContentRight) GetCid()(*string) {
    val, err := m.GetBackingStore().Get("cid")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *LabelContentRight) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.Entity.GetFieldDeserializers()
    res["cid"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetCid(val)
        }
        return nil
    }
    res["format"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetFormat(val)
        }
        return nil
    }
    res["label"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreateSensitivityLabelFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetLabel(val.(SensitivityLabelable))
        }
        return nil
    }
    res["rights"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetEnumValue(ParseUsageRights)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetRights(val.(*UsageRights))
        }
        return nil
    }
    return res
}
// GetFormat gets the format property value. The content format.
// returns a *string when successful
func (m *LabelContentRight) GetFormat()(*string) {
    val, err := m.GetBackingStore().Get("format")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetLabel gets the label property value. The label property
// returns a SensitivityLabelable when successful
func (m *LabelContentRight) GetLabel()(SensitivityLabelable) {
    val, err := m.GetBackingStore().Get("label")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(SensitivityLabelable)
    }
    return nil
}
// GetRights gets the rights property value. The rights property
// returns a *UsageRights when successful
func (m *LabelContentRight) GetRights()(*UsageRights) {
    val, err := m.GetBackingStore().Get("rights")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*UsageRights)
    }
    return nil
}
// Serialize serializes information the current object
func (m *LabelContentRight) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.Entity.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteStringValue("cid", m.GetCid())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("format", m.GetFormat())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteObjectValue("label", m.GetLabel())
        if err != nil {
            return err
        }
    }
    if m.GetRights() != nil {
        cast := (*m.GetRights()).String()
        err = writer.WriteStringValue("rights", &cast)
        if err != nil {
            return err
        }
    }
    return nil
}
// SetCid sets the cid property value. The content identifier.
func (m *LabelContentRight) SetCid(value *string)() {
    err := m.GetBackingStore().Set("cid", value)
    if err != nil {
        panic(err)
    }
}
// SetFormat sets the format property value. The content format.
func (m *LabelContentRight) SetFormat(value *string)() {
    err := m.GetBackingStore().Set("format", value)
    if err != nil {
        panic(err)
    }
}
// SetLabel sets the label property value. The label property
func (m *LabelContentRight) SetLabel(value SensitivityLabelable)() {
    err := m.GetBackingStore().Set("label", value)
    if err != nil {
        panic(err)
    }
}
// SetRights sets the rights property value. The rights property
func (m *LabelContentRight) SetRights(value *UsageRights)() {
    err := m.GetBackingStore().Set("rights", value)
    if err != nil {
        panic(err)
    }
}
type LabelContentRightable interface {
    Entityable
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetCid()(*string)
    GetFormat()(*string)
    GetLabel()(SensitivityLabelable)
    GetRights()(*UsageRights)
    SetCid(value *string)()
    SetFormat(value *string)()
    SetLabel(value SensitivityLabelable)()
    SetRights(value *UsageRights)()
}

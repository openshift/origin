// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
type ResponseFeedbackType int

const (
    NONE_RESPONSEFEEDBACKTYPE ResponseFeedbackType = iota
    NOTDETECTED_RESPONSEFEEDBACKTYPE
    VERYUNPLEASANT_RESPONSEFEEDBACKTYPE
    UNPLEASANT_RESPONSEFEEDBACKTYPE
    NEUTRAL_RESPONSEFEEDBACKTYPE
    PLEASANT_RESPONSEFEEDBACKTYPE
    VERYPLEASANT_RESPONSEFEEDBACKTYPE
    UNKNOWNFUTUREVALUE_RESPONSEFEEDBACKTYPE
)

func (i ResponseFeedbackType) String() string {
    return []string{"none", "notDetected", "veryUnpleasant", "unpleasant", "neutral", "pleasant", "veryPleasant", "unknownFutureValue"}[i]
}
func ParseResponseFeedbackType(v string) (any, error) {
    result := NONE_RESPONSEFEEDBACKTYPE
    switch v {
        case "none":
            result = NONE_RESPONSEFEEDBACKTYPE
        case "notDetected":
            result = NOTDETECTED_RESPONSEFEEDBACKTYPE
        case "veryUnpleasant":
            result = VERYUNPLEASANT_RESPONSEFEEDBACKTYPE
        case "unpleasant":
            result = UNPLEASANT_RESPONSEFEEDBACKTYPE
        case "neutral":
            result = NEUTRAL_RESPONSEFEEDBACKTYPE
        case "pleasant":
            result = PLEASANT_RESPONSEFEEDBACKTYPE
        case "veryPleasant":
            result = VERYPLEASANT_RESPONSEFEEDBACKTYPE
        case "unknownFutureValue":
            result = UNKNOWNFUTUREVALUE_RESPONSEFEEDBACKTYPE
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeResponseFeedbackType(values []ResponseFeedbackType) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i ResponseFeedbackType) isMultiValue() bool {
    return false
}

// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
import (
    "math"
    "strings"
)
type UserActivityTypes int

const (
    NONE_USERACTIVITYTYPES = 1
    UPLOADTEXT_USERACTIVITYTYPES = 2
    UPLOADFILE_USERACTIVITYTYPES = 4
    DOWNLOADTEXT_USERACTIVITYTYPES = 8
    DOWNLOADFILE_USERACTIVITYTYPES = 16
    UNKNOWNFUTUREVALUE_USERACTIVITYTYPES = 32
)

func (i UserActivityTypes) String() string {
    var values []string
    options := []string{"none", "uploadText", "uploadFile", "downloadText", "downloadFile", "unknownFutureValue"}
    for p := 0; p < 6; p++ {
        mantis := UserActivityTypes(int(math.Pow(2, float64(p))))
        if i&mantis == mantis {
            values = append(values, options[p])
        }
    }
    return strings.Join(values, ",")
}
func ParseUserActivityTypes(v string) (any, error) {
    var result UserActivityTypes
    values := strings.Split(v, ",")
    for _, str := range values {
        switch str {
            case "none":
                result |= NONE_USERACTIVITYTYPES
            case "uploadText":
                result |= UPLOADTEXT_USERACTIVITYTYPES
            case "uploadFile":
                result |= UPLOADFILE_USERACTIVITYTYPES
            case "downloadText":
                result |= DOWNLOADTEXT_USERACTIVITYTYPES
            case "downloadFile":
                result |= DOWNLOADFILE_USERACTIVITYTYPES
            case "unknownFutureValue":
                result |= UNKNOWNFUTUREVALUE_USERACTIVITYTYPES
            default:
                return nil, nil
        }
    }
    return &result, nil
}
func SerializeUserActivityTypes(values []UserActivityTypes) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i UserActivityTypes) isMultiValue() bool {
    return true
}

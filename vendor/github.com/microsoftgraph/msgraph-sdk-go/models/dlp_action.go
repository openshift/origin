// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
type DlpAction int

const (
    NOTIFYUSER_DLPACTION DlpAction = iota
    BLOCKACCESS_DLPACTION
    DEVICERESTRICTION_DLPACTION
    BROWSERRESTRICTION_DLPACTION
    UNKNOWNFUTUREVALUE_DLPACTION
    RESTRICTACCESS_DLPACTION
    GENERATEALERT_DLPACTION
    GENERATEINCIDENTREPORTACTION_DLPACTION
    SPBLOCKANONYMOUSACCESS_DLPACTION
    SPRUNTIMEACCESSCONTROL_DLPACTION
    SPSHARINGNOTIFYUSER_DLPACTION
    SPSHARINGGENERATEINCIDENTREPORT_DLPACTION
)

func (i DlpAction) String() string {
    return []string{"notifyUser", "blockAccess", "deviceRestriction", "browserRestriction", "unknownFutureValue", "restrictAccess", "generateAlert", "generateIncidentReportAction", "sPBlockAnonymousAccess", "sPRuntimeAccessControl", "sPSharingNotifyUser", "sPSharingGenerateIncidentReport"}[i]
}
func ParseDlpAction(v string) (any, error) {
    result := NOTIFYUSER_DLPACTION
    switch v {
        case "notifyUser":
            result = NOTIFYUSER_DLPACTION
        case "blockAccess":
            result = BLOCKACCESS_DLPACTION
        case "deviceRestriction":
            result = DEVICERESTRICTION_DLPACTION
        case "browserRestriction":
            result = BROWSERRESTRICTION_DLPACTION
        case "unknownFutureValue":
            result = UNKNOWNFUTUREVALUE_DLPACTION
        case "restrictAccess":
            result = RESTRICTACCESS_DLPACTION
        case "generateAlert":
            result = GENERATEALERT_DLPACTION
        case "generateIncidentReportAction":
            result = GENERATEINCIDENTREPORTACTION_DLPACTION
        case "sPBlockAnonymousAccess":
            result = SPBLOCKANONYMOUSACCESS_DLPACTION
        case "sPRuntimeAccessControl":
            result = SPRUNTIMEACCESSCONTROL_DLPACTION
        case "sPSharingNotifyUser":
            result = SPSHARINGNOTIFYUSER_DLPACTION
        case "sPSharingGenerateIncidentReport":
            result = SPSHARINGGENERATEINCIDENTREPORT_DLPACTION
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeDlpAction(values []DlpAction) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i DlpAction) isMultiValue() bool {
    return false
}

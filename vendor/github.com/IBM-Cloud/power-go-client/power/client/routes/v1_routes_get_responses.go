// Code generated by go-swagger; DO NOT EDIT.

package routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/IBM-Cloud/power-go-client/power/models"
)

// V1RoutesGetReader is a Reader for the V1RoutesGet structure.
type V1RoutesGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1RoutesGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1RoutesGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1RoutesGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewV1RoutesGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1RoutesGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV1RoutesGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1RoutesGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/routes/{route_id}] v1.routes.get", response, response.Code())
	}
}

// NewV1RoutesGetOK creates a V1RoutesGetOK with default headers values
func NewV1RoutesGetOK() *V1RoutesGetOK {
	return &V1RoutesGetOK{}
}

/*
V1RoutesGetOK describes a response with status code 200, with default header values.

OK
*/
type V1RoutesGetOK struct {
	Payload *models.Route
}

// IsSuccess returns true when this v1 routes get o k response has a 2xx status code
func (o *V1RoutesGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 routes get o k response has a 3xx status code
func (o *V1RoutesGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes get o k response has a 4xx status code
func (o *V1RoutesGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 routes get o k response has a 5xx status code
func (o *V1RoutesGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes get o k response a status code equal to that given
func (o *V1RoutesGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 routes get o k response
func (o *V1RoutesGetOK) Code() int {
	return 200
}

func (o *V1RoutesGetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes/{route_id}][%d] v1RoutesGetOK %s", 200, payload)
}

func (o *V1RoutesGetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes/{route_id}][%d] v1RoutesGetOK %s", 200, payload)
}

func (o *V1RoutesGetOK) GetPayload() *models.Route {
	return o.Payload
}

func (o *V1RoutesGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Route)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesGetBadRequest creates a V1RoutesGetBadRequest with default headers values
func NewV1RoutesGetBadRequest() *V1RoutesGetBadRequest {
	return &V1RoutesGetBadRequest{}
}

/*
V1RoutesGetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1RoutesGetBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes get bad request response has a 2xx status code
func (o *V1RoutesGetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes get bad request response has a 3xx status code
func (o *V1RoutesGetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes get bad request response has a 4xx status code
func (o *V1RoutesGetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes get bad request response has a 5xx status code
func (o *V1RoutesGetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes get bad request response a status code equal to that given
func (o *V1RoutesGetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 routes get bad request response
func (o *V1RoutesGetBadRequest) Code() int {
	return 400
}

func (o *V1RoutesGetBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes/{route_id}][%d] v1RoutesGetBadRequest %s", 400, payload)
}

func (o *V1RoutesGetBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes/{route_id}][%d] v1RoutesGetBadRequest %s", 400, payload)
}

func (o *V1RoutesGetBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesGetUnauthorized creates a V1RoutesGetUnauthorized with default headers values
func NewV1RoutesGetUnauthorized() *V1RoutesGetUnauthorized {
	return &V1RoutesGetUnauthorized{}
}

/*
V1RoutesGetUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type V1RoutesGetUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes get unauthorized response has a 2xx status code
func (o *V1RoutesGetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes get unauthorized response has a 3xx status code
func (o *V1RoutesGetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes get unauthorized response has a 4xx status code
func (o *V1RoutesGetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes get unauthorized response has a 5xx status code
func (o *V1RoutesGetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes get unauthorized response a status code equal to that given
func (o *V1RoutesGetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the v1 routes get unauthorized response
func (o *V1RoutesGetUnauthorized) Code() int {
	return 401
}

func (o *V1RoutesGetUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes/{route_id}][%d] v1RoutesGetUnauthorized %s", 401, payload)
}

func (o *V1RoutesGetUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes/{route_id}][%d] v1RoutesGetUnauthorized %s", 401, payload)
}

func (o *V1RoutesGetUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesGetForbidden creates a V1RoutesGetForbidden with default headers values
func NewV1RoutesGetForbidden() *V1RoutesGetForbidden {
	return &V1RoutesGetForbidden{}
}

/*
V1RoutesGetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1RoutesGetForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes get forbidden response has a 2xx status code
func (o *V1RoutesGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes get forbidden response has a 3xx status code
func (o *V1RoutesGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes get forbidden response has a 4xx status code
func (o *V1RoutesGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes get forbidden response has a 5xx status code
func (o *V1RoutesGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes get forbidden response a status code equal to that given
func (o *V1RoutesGetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 routes get forbidden response
func (o *V1RoutesGetForbidden) Code() int {
	return 403
}

func (o *V1RoutesGetForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes/{route_id}][%d] v1RoutesGetForbidden %s", 403, payload)
}

func (o *V1RoutesGetForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes/{route_id}][%d] v1RoutesGetForbidden %s", 403, payload)
}

func (o *V1RoutesGetForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesGetNotFound creates a V1RoutesGetNotFound with default headers values
func NewV1RoutesGetNotFound() *V1RoutesGetNotFound {
	return &V1RoutesGetNotFound{}
}

/*
V1RoutesGetNotFound describes a response with status code 404, with default header values.

Not Found
*/
type V1RoutesGetNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes get not found response has a 2xx status code
func (o *V1RoutesGetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes get not found response has a 3xx status code
func (o *V1RoutesGetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes get not found response has a 4xx status code
func (o *V1RoutesGetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes get not found response has a 5xx status code
func (o *V1RoutesGetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes get not found response a status code equal to that given
func (o *V1RoutesGetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the v1 routes get not found response
func (o *V1RoutesGetNotFound) Code() int {
	return 404
}

func (o *V1RoutesGetNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes/{route_id}][%d] v1RoutesGetNotFound %s", 404, payload)
}

func (o *V1RoutesGetNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes/{route_id}][%d] v1RoutesGetNotFound %s", 404, payload)
}

func (o *V1RoutesGetNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesGetInternalServerError creates a V1RoutesGetInternalServerError with default headers values
func NewV1RoutesGetInternalServerError() *V1RoutesGetInternalServerError {
	return &V1RoutesGetInternalServerError{}
}

/*
V1RoutesGetInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1RoutesGetInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes get internal server error response has a 2xx status code
func (o *V1RoutesGetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes get internal server error response has a 3xx status code
func (o *V1RoutesGetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes get internal server error response has a 4xx status code
func (o *V1RoutesGetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 routes get internal server error response has a 5xx status code
func (o *V1RoutesGetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 routes get internal server error response a status code equal to that given
func (o *V1RoutesGetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 routes get internal server error response
func (o *V1RoutesGetInternalServerError) Code() int {
	return 500
}

func (o *V1RoutesGetInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes/{route_id}][%d] v1RoutesGetInternalServerError %s", 500, payload)
}

func (o *V1RoutesGetInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes/{route_id}][%d] v1RoutesGetInternalServerError %s", 500, payload)
}

func (o *V1RoutesGetInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

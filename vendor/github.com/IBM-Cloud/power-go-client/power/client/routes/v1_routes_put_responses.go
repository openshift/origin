// Code generated by go-swagger; DO NOT EDIT.

package routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/IBM-Cloud/power-go-client/power/models"
)

// V1RoutesPutReader is a Reader for the V1RoutesPut structure.
type V1RoutesPutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1RoutesPutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1RoutesPutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1RoutesPutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewV1RoutesPutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1RoutesPutForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV1RoutesPutNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewV1RoutesPutUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1RoutesPutInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/routes/{route_id}] v1.routes.put", response, response.Code())
	}
}

// NewV1RoutesPutOK creates a V1RoutesPutOK with default headers values
func NewV1RoutesPutOK() *V1RoutesPutOK {
	return &V1RoutesPutOK{}
}

/*
V1RoutesPutOK describes a response with status code 200, with default header values.

OK
*/
type V1RoutesPutOK struct {
	Payload *models.Route
}

// IsSuccess returns true when this v1 routes put o k response has a 2xx status code
func (o *V1RoutesPutOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 routes put o k response has a 3xx status code
func (o *V1RoutesPutOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes put o k response has a 4xx status code
func (o *V1RoutesPutOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 routes put o k response has a 5xx status code
func (o *V1RoutesPutOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes put o k response a status code equal to that given
func (o *V1RoutesPutOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 routes put o k response
func (o *V1RoutesPutOK) Code() int {
	return 200
}

func (o *V1RoutesPutOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/routes/{route_id}][%d] v1RoutesPutOK %s", 200, payload)
}

func (o *V1RoutesPutOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/routes/{route_id}][%d] v1RoutesPutOK %s", 200, payload)
}

func (o *V1RoutesPutOK) GetPayload() *models.Route {
	return o.Payload
}

func (o *V1RoutesPutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Route)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesPutBadRequest creates a V1RoutesPutBadRequest with default headers values
func NewV1RoutesPutBadRequest() *V1RoutesPutBadRequest {
	return &V1RoutesPutBadRequest{}
}

/*
V1RoutesPutBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1RoutesPutBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes put bad request response has a 2xx status code
func (o *V1RoutesPutBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes put bad request response has a 3xx status code
func (o *V1RoutesPutBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes put bad request response has a 4xx status code
func (o *V1RoutesPutBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes put bad request response has a 5xx status code
func (o *V1RoutesPutBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes put bad request response a status code equal to that given
func (o *V1RoutesPutBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 routes put bad request response
func (o *V1RoutesPutBadRequest) Code() int {
	return 400
}

func (o *V1RoutesPutBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/routes/{route_id}][%d] v1RoutesPutBadRequest %s", 400, payload)
}

func (o *V1RoutesPutBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/routes/{route_id}][%d] v1RoutesPutBadRequest %s", 400, payload)
}

func (o *V1RoutesPutBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesPutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesPutUnauthorized creates a V1RoutesPutUnauthorized with default headers values
func NewV1RoutesPutUnauthorized() *V1RoutesPutUnauthorized {
	return &V1RoutesPutUnauthorized{}
}

/*
V1RoutesPutUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type V1RoutesPutUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes put unauthorized response has a 2xx status code
func (o *V1RoutesPutUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes put unauthorized response has a 3xx status code
func (o *V1RoutesPutUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes put unauthorized response has a 4xx status code
func (o *V1RoutesPutUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes put unauthorized response has a 5xx status code
func (o *V1RoutesPutUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes put unauthorized response a status code equal to that given
func (o *V1RoutesPutUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the v1 routes put unauthorized response
func (o *V1RoutesPutUnauthorized) Code() int {
	return 401
}

func (o *V1RoutesPutUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/routes/{route_id}][%d] v1RoutesPutUnauthorized %s", 401, payload)
}

func (o *V1RoutesPutUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/routes/{route_id}][%d] v1RoutesPutUnauthorized %s", 401, payload)
}

func (o *V1RoutesPutUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesPutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesPutForbidden creates a V1RoutesPutForbidden with default headers values
func NewV1RoutesPutForbidden() *V1RoutesPutForbidden {
	return &V1RoutesPutForbidden{}
}

/*
V1RoutesPutForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1RoutesPutForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes put forbidden response has a 2xx status code
func (o *V1RoutesPutForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes put forbidden response has a 3xx status code
func (o *V1RoutesPutForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes put forbidden response has a 4xx status code
func (o *V1RoutesPutForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes put forbidden response has a 5xx status code
func (o *V1RoutesPutForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes put forbidden response a status code equal to that given
func (o *V1RoutesPutForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 routes put forbidden response
func (o *V1RoutesPutForbidden) Code() int {
	return 403
}

func (o *V1RoutesPutForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/routes/{route_id}][%d] v1RoutesPutForbidden %s", 403, payload)
}

func (o *V1RoutesPutForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/routes/{route_id}][%d] v1RoutesPutForbidden %s", 403, payload)
}

func (o *V1RoutesPutForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesPutForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesPutNotFound creates a V1RoutesPutNotFound with default headers values
func NewV1RoutesPutNotFound() *V1RoutesPutNotFound {
	return &V1RoutesPutNotFound{}
}

/*
V1RoutesPutNotFound describes a response with status code 404, with default header values.

Not Found
*/
type V1RoutesPutNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes put not found response has a 2xx status code
func (o *V1RoutesPutNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes put not found response has a 3xx status code
func (o *V1RoutesPutNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes put not found response has a 4xx status code
func (o *V1RoutesPutNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes put not found response has a 5xx status code
func (o *V1RoutesPutNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes put not found response a status code equal to that given
func (o *V1RoutesPutNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the v1 routes put not found response
func (o *V1RoutesPutNotFound) Code() int {
	return 404
}

func (o *V1RoutesPutNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/routes/{route_id}][%d] v1RoutesPutNotFound %s", 404, payload)
}

func (o *V1RoutesPutNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/routes/{route_id}][%d] v1RoutesPutNotFound %s", 404, payload)
}

func (o *V1RoutesPutNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesPutNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesPutUnprocessableEntity creates a V1RoutesPutUnprocessableEntity with default headers values
func NewV1RoutesPutUnprocessableEntity() *V1RoutesPutUnprocessableEntity {
	return &V1RoutesPutUnprocessableEntity{}
}

/*
V1RoutesPutUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type V1RoutesPutUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes put unprocessable entity response has a 2xx status code
func (o *V1RoutesPutUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes put unprocessable entity response has a 3xx status code
func (o *V1RoutesPutUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes put unprocessable entity response has a 4xx status code
func (o *V1RoutesPutUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes put unprocessable entity response has a 5xx status code
func (o *V1RoutesPutUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes put unprocessable entity response a status code equal to that given
func (o *V1RoutesPutUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the v1 routes put unprocessable entity response
func (o *V1RoutesPutUnprocessableEntity) Code() int {
	return 422
}

func (o *V1RoutesPutUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/routes/{route_id}][%d] v1RoutesPutUnprocessableEntity %s", 422, payload)
}

func (o *V1RoutesPutUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/routes/{route_id}][%d] v1RoutesPutUnprocessableEntity %s", 422, payload)
}

func (o *V1RoutesPutUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesPutUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesPutInternalServerError creates a V1RoutesPutInternalServerError with default headers values
func NewV1RoutesPutInternalServerError() *V1RoutesPutInternalServerError {
	return &V1RoutesPutInternalServerError{}
}

/*
V1RoutesPutInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1RoutesPutInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes put internal server error response has a 2xx status code
func (o *V1RoutesPutInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes put internal server error response has a 3xx status code
func (o *V1RoutesPutInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes put internal server error response has a 4xx status code
func (o *V1RoutesPutInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 routes put internal server error response has a 5xx status code
func (o *V1RoutesPutInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 routes put internal server error response a status code equal to that given
func (o *V1RoutesPutInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 routes put internal server error response
func (o *V1RoutesPutInternalServerError) Code() int {
	return 500
}

func (o *V1RoutesPutInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/routes/{route_id}][%d] v1RoutesPutInternalServerError %s", 500, payload)
}

func (o *V1RoutesPutInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/routes/{route_id}][%d] v1RoutesPutInternalServerError %s", 500, payload)
}

func (o *V1RoutesPutInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesPutInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

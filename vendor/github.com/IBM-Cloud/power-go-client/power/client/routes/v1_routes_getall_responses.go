// Code generated by go-swagger; DO NOT EDIT.

package routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/IBM-Cloud/power-go-client/power/models"
)

// V1RoutesGetallReader is a Reader for the V1RoutesGetall structure.
type V1RoutesGetallReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1RoutesGetallReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1RoutesGetallOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1RoutesGetallBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewV1RoutesGetallUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1RoutesGetallForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV1RoutesGetallNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1RoutesGetallInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/routes] v1.routes.getall", response, response.Code())
	}
}

// NewV1RoutesGetallOK creates a V1RoutesGetallOK with default headers values
func NewV1RoutesGetallOK() *V1RoutesGetallOK {
	return &V1RoutesGetallOK{}
}

/*
V1RoutesGetallOK describes a response with status code 200, with default header values.

OK
*/
type V1RoutesGetallOK struct {
	Payload *models.Routes
}

// IsSuccess returns true when this v1 routes getall o k response has a 2xx status code
func (o *V1RoutesGetallOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 routes getall o k response has a 3xx status code
func (o *V1RoutesGetallOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes getall o k response has a 4xx status code
func (o *V1RoutesGetallOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 routes getall o k response has a 5xx status code
func (o *V1RoutesGetallOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes getall o k response a status code equal to that given
func (o *V1RoutesGetallOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 routes getall o k response
func (o *V1RoutesGetallOK) Code() int {
	return 200
}

func (o *V1RoutesGetallOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes][%d] v1RoutesGetallOK %s", 200, payload)
}

func (o *V1RoutesGetallOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes][%d] v1RoutesGetallOK %s", 200, payload)
}

func (o *V1RoutesGetallOK) GetPayload() *models.Routes {
	return o.Payload
}

func (o *V1RoutesGetallOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Routes)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesGetallBadRequest creates a V1RoutesGetallBadRequest with default headers values
func NewV1RoutesGetallBadRequest() *V1RoutesGetallBadRequest {
	return &V1RoutesGetallBadRequest{}
}

/*
V1RoutesGetallBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1RoutesGetallBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes getall bad request response has a 2xx status code
func (o *V1RoutesGetallBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes getall bad request response has a 3xx status code
func (o *V1RoutesGetallBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes getall bad request response has a 4xx status code
func (o *V1RoutesGetallBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes getall bad request response has a 5xx status code
func (o *V1RoutesGetallBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes getall bad request response a status code equal to that given
func (o *V1RoutesGetallBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 routes getall bad request response
func (o *V1RoutesGetallBadRequest) Code() int {
	return 400
}

func (o *V1RoutesGetallBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes][%d] v1RoutesGetallBadRequest %s", 400, payload)
}

func (o *V1RoutesGetallBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes][%d] v1RoutesGetallBadRequest %s", 400, payload)
}

func (o *V1RoutesGetallBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesGetallBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesGetallUnauthorized creates a V1RoutesGetallUnauthorized with default headers values
func NewV1RoutesGetallUnauthorized() *V1RoutesGetallUnauthorized {
	return &V1RoutesGetallUnauthorized{}
}

/*
V1RoutesGetallUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type V1RoutesGetallUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes getall unauthorized response has a 2xx status code
func (o *V1RoutesGetallUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes getall unauthorized response has a 3xx status code
func (o *V1RoutesGetallUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes getall unauthorized response has a 4xx status code
func (o *V1RoutesGetallUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes getall unauthorized response has a 5xx status code
func (o *V1RoutesGetallUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes getall unauthorized response a status code equal to that given
func (o *V1RoutesGetallUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the v1 routes getall unauthorized response
func (o *V1RoutesGetallUnauthorized) Code() int {
	return 401
}

func (o *V1RoutesGetallUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes][%d] v1RoutesGetallUnauthorized %s", 401, payload)
}

func (o *V1RoutesGetallUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes][%d] v1RoutesGetallUnauthorized %s", 401, payload)
}

func (o *V1RoutesGetallUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesGetallUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesGetallForbidden creates a V1RoutesGetallForbidden with default headers values
func NewV1RoutesGetallForbidden() *V1RoutesGetallForbidden {
	return &V1RoutesGetallForbidden{}
}

/*
V1RoutesGetallForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1RoutesGetallForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes getall forbidden response has a 2xx status code
func (o *V1RoutesGetallForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes getall forbidden response has a 3xx status code
func (o *V1RoutesGetallForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes getall forbidden response has a 4xx status code
func (o *V1RoutesGetallForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes getall forbidden response has a 5xx status code
func (o *V1RoutesGetallForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes getall forbidden response a status code equal to that given
func (o *V1RoutesGetallForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 routes getall forbidden response
func (o *V1RoutesGetallForbidden) Code() int {
	return 403
}

func (o *V1RoutesGetallForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes][%d] v1RoutesGetallForbidden %s", 403, payload)
}

func (o *V1RoutesGetallForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes][%d] v1RoutesGetallForbidden %s", 403, payload)
}

func (o *V1RoutesGetallForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesGetallForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesGetallNotFound creates a V1RoutesGetallNotFound with default headers values
func NewV1RoutesGetallNotFound() *V1RoutesGetallNotFound {
	return &V1RoutesGetallNotFound{}
}

/*
V1RoutesGetallNotFound describes a response with status code 404, with default header values.

Not Found
*/
type V1RoutesGetallNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes getall not found response has a 2xx status code
func (o *V1RoutesGetallNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes getall not found response has a 3xx status code
func (o *V1RoutesGetallNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes getall not found response has a 4xx status code
func (o *V1RoutesGetallNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes getall not found response has a 5xx status code
func (o *V1RoutesGetallNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes getall not found response a status code equal to that given
func (o *V1RoutesGetallNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the v1 routes getall not found response
func (o *V1RoutesGetallNotFound) Code() int {
	return 404
}

func (o *V1RoutesGetallNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes][%d] v1RoutesGetallNotFound %s", 404, payload)
}

func (o *V1RoutesGetallNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes][%d] v1RoutesGetallNotFound %s", 404, payload)
}

func (o *V1RoutesGetallNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesGetallNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesGetallInternalServerError creates a V1RoutesGetallInternalServerError with default headers values
func NewV1RoutesGetallInternalServerError() *V1RoutesGetallInternalServerError {
	return &V1RoutesGetallInternalServerError{}
}

/*
V1RoutesGetallInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1RoutesGetallInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes getall internal server error response has a 2xx status code
func (o *V1RoutesGetallInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes getall internal server error response has a 3xx status code
func (o *V1RoutesGetallInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes getall internal server error response has a 4xx status code
func (o *V1RoutesGetallInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 routes getall internal server error response has a 5xx status code
func (o *V1RoutesGetallInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 routes getall internal server error response a status code equal to that given
func (o *V1RoutesGetallInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 routes getall internal server error response
func (o *V1RoutesGetallInternalServerError) Code() int {
	return 500
}

func (o *V1RoutesGetallInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes][%d] v1RoutesGetallInternalServerError %s", 500, payload)
}

func (o *V1RoutesGetallInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/routes][%d] v1RoutesGetallInternalServerError %s", 500, payload)
}

func (o *V1RoutesGetallInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesGetallInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

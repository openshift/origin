// Code generated by go-swagger; DO NOT EDIT.

package routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/IBM-Cloud/power-go-client/power/models"
)

// V1RoutesDeleteReader is a Reader for the V1RoutesDelete structure.
type V1RoutesDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1RoutesDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1RoutesDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1RoutesDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewV1RoutesDeleteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1RoutesDeleteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV1RoutesDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewV1RoutesDeleteGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1RoutesDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/routes/{route_id}] v1.routes.delete", response, response.Code())
	}
}

// NewV1RoutesDeleteOK creates a V1RoutesDeleteOK with default headers values
func NewV1RoutesDeleteOK() *V1RoutesDeleteOK {
	return &V1RoutesDeleteOK{}
}

/*
V1RoutesDeleteOK describes a response with status code 200, with default header values.

OK
*/
type V1RoutesDeleteOK struct {
	Payload models.Object
}

// IsSuccess returns true when this v1 routes delete o k response has a 2xx status code
func (o *V1RoutesDeleteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 routes delete o k response has a 3xx status code
func (o *V1RoutesDeleteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes delete o k response has a 4xx status code
func (o *V1RoutesDeleteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 routes delete o k response has a 5xx status code
func (o *V1RoutesDeleteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes delete o k response a status code equal to that given
func (o *V1RoutesDeleteOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 routes delete o k response
func (o *V1RoutesDeleteOK) Code() int {
	return 200
}

func (o *V1RoutesDeleteOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/routes/{route_id}][%d] v1RoutesDeleteOK %s", 200, payload)
}

func (o *V1RoutesDeleteOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/routes/{route_id}][%d] v1RoutesDeleteOK %s", 200, payload)
}

func (o *V1RoutesDeleteOK) GetPayload() models.Object {
	return o.Payload
}

func (o *V1RoutesDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesDeleteBadRequest creates a V1RoutesDeleteBadRequest with default headers values
func NewV1RoutesDeleteBadRequest() *V1RoutesDeleteBadRequest {
	return &V1RoutesDeleteBadRequest{}
}

/*
V1RoutesDeleteBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1RoutesDeleteBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes delete bad request response has a 2xx status code
func (o *V1RoutesDeleteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes delete bad request response has a 3xx status code
func (o *V1RoutesDeleteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes delete bad request response has a 4xx status code
func (o *V1RoutesDeleteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes delete bad request response has a 5xx status code
func (o *V1RoutesDeleteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes delete bad request response a status code equal to that given
func (o *V1RoutesDeleteBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 routes delete bad request response
func (o *V1RoutesDeleteBadRequest) Code() int {
	return 400
}

func (o *V1RoutesDeleteBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/routes/{route_id}][%d] v1RoutesDeleteBadRequest %s", 400, payload)
}

func (o *V1RoutesDeleteBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/routes/{route_id}][%d] v1RoutesDeleteBadRequest %s", 400, payload)
}

func (o *V1RoutesDeleteBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesDeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesDeleteUnauthorized creates a V1RoutesDeleteUnauthorized with default headers values
func NewV1RoutesDeleteUnauthorized() *V1RoutesDeleteUnauthorized {
	return &V1RoutesDeleteUnauthorized{}
}

/*
V1RoutesDeleteUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type V1RoutesDeleteUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes delete unauthorized response has a 2xx status code
func (o *V1RoutesDeleteUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes delete unauthorized response has a 3xx status code
func (o *V1RoutesDeleteUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes delete unauthorized response has a 4xx status code
func (o *V1RoutesDeleteUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes delete unauthorized response has a 5xx status code
func (o *V1RoutesDeleteUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes delete unauthorized response a status code equal to that given
func (o *V1RoutesDeleteUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the v1 routes delete unauthorized response
func (o *V1RoutesDeleteUnauthorized) Code() int {
	return 401
}

func (o *V1RoutesDeleteUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/routes/{route_id}][%d] v1RoutesDeleteUnauthorized %s", 401, payload)
}

func (o *V1RoutesDeleteUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/routes/{route_id}][%d] v1RoutesDeleteUnauthorized %s", 401, payload)
}

func (o *V1RoutesDeleteUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesDeleteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesDeleteForbidden creates a V1RoutesDeleteForbidden with default headers values
func NewV1RoutesDeleteForbidden() *V1RoutesDeleteForbidden {
	return &V1RoutesDeleteForbidden{}
}

/*
V1RoutesDeleteForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1RoutesDeleteForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes delete forbidden response has a 2xx status code
func (o *V1RoutesDeleteForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes delete forbidden response has a 3xx status code
func (o *V1RoutesDeleteForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes delete forbidden response has a 4xx status code
func (o *V1RoutesDeleteForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes delete forbidden response has a 5xx status code
func (o *V1RoutesDeleteForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes delete forbidden response a status code equal to that given
func (o *V1RoutesDeleteForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 routes delete forbidden response
func (o *V1RoutesDeleteForbidden) Code() int {
	return 403
}

func (o *V1RoutesDeleteForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/routes/{route_id}][%d] v1RoutesDeleteForbidden %s", 403, payload)
}

func (o *V1RoutesDeleteForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/routes/{route_id}][%d] v1RoutesDeleteForbidden %s", 403, payload)
}

func (o *V1RoutesDeleteForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesDeleteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesDeleteNotFound creates a V1RoutesDeleteNotFound with default headers values
func NewV1RoutesDeleteNotFound() *V1RoutesDeleteNotFound {
	return &V1RoutesDeleteNotFound{}
}

/*
V1RoutesDeleteNotFound describes a response with status code 404, with default header values.

Not Found
*/
type V1RoutesDeleteNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes delete not found response has a 2xx status code
func (o *V1RoutesDeleteNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes delete not found response has a 3xx status code
func (o *V1RoutesDeleteNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes delete not found response has a 4xx status code
func (o *V1RoutesDeleteNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes delete not found response has a 5xx status code
func (o *V1RoutesDeleteNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes delete not found response a status code equal to that given
func (o *V1RoutesDeleteNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the v1 routes delete not found response
func (o *V1RoutesDeleteNotFound) Code() int {
	return 404
}

func (o *V1RoutesDeleteNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/routes/{route_id}][%d] v1RoutesDeleteNotFound %s", 404, payload)
}

func (o *V1RoutesDeleteNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/routes/{route_id}][%d] v1RoutesDeleteNotFound %s", 404, payload)
}

func (o *V1RoutesDeleteNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesDeleteGone creates a V1RoutesDeleteGone with default headers values
func NewV1RoutesDeleteGone() *V1RoutesDeleteGone {
	return &V1RoutesDeleteGone{}
}

/*
V1RoutesDeleteGone describes a response with status code 410, with default header values.

Gone
*/
type V1RoutesDeleteGone struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes delete gone response has a 2xx status code
func (o *V1RoutesDeleteGone) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes delete gone response has a 3xx status code
func (o *V1RoutesDeleteGone) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes delete gone response has a 4xx status code
func (o *V1RoutesDeleteGone) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes delete gone response has a 5xx status code
func (o *V1RoutesDeleteGone) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes delete gone response a status code equal to that given
func (o *V1RoutesDeleteGone) IsCode(code int) bool {
	return code == 410
}

// Code gets the status code for the v1 routes delete gone response
func (o *V1RoutesDeleteGone) Code() int {
	return 410
}

func (o *V1RoutesDeleteGone) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/routes/{route_id}][%d] v1RoutesDeleteGone %s", 410, payload)
}

func (o *V1RoutesDeleteGone) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/routes/{route_id}][%d] v1RoutesDeleteGone %s", 410, payload)
}

func (o *V1RoutesDeleteGone) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesDeleteGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesDeleteInternalServerError creates a V1RoutesDeleteInternalServerError with default headers values
func NewV1RoutesDeleteInternalServerError() *V1RoutesDeleteInternalServerError {
	return &V1RoutesDeleteInternalServerError{}
}

/*
V1RoutesDeleteInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1RoutesDeleteInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes delete internal server error response has a 2xx status code
func (o *V1RoutesDeleteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes delete internal server error response has a 3xx status code
func (o *V1RoutesDeleteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes delete internal server error response has a 4xx status code
func (o *V1RoutesDeleteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 routes delete internal server error response has a 5xx status code
func (o *V1RoutesDeleteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 routes delete internal server error response a status code equal to that given
func (o *V1RoutesDeleteInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 routes delete internal server error response
func (o *V1RoutesDeleteInternalServerError) Code() int {
	return 500
}

func (o *V1RoutesDeleteInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/routes/{route_id}][%d] v1RoutesDeleteInternalServerError %s", 500, payload)
}

func (o *V1RoutesDeleteInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/routes/{route_id}][%d] v1RoutesDeleteInternalServerError %s", 500, payload)
}

func (o *V1RoutesDeleteInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

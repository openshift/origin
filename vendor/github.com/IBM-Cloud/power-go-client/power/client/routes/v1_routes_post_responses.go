// Code generated by go-swagger; DO NOT EDIT.

package routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/IBM-Cloud/power-go-client/power/models"
)

// V1RoutesPostReader is a Reader for the V1RoutesPost structure.
type V1RoutesPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1RoutesPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewV1RoutesPostCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1RoutesPostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewV1RoutesPostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1RoutesPostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV1RoutesPostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewV1RoutesPostConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewV1RoutesPostUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1RoutesPostInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/routes] v1.routes.post", response, response.Code())
	}
}

// NewV1RoutesPostCreated creates a V1RoutesPostCreated with default headers values
func NewV1RoutesPostCreated() *V1RoutesPostCreated {
	return &V1RoutesPostCreated{}
}

/*
V1RoutesPostCreated describes a response with status code 201, with default header values.

Created
*/
type V1RoutesPostCreated struct {
	Payload *models.Route
}

// IsSuccess returns true when this v1 routes post created response has a 2xx status code
func (o *V1RoutesPostCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 routes post created response has a 3xx status code
func (o *V1RoutesPostCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes post created response has a 4xx status code
func (o *V1RoutesPostCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 routes post created response has a 5xx status code
func (o *V1RoutesPostCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes post created response a status code equal to that given
func (o *V1RoutesPostCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the v1 routes post created response
func (o *V1RoutesPostCreated) Code() int {
	return 201
}

func (o *V1RoutesPostCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/routes][%d] v1RoutesPostCreated %s", 201, payload)
}

func (o *V1RoutesPostCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/routes][%d] v1RoutesPostCreated %s", 201, payload)
}

func (o *V1RoutesPostCreated) GetPayload() *models.Route {
	return o.Payload
}

func (o *V1RoutesPostCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Route)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesPostBadRequest creates a V1RoutesPostBadRequest with default headers values
func NewV1RoutesPostBadRequest() *V1RoutesPostBadRequest {
	return &V1RoutesPostBadRequest{}
}

/*
V1RoutesPostBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1RoutesPostBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes post bad request response has a 2xx status code
func (o *V1RoutesPostBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes post bad request response has a 3xx status code
func (o *V1RoutesPostBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes post bad request response has a 4xx status code
func (o *V1RoutesPostBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes post bad request response has a 5xx status code
func (o *V1RoutesPostBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes post bad request response a status code equal to that given
func (o *V1RoutesPostBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 routes post bad request response
func (o *V1RoutesPostBadRequest) Code() int {
	return 400
}

func (o *V1RoutesPostBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/routes][%d] v1RoutesPostBadRequest %s", 400, payload)
}

func (o *V1RoutesPostBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/routes][%d] v1RoutesPostBadRequest %s", 400, payload)
}

func (o *V1RoutesPostBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesPostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesPostUnauthorized creates a V1RoutesPostUnauthorized with default headers values
func NewV1RoutesPostUnauthorized() *V1RoutesPostUnauthorized {
	return &V1RoutesPostUnauthorized{}
}

/*
V1RoutesPostUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type V1RoutesPostUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes post unauthorized response has a 2xx status code
func (o *V1RoutesPostUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes post unauthorized response has a 3xx status code
func (o *V1RoutesPostUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes post unauthorized response has a 4xx status code
func (o *V1RoutesPostUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes post unauthorized response has a 5xx status code
func (o *V1RoutesPostUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes post unauthorized response a status code equal to that given
func (o *V1RoutesPostUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the v1 routes post unauthorized response
func (o *V1RoutesPostUnauthorized) Code() int {
	return 401
}

func (o *V1RoutesPostUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/routes][%d] v1RoutesPostUnauthorized %s", 401, payload)
}

func (o *V1RoutesPostUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/routes][%d] v1RoutesPostUnauthorized %s", 401, payload)
}

func (o *V1RoutesPostUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesPostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesPostForbidden creates a V1RoutesPostForbidden with default headers values
func NewV1RoutesPostForbidden() *V1RoutesPostForbidden {
	return &V1RoutesPostForbidden{}
}

/*
V1RoutesPostForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1RoutesPostForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes post forbidden response has a 2xx status code
func (o *V1RoutesPostForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes post forbidden response has a 3xx status code
func (o *V1RoutesPostForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes post forbidden response has a 4xx status code
func (o *V1RoutesPostForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes post forbidden response has a 5xx status code
func (o *V1RoutesPostForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes post forbidden response a status code equal to that given
func (o *V1RoutesPostForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 routes post forbidden response
func (o *V1RoutesPostForbidden) Code() int {
	return 403
}

func (o *V1RoutesPostForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/routes][%d] v1RoutesPostForbidden %s", 403, payload)
}

func (o *V1RoutesPostForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/routes][%d] v1RoutesPostForbidden %s", 403, payload)
}

func (o *V1RoutesPostForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesPostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesPostNotFound creates a V1RoutesPostNotFound with default headers values
func NewV1RoutesPostNotFound() *V1RoutesPostNotFound {
	return &V1RoutesPostNotFound{}
}

/*
V1RoutesPostNotFound describes a response with status code 404, with default header values.

Not Found
*/
type V1RoutesPostNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes post not found response has a 2xx status code
func (o *V1RoutesPostNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes post not found response has a 3xx status code
func (o *V1RoutesPostNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes post not found response has a 4xx status code
func (o *V1RoutesPostNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes post not found response has a 5xx status code
func (o *V1RoutesPostNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes post not found response a status code equal to that given
func (o *V1RoutesPostNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the v1 routes post not found response
func (o *V1RoutesPostNotFound) Code() int {
	return 404
}

func (o *V1RoutesPostNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/routes][%d] v1RoutesPostNotFound %s", 404, payload)
}

func (o *V1RoutesPostNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/routes][%d] v1RoutesPostNotFound %s", 404, payload)
}

func (o *V1RoutesPostNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesPostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesPostConflict creates a V1RoutesPostConflict with default headers values
func NewV1RoutesPostConflict() *V1RoutesPostConflict {
	return &V1RoutesPostConflict{}
}

/*
V1RoutesPostConflict describes a response with status code 409, with default header values.

Conflict
*/
type V1RoutesPostConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes post conflict response has a 2xx status code
func (o *V1RoutesPostConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes post conflict response has a 3xx status code
func (o *V1RoutesPostConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes post conflict response has a 4xx status code
func (o *V1RoutesPostConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes post conflict response has a 5xx status code
func (o *V1RoutesPostConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes post conflict response a status code equal to that given
func (o *V1RoutesPostConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the v1 routes post conflict response
func (o *V1RoutesPostConflict) Code() int {
	return 409
}

func (o *V1RoutesPostConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/routes][%d] v1RoutesPostConflict %s", 409, payload)
}

func (o *V1RoutesPostConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/routes][%d] v1RoutesPostConflict %s", 409, payload)
}

func (o *V1RoutesPostConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesPostConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesPostUnprocessableEntity creates a V1RoutesPostUnprocessableEntity with default headers values
func NewV1RoutesPostUnprocessableEntity() *V1RoutesPostUnprocessableEntity {
	return &V1RoutesPostUnprocessableEntity{}
}

/*
V1RoutesPostUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type V1RoutesPostUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes post unprocessable entity response has a 2xx status code
func (o *V1RoutesPostUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes post unprocessable entity response has a 3xx status code
func (o *V1RoutesPostUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes post unprocessable entity response has a 4xx status code
func (o *V1RoutesPostUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 routes post unprocessable entity response has a 5xx status code
func (o *V1RoutesPostUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 routes post unprocessable entity response a status code equal to that given
func (o *V1RoutesPostUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the v1 routes post unprocessable entity response
func (o *V1RoutesPostUnprocessableEntity) Code() int {
	return 422
}

func (o *V1RoutesPostUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/routes][%d] v1RoutesPostUnprocessableEntity %s", 422, payload)
}

func (o *V1RoutesPostUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/routes][%d] v1RoutesPostUnprocessableEntity %s", 422, payload)
}

func (o *V1RoutesPostUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesPostUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1RoutesPostInternalServerError creates a V1RoutesPostInternalServerError with default headers values
func NewV1RoutesPostInternalServerError() *V1RoutesPostInternalServerError {
	return &V1RoutesPostInternalServerError{}
}

/*
V1RoutesPostInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1RoutesPostInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 routes post internal server error response has a 2xx status code
func (o *V1RoutesPostInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 routes post internal server error response has a 3xx status code
func (o *V1RoutesPostInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 routes post internal server error response has a 4xx status code
func (o *V1RoutesPostInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 routes post internal server error response has a 5xx status code
func (o *V1RoutesPostInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 routes post internal server error response a status code equal to that given
func (o *V1RoutesPostInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 routes post internal server error response
func (o *V1RoutesPostInternalServerError) Code() int {
	return 500
}

func (o *V1RoutesPostInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/routes][%d] v1RoutesPostInternalServerError %s", 500, payload)
}

func (o *V1RoutesPostInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/routes][%d] v1RoutesPostInternalServerError %s", 500, payload)
}

func (o *V1RoutesPostInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1RoutesPostInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

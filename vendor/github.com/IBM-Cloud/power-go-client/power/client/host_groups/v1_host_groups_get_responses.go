// Code generated by go-swagger; DO NOT EDIT.

package host_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/IBM-Cloud/power-go-client/power/models"
)

// V1HostGroupsGetReader is a Reader for the V1HostGroupsGet structure.
type V1HostGroupsGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1HostGroupsGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1HostGroupsGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1HostGroupsGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewV1HostGroupsGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1HostGroupsGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1HostGroupsGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewV1HostGroupsGetGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/host-groups] v1.hostGroups.get", response, response.Code())
	}
}

// NewV1HostGroupsGetOK creates a V1HostGroupsGetOK with default headers values
func NewV1HostGroupsGetOK() *V1HostGroupsGetOK {
	return &V1HostGroupsGetOK{}
}

/*
V1HostGroupsGetOK describes a response with status code 200, with default header values.

OK
*/
type V1HostGroupsGetOK struct {
	Payload models.HostGroupList
}

// IsSuccess returns true when this v1 host groups get o k response has a 2xx status code
func (o *V1HostGroupsGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 host groups get o k response has a 3xx status code
func (o *V1HostGroupsGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 host groups get o k response has a 4xx status code
func (o *V1HostGroupsGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 host groups get o k response has a 5xx status code
func (o *V1HostGroupsGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 host groups get o k response a status code equal to that given
func (o *V1HostGroupsGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 host groups get o k response
func (o *V1HostGroupsGetOK) Code() int {
	return 200
}

func (o *V1HostGroupsGetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups][%d] v1HostGroupsGetOK %s", 200, payload)
}

func (o *V1HostGroupsGetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups][%d] v1HostGroupsGetOK %s", 200, payload)
}

func (o *V1HostGroupsGetOK) GetPayload() models.HostGroupList {
	return o.Payload
}

func (o *V1HostGroupsGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostGroupsGetBadRequest creates a V1HostGroupsGetBadRequest with default headers values
func NewV1HostGroupsGetBadRequest() *V1HostGroupsGetBadRequest {
	return &V1HostGroupsGetBadRequest{}
}

/*
V1HostGroupsGetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1HostGroupsGetBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 host groups get bad request response has a 2xx status code
func (o *V1HostGroupsGetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 host groups get bad request response has a 3xx status code
func (o *V1HostGroupsGetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 host groups get bad request response has a 4xx status code
func (o *V1HostGroupsGetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 host groups get bad request response has a 5xx status code
func (o *V1HostGroupsGetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 host groups get bad request response a status code equal to that given
func (o *V1HostGroupsGetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 host groups get bad request response
func (o *V1HostGroupsGetBadRequest) Code() int {
	return 400
}

func (o *V1HostGroupsGetBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups][%d] v1HostGroupsGetBadRequest %s", 400, payload)
}

func (o *V1HostGroupsGetBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups][%d] v1HostGroupsGetBadRequest %s", 400, payload)
}

func (o *V1HostGroupsGetBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostGroupsGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostGroupsGetUnauthorized creates a V1HostGroupsGetUnauthorized with default headers values
func NewV1HostGroupsGetUnauthorized() *V1HostGroupsGetUnauthorized {
	return &V1HostGroupsGetUnauthorized{}
}

/*
V1HostGroupsGetUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type V1HostGroupsGetUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 host groups get unauthorized response has a 2xx status code
func (o *V1HostGroupsGetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 host groups get unauthorized response has a 3xx status code
func (o *V1HostGroupsGetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 host groups get unauthorized response has a 4xx status code
func (o *V1HostGroupsGetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 host groups get unauthorized response has a 5xx status code
func (o *V1HostGroupsGetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 host groups get unauthorized response a status code equal to that given
func (o *V1HostGroupsGetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the v1 host groups get unauthorized response
func (o *V1HostGroupsGetUnauthorized) Code() int {
	return 401
}

func (o *V1HostGroupsGetUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups][%d] v1HostGroupsGetUnauthorized %s", 401, payload)
}

func (o *V1HostGroupsGetUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups][%d] v1HostGroupsGetUnauthorized %s", 401, payload)
}

func (o *V1HostGroupsGetUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostGroupsGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostGroupsGetForbidden creates a V1HostGroupsGetForbidden with default headers values
func NewV1HostGroupsGetForbidden() *V1HostGroupsGetForbidden {
	return &V1HostGroupsGetForbidden{}
}

/*
V1HostGroupsGetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1HostGroupsGetForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 host groups get forbidden response has a 2xx status code
func (o *V1HostGroupsGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 host groups get forbidden response has a 3xx status code
func (o *V1HostGroupsGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 host groups get forbidden response has a 4xx status code
func (o *V1HostGroupsGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 host groups get forbidden response has a 5xx status code
func (o *V1HostGroupsGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 host groups get forbidden response a status code equal to that given
func (o *V1HostGroupsGetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 host groups get forbidden response
func (o *V1HostGroupsGetForbidden) Code() int {
	return 403
}

func (o *V1HostGroupsGetForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups][%d] v1HostGroupsGetForbidden %s", 403, payload)
}

func (o *V1HostGroupsGetForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups][%d] v1HostGroupsGetForbidden %s", 403, payload)
}

func (o *V1HostGroupsGetForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostGroupsGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostGroupsGetInternalServerError creates a V1HostGroupsGetInternalServerError with default headers values
func NewV1HostGroupsGetInternalServerError() *V1HostGroupsGetInternalServerError {
	return &V1HostGroupsGetInternalServerError{}
}

/*
V1HostGroupsGetInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1HostGroupsGetInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 host groups get internal server error response has a 2xx status code
func (o *V1HostGroupsGetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 host groups get internal server error response has a 3xx status code
func (o *V1HostGroupsGetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 host groups get internal server error response has a 4xx status code
func (o *V1HostGroupsGetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 host groups get internal server error response has a 5xx status code
func (o *V1HostGroupsGetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 host groups get internal server error response a status code equal to that given
func (o *V1HostGroupsGetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 host groups get internal server error response
func (o *V1HostGroupsGetInternalServerError) Code() int {
	return 500
}

func (o *V1HostGroupsGetInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups][%d] v1HostGroupsGetInternalServerError %s", 500, payload)
}

func (o *V1HostGroupsGetInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups][%d] v1HostGroupsGetInternalServerError %s", 500, payload)
}

func (o *V1HostGroupsGetInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostGroupsGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostGroupsGetGatewayTimeout creates a V1HostGroupsGetGatewayTimeout with default headers values
func NewV1HostGroupsGetGatewayTimeout() *V1HostGroupsGetGatewayTimeout {
	return &V1HostGroupsGetGatewayTimeout{}
}

/*
V1HostGroupsGetGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. Request is still processing and taking longer than expected.
*/
type V1HostGroupsGetGatewayTimeout struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 host groups get gateway timeout response has a 2xx status code
func (o *V1HostGroupsGetGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 host groups get gateway timeout response has a 3xx status code
func (o *V1HostGroupsGetGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 host groups get gateway timeout response has a 4xx status code
func (o *V1HostGroupsGetGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 host groups get gateway timeout response has a 5xx status code
func (o *V1HostGroupsGetGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 host groups get gateway timeout response a status code equal to that given
func (o *V1HostGroupsGetGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the v1 host groups get gateway timeout response
func (o *V1HostGroupsGetGatewayTimeout) Code() int {
	return 504
}

func (o *V1HostGroupsGetGatewayTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups][%d] v1HostGroupsGetGatewayTimeout %s", 504, payload)
}

func (o *V1HostGroupsGetGatewayTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups][%d] v1HostGroupsGetGatewayTimeout %s", 504, payload)
}

func (o *V1HostGroupsGetGatewayTimeout) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostGroupsGetGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package host_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/IBM-Cloud/power-go-client/power/models"
)

// V1HostsIDDeleteReader is a Reader for the V1HostsIDDelete structure.
type V1HostsIDDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1HostsIDDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewV1HostsIDDeleteAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1HostsIDDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewV1HostsIDDeleteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1HostsIDDeleteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV1HostsIDDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1HostsIDDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewV1HostsIDDeleteGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/hosts/{host_id}] v1.hosts.id.delete", response, response.Code())
	}
}

// NewV1HostsIDDeleteAccepted creates a V1HostsIDDeleteAccepted with default headers values
func NewV1HostsIDDeleteAccepted() *V1HostsIDDeleteAccepted {
	return &V1HostsIDDeleteAccepted{}
}

/*
V1HostsIDDeleteAccepted describes a response with status code 202, with default header values.

Accepted
*/
type V1HostsIDDeleteAccepted struct {
	Payload models.Object
}

// IsSuccess returns true when this v1 hosts Id delete accepted response has a 2xx status code
func (o *V1HostsIDDeleteAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 hosts Id delete accepted response has a 3xx status code
func (o *V1HostsIDDeleteAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hosts Id delete accepted response has a 4xx status code
func (o *V1HostsIDDeleteAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 hosts Id delete accepted response has a 5xx status code
func (o *V1HostsIDDeleteAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hosts Id delete accepted response a status code equal to that given
func (o *V1HostsIDDeleteAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the v1 hosts Id delete accepted response
func (o *V1HostsIDDeleteAccepted) Code() int {
	return 202
}

func (o *V1HostsIDDeleteAccepted) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/hosts/{host_id}][%d] v1HostsIdDeleteAccepted %s", 202, payload)
}

func (o *V1HostsIDDeleteAccepted) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/hosts/{host_id}][%d] v1HostsIdDeleteAccepted %s", 202, payload)
}

func (o *V1HostsIDDeleteAccepted) GetPayload() models.Object {
	return o.Payload
}

func (o *V1HostsIDDeleteAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostsIDDeleteBadRequest creates a V1HostsIDDeleteBadRequest with default headers values
func NewV1HostsIDDeleteBadRequest() *V1HostsIDDeleteBadRequest {
	return &V1HostsIDDeleteBadRequest{}
}

/*
V1HostsIDDeleteBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1HostsIDDeleteBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hosts Id delete bad request response has a 2xx status code
func (o *V1HostsIDDeleteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hosts Id delete bad request response has a 3xx status code
func (o *V1HostsIDDeleteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hosts Id delete bad request response has a 4xx status code
func (o *V1HostsIDDeleteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 hosts Id delete bad request response has a 5xx status code
func (o *V1HostsIDDeleteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hosts Id delete bad request response a status code equal to that given
func (o *V1HostsIDDeleteBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 hosts Id delete bad request response
func (o *V1HostsIDDeleteBadRequest) Code() int {
	return 400
}

func (o *V1HostsIDDeleteBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/hosts/{host_id}][%d] v1HostsIdDeleteBadRequest %s", 400, payload)
}

func (o *V1HostsIDDeleteBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/hosts/{host_id}][%d] v1HostsIdDeleteBadRequest %s", 400, payload)
}

func (o *V1HostsIDDeleteBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostsIDDeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostsIDDeleteUnauthorized creates a V1HostsIDDeleteUnauthorized with default headers values
func NewV1HostsIDDeleteUnauthorized() *V1HostsIDDeleteUnauthorized {
	return &V1HostsIDDeleteUnauthorized{}
}

/*
V1HostsIDDeleteUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type V1HostsIDDeleteUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hosts Id delete unauthorized response has a 2xx status code
func (o *V1HostsIDDeleteUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hosts Id delete unauthorized response has a 3xx status code
func (o *V1HostsIDDeleteUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hosts Id delete unauthorized response has a 4xx status code
func (o *V1HostsIDDeleteUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 hosts Id delete unauthorized response has a 5xx status code
func (o *V1HostsIDDeleteUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hosts Id delete unauthorized response a status code equal to that given
func (o *V1HostsIDDeleteUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the v1 hosts Id delete unauthorized response
func (o *V1HostsIDDeleteUnauthorized) Code() int {
	return 401
}

func (o *V1HostsIDDeleteUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/hosts/{host_id}][%d] v1HostsIdDeleteUnauthorized %s", 401, payload)
}

func (o *V1HostsIDDeleteUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/hosts/{host_id}][%d] v1HostsIdDeleteUnauthorized %s", 401, payload)
}

func (o *V1HostsIDDeleteUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostsIDDeleteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostsIDDeleteForbidden creates a V1HostsIDDeleteForbidden with default headers values
func NewV1HostsIDDeleteForbidden() *V1HostsIDDeleteForbidden {
	return &V1HostsIDDeleteForbidden{}
}

/*
V1HostsIDDeleteForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1HostsIDDeleteForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hosts Id delete forbidden response has a 2xx status code
func (o *V1HostsIDDeleteForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hosts Id delete forbidden response has a 3xx status code
func (o *V1HostsIDDeleteForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hosts Id delete forbidden response has a 4xx status code
func (o *V1HostsIDDeleteForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 hosts Id delete forbidden response has a 5xx status code
func (o *V1HostsIDDeleteForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hosts Id delete forbidden response a status code equal to that given
func (o *V1HostsIDDeleteForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 hosts Id delete forbidden response
func (o *V1HostsIDDeleteForbidden) Code() int {
	return 403
}

func (o *V1HostsIDDeleteForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/hosts/{host_id}][%d] v1HostsIdDeleteForbidden %s", 403, payload)
}

func (o *V1HostsIDDeleteForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/hosts/{host_id}][%d] v1HostsIdDeleteForbidden %s", 403, payload)
}

func (o *V1HostsIDDeleteForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostsIDDeleteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostsIDDeleteNotFound creates a V1HostsIDDeleteNotFound with default headers values
func NewV1HostsIDDeleteNotFound() *V1HostsIDDeleteNotFound {
	return &V1HostsIDDeleteNotFound{}
}

/*
V1HostsIDDeleteNotFound describes a response with status code 404, with default header values.

Not Found
*/
type V1HostsIDDeleteNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hosts Id delete not found response has a 2xx status code
func (o *V1HostsIDDeleteNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hosts Id delete not found response has a 3xx status code
func (o *V1HostsIDDeleteNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hosts Id delete not found response has a 4xx status code
func (o *V1HostsIDDeleteNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 hosts Id delete not found response has a 5xx status code
func (o *V1HostsIDDeleteNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hosts Id delete not found response a status code equal to that given
func (o *V1HostsIDDeleteNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the v1 hosts Id delete not found response
func (o *V1HostsIDDeleteNotFound) Code() int {
	return 404
}

func (o *V1HostsIDDeleteNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/hosts/{host_id}][%d] v1HostsIdDeleteNotFound %s", 404, payload)
}

func (o *V1HostsIDDeleteNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/hosts/{host_id}][%d] v1HostsIdDeleteNotFound %s", 404, payload)
}

func (o *V1HostsIDDeleteNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostsIDDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostsIDDeleteInternalServerError creates a V1HostsIDDeleteInternalServerError with default headers values
func NewV1HostsIDDeleteInternalServerError() *V1HostsIDDeleteInternalServerError {
	return &V1HostsIDDeleteInternalServerError{}
}

/*
V1HostsIDDeleteInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1HostsIDDeleteInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hosts Id delete internal server error response has a 2xx status code
func (o *V1HostsIDDeleteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hosts Id delete internal server error response has a 3xx status code
func (o *V1HostsIDDeleteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hosts Id delete internal server error response has a 4xx status code
func (o *V1HostsIDDeleteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 hosts Id delete internal server error response has a 5xx status code
func (o *V1HostsIDDeleteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 hosts Id delete internal server error response a status code equal to that given
func (o *V1HostsIDDeleteInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 hosts Id delete internal server error response
func (o *V1HostsIDDeleteInternalServerError) Code() int {
	return 500
}

func (o *V1HostsIDDeleteInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/hosts/{host_id}][%d] v1HostsIdDeleteInternalServerError %s", 500, payload)
}

func (o *V1HostsIDDeleteInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/hosts/{host_id}][%d] v1HostsIdDeleteInternalServerError %s", 500, payload)
}

func (o *V1HostsIDDeleteInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostsIDDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostsIDDeleteGatewayTimeout creates a V1HostsIDDeleteGatewayTimeout with default headers values
func NewV1HostsIDDeleteGatewayTimeout() *V1HostsIDDeleteGatewayTimeout {
	return &V1HostsIDDeleteGatewayTimeout{}
}

/*
V1HostsIDDeleteGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. Request is still processing and taking longer than expected.
*/
type V1HostsIDDeleteGatewayTimeout struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hosts Id delete gateway timeout response has a 2xx status code
func (o *V1HostsIDDeleteGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hosts Id delete gateway timeout response has a 3xx status code
func (o *V1HostsIDDeleteGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hosts Id delete gateway timeout response has a 4xx status code
func (o *V1HostsIDDeleteGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 hosts Id delete gateway timeout response has a 5xx status code
func (o *V1HostsIDDeleteGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 hosts Id delete gateway timeout response a status code equal to that given
func (o *V1HostsIDDeleteGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the v1 hosts Id delete gateway timeout response
func (o *V1HostsIDDeleteGatewayTimeout) Code() int {
	return 504
}

func (o *V1HostsIDDeleteGatewayTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/hosts/{host_id}][%d] v1HostsIdDeleteGatewayTimeout %s", 504, payload)
}

func (o *V1HostsIDDeleteGatewayTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/hosts/{host_id}][%d] v1HostsIdDeleteGatewayTimeout %s", 504, payload)
}

func (o *V1HostsIDDeleteGatewayTimeout) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostsIDDeleteGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

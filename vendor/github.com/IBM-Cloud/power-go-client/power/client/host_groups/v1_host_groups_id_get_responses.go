// Code generated by go-swagger; DO NOT EDIT.

package host_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/IBM-Cloud/power-go-client/power/models"
)

// V1HostGroupsIDGetReader is a Reader for the V1HostGroupsIDGet structure.
type V1HostGroupsIDGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1HostGroupsIDGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1HostGroupsIDGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1HostGroupsIDGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewV1HostGroupsIDGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1HostGroupsIDGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV1HostGroupsIDGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1HostGroupsIDGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewV1HostGroupsIDGetGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/host-groups/{host_group_id}] v1.hostGroups.id.get", response, response.Code())
	}
}

// NewV1HostGroupsIDGetOK creates a V1HostGroupsIDGetOK with default headers values
func NewV1HostGroupsIDGetOK() *V1HostGroupsIDGetOK {
	return &V1HostGroupsIDGetOK{}
}

/*
V1HostGroupsIDGetOK describes a response with status code 200, with default header values.

OK
*/
type V1HostGroupsIDGetOK struct {
	Payload *models.HostGroup
}

// IsSuccess returns true when this v1 host groups Id get o k response has a 2xx status code
func (o *V1HostGroupsIDGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 host groups Id get o k response has a 3xx status code
func (o *V1HostGroupsIDGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 host groups Id get o k response has a 4xx status code
func (o *V1HostGroupsIDGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 host groups Id get o k response has a 5xx status code
func (o *V1HostGroupsIDGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 host groups Id get o k response a status code equal to that given
func (o *V1HostGroupsIDGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 host groups Id get o k response
func (o *V1HostGroupsIDGetOK) Code() int {
	return 200
}

func (o *V1HostGroupsIDGetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups/{host_group_id}][%d] v1HostGroupsIdGetOK %s", 200, payload)
}

func (o *V1HostGroupsIDGetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups/{host_group_id}][%d] v1HostGroupsIdGetOK %s", 200, payload)
}

func (o *V1HostGroupsIDGetOK) GetPayload() *models.HostGroup {
	return o.Payload
}

func (o *V1HostGroupsIDGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HostGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostGroupsIDGetBadRequest creates a V1HostGroupsIDGetBadRequest with default headers values
func NewV1HostGroupsIDGetBadRequest() *V1HostGroupsIDGetBadRequest {
	return &V1HostGroupsIDGetBadRequest{}
}

/*
V1HostGroupsIDGetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1HostGroupsIDGetBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 host groups Id get bad request response has a 2xx status code
func (o *V1HostGroupsIDGetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 host groups Id get bad request response has a 3xx status code
func (o *V1HostGroupsIDGetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 host groups Id get bad request response has a 4xx status code
func (o *V1HostGroupsIDGetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 host groups Id get bad request response has a 5xx status code
func (o *V1HostGroupsIDGetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 host groups Id get bad request response a status code equal to that given
func (o *V1HostGroupsIDGetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 host groups Id get bad request response
func (o *V1HostGroupsIDGetBadRequest) Code() int {
	return 400
}

func (o *V1HostGroupsIDGetBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups/{host_group_id}][%d] v1HostGroupsIdGetBadRequest %s", 400, payload)
}

func (o *V1HostGroupsIDGetBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups/{host_group_id}][%d] v1HostGroupsIdGetBadRequest %s", 400, payload)
}

func (o *V1HostGroupsIDGetBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostGroupsIDGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostGroupsIDGetUnauthorized creates a V1HostGroupsIDGetUnauthorized with default headers values
func NewV1HostGroupsIDGetUnauthorized() *V1HostGroupsIDGetUnauthorized {
	return &V1HostGroupsIDGetUnauthorized{}
}

/*
V1HostGroupsIDGetUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type V1HostGroupsIDGetUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 host groups Id get unauthorized response has a 2xx status code
func (o *V1HostGroupsIDGetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 host groups Id get unauthorized response has a 3xx status code
func (o *V1HostGroupsIDGetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 host groups Id get unauthorized response has a 4xx status code
func (o *V1HostGroupsIDGetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 host groups Id get unauthorized response has a 5xx status code
func (o *V1HostGroupsIDGetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 host groups Id get unauthorized response a status code equal to that given
func (o *V1HostGroupsIDGetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the v1 host groups Id get unauthorized response
func (o *V1HostGroupsIDGetUnauthorized) Code() int {
	return 401
}

func (o *V1HostGroupsIDGetUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups/{host_group_id}][%d] v1HostGroupsIdGetUnauthorized %s", 401, payload)
}

func (o *V1HostGroupsIDGetUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups/{host_group_id}][%d] v1HostGroupsIdGetUnauthorized %s", 401, payload)
}

func (o *V1HostGroupsIDGetUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostGroupsIDGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostGroupsIDGetForbidden creates a V1HostGroupsIDGetForbidden with default headers values
func NewV1HostGroupsIDGetForbidden() *V1HostGroupsIDGetForbidden {
	return &V1HostGroupsIDGetForbidden{}
}

/*
V1HostGroupsIDGetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1HostGroupsIDGetForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 host groups Id get forbidden response has a 2xx status code
func (o *V1HostGroupsIDGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 host groups Id get forbidden response has a 3xx status code
func (o *V1HostGroupsIDGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 host groups Id get forbidden response has a 4xx status code
func (o *V1HostGroupsIDGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 host groups Id get forbidden response has a 5xx status code
func (o *V1HostGroupsIDGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 host groups Id get forbidden response a status code equal to that given
func (o *V1HostGroupsIDGetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 host groups Id get forbidden response
func (o *V1HostGroupsIDGetForbidden) Code() int {
	return 403
}

func (o *V1HostGroupsIDGetForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups/{host_group_id}][%d] v1HostGroupsIdGetForbidden %s", 403, payload)
}

func (o *V1HostGroupsIDGetForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups/{host_group_id}][%d] v1HostGroupsIdGetForbidden %s", 403, payload)
}

func (o *V1HostGroupsIDGetForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostGroupsIDGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostGroupsIDGetNotFound creates a V1HostGroupsIDGetNotFound with default headers values
func NewV1HostGroupsIDGetNotFound() *V1HostGroupsIDGetNotFound {
	return &V1HostGroupsIDGetNotFound{}
}

/*
V1HostGroupsIDGetNotFound describes a response with status code 404, with default header values.

Not Found
*/
type V1HostGroupsIDGetNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 host groups Id get not found response has a 2xx status code
func (o *V1HostGroupsIDGetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 host groups Id get not found response has a 3xx status code
func (o *V1HostGroupsIDGetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 host groups Id get not found response has a 4xx status code
func (o *V1HostGroupsIDGetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 host groups Id get not found response has a 5xx status code
func (o *V1HostGroupsIDGetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 host groups Id get not found response a status code equal to that given
func (o *V1HostGroupsIDGetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the v1 host groups Id get not found response
func (o *V1HostGroupsIDGetNotFound) Code() int {
	return 404
}

func (o *V1HostGroupsIDGetNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups/{host_group_id}][%d] v1HostGroupsIdGetNotFound %s", 404, payload)
}

func (o *V1HostGroupsIDGetNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups/{host_group_id}][%d] v1HostGroupsIdGetNotFound %s", 404, payload)
}

func (o *V1HostGroupsIDGetNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostGroupsIDGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostGroupsIDGetInternalServerError creates a V1HostGroupsIDGetInternalServerError with default headers values
func NewV1HostGroupsIDGetInternalServerError() *V1HostGroupsIDGetInternalServerError {
	return &V1HostGroupsIDGetInternalServerError{}
}

/*
V1HostGroupsIDGetInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1HostGroupsIDGetInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 host groups Id get internal server error response has a 2xx status code
func (o *V1HostGroupsIDGetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 host groups Id get internal server error response has a 3xx status code
func (o *V1HostGroupsIDGetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 host groups Id get internal server error response has a 4xx status code
func (o *V1HostGroupsIDGetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 host groups Id get internal server error response has a 5xx status code
func (o *V1HostGroupsIDGetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 host groups Id get internal server error response a status code equal to that given
func (o *V1HostGroupsIDGetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 host groups Id get internal server error response
func (o *V1HostGroupsIDGetInternalServerError) Code() int {
	return 500
}

func (o *V1HostGroupsIDGetInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups/{host_group_id}][%d] v1HostGroupsIdGetInternalServerError %s", 500, payload)
}

func (o *V1HostGroupsIDGetInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups/{host_group_id}][%d] v1HostGroupsIdGetInternalServerError %s", 500, payload)
}

func (o *V1HostGroupsIDGetInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostGroupsIDGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostGroupsIDGetGatewayTimeout creates a V1HostGroupsIDGetGatewayTimeout with default headers values
func NewV1HostGroupsIDGetGatewayTimeout() *V1HostGroupsIDGetGatewayTimeout {
	return &V1HostGroupsIDGetGatewayTimeout{}
}

/*
V1HostGroupsIDGetGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. Request is still processing and taking longer than expected.
*/
type V1HostGroupsIDGetGatewayTimeout struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 host groups Id get gateway timeout response has a 2xx status code
func (o *V1HostGroupsIDGetGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 host groups Id get gateway timeout response has a 3xx status code
func (o *V1HostGroupsIDGetGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 host groups Id get gateway timeout response has a 4xx status code
func (o *V1HostGroupsIDGetGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 host groups Id get gateway timeout response has a 5xx status code
func (o *V1HostGroupsIDGetGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 host groups Id get gateway timeout response a status code equal to that given
func (o *V1HostGroupsIDGetGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the v1 host groups Id get gateway timeout response
func (o *V1HostGroupsIDGetGatewayTimeout) Code() int {
	return 504
}

func (o *V1HostGroupsIDGetGatewayTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups/{host_group_id}][%d] v1HostGroupsIdGetGatewayTimeout %s", 504, payload)
}

func (o *V1HostGroupsIDGetGatewayTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/host-groups/{host_group_id}][%d] v1HostGroupsIdGetGatewayTimeout %s", 504, payload)
}

func (o *V1HostGroupsIDGetGatewayTimeout) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostGroupsIDGetGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

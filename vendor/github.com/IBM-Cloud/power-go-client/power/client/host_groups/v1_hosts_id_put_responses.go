// Code generated by go-swagger; DO NOT EDIT.

package host_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/IBM-Cloud/power-go-client/power/models"
)

// V1HostsIDPutReader is a Reader for the V1HostsIDPut structure.
type V1HostsIDPutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1HostsIDPutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1HostsIDPutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1HostsIDPutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewV1HostsIDPutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1HostsIDPutForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV1HostsIDPutNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewV1HostsIDPutUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1HostsIDPutInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewV1HostsIDPutGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/hosts/{host_id}] v1.hosts.id.put", response, response.Code())
	}
}

// NewV1HostsIDPutOK creates a V1HostsIDPutOK with default headers values
func NewV1HostsIDPutOK() *V1HostsIDPutOK {
	return &V1HostsIDPutOK{}
}

/*
V1HostsIDPutOK describes a response with status code 200, with default header values.

OK
*/
type V1HostsIDPutOK struct {
	Payload *models.Host
}

// IsSuccess returns true when this v1 hosts Id put o k response has a 2xx status code
func (o *V1HostsIDPutOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 hosts Id put o k response has a 3xx status code
func (o *V1HostsIDPutOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hosts Id put o k response has a 4xx status code
func (o *V1HostsIDPutOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 hosts Id put o k response has a 5xx status code
func (o *V1HostsIDPutOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hosts Id put o k response a status code equal to that given
func (o *V1HostsIDPutOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 hosts Id put o k response
func (o *V1HostsIDPutOK) Code() int {
	return 200
}

func (o *V1HostsIDPutOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/hosts/{host_id}][%d] v1HostsIdPutOK %s", 200, payload)
}

func (o *V1HostsIDPutOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/hosts/{host_id}][%d] v1HostsIdPutOK %s", 200, payload)
}

func (o *V1HostsIDPutOK) GetPayload() *models.Host {
	return o.Payload
}

func (o *V1HostsIDPutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Host)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostsIDPutBadRequest creates a V1HostsIDPutBadRequest with default headers values
func NewV1HostsIDPutBadRequest() *V1HostsIDPutBadRequest {
	return &V1HostsIDPutBadRequest{}
}

/*
V1HostsIDPutBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1HostsIDPutBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hosts Id put bad request response has a 2xx status code
func (o *V1HostsIDPutBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hosts Id put bad request response has a 3xx status code
func (o *V1HostsIDPutBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hosts Id put bad request response has a 4xx status code
func (o *V1HostsIDPutBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 hosts Id put bad request response has a 5xx status code
func (o *V1HostsIDPutBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hosts Id put bad request response a status code equal to that given
func (o *V1HostsIDPutBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 hosts Id put bad request response
func (o *V1HostsIDPutBadRequest) Code() int {
	return 400
}

func (o *V1HostsIDPutBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/hosts/{host_id}][%d] v1HostsIdPutBadRequest %s", 400, payload)
}

func (o *V1HostsIDPutBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/hosts/{host_id}][%d] v1HostsIdPutBadRequest %s", 400, payload)
}

func (o *V1HostsIDPutBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostsIDPutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostsIDPutUnauthorized creates a V1HostsIDPutUnauthorized with default headers values
func NewV1HostsIDPutUnauthorized() *V1HostsIDPutUnauthorized {
	return &V1HostsIDPutUnauthorized{}
}

/*
V1HostsIDPutUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type V1HostsIDPutUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hosts Id put unauthorized response has a 2xx status code
func (o *V1HostsIDPutUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hosts Id put unauthorized response has a 3xx status code
func (o *V1HostsIDPutUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hosts Id put unauthorized response has a 4xx status code
func (o *V1HostsIDPutUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 hosts Id put unauthorized response has a 5xx status code
func (o *V1HostsIDPutUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hosts Id put unauthorized response a status code equal to that given
func (o *V1HostsIDPutUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the v1 hosts Id put unauthorized response
func (o *V1HostsIDPutUnauthorized) Code() int {
	return 401
}

func (o *V1HostsIDPutUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/hosts/{host_id}][%d] v1HostsIdPutUnauthorized %s", 401, payload)
}

func (o *V1HostsIDPutUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/hosts/{host_id}][%d] v1HostsIdPutUnauthorized %s", 401, payload)
}

func (o *V1HostsIDPutUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostsIDPutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostsIDPutForbidden creates a V1HostsIDPutForbidden with default headers values
func NewV1HostsIDPutForbidden() *V1HostsIDPutForbidden {
	return &V1HostsIDPutForbidden{}
}

/*
V1HostsIDPutForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1HostsIDPutForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hosts Id put forbidden response has a 2xx status code
func (o *V1HostsIDPutForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hosts Id put forbidden response has a 3xx status code
func (o *V1HostsIDPutForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hosts Id put forbidden response has a 4xx status code
func (o *V1HostsIDPutForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 hosts Id put forbidden response has a 5xx status code
func (o *V1HostsIDPutForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hosts Id put forbidden response a status code equal to that given
func (o *V1HostsIDPutForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 hosts Id put forbidden response
func (o *V1HostsIDPutForbidden) Code() int {
	return 403
}

func (o *V1HostsIDPutForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/hosts/{host_id}][%d] v1HostsIdPutForbidden %s", 403, payload)
}

func (o *V1HostsIDPutForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/hosts/{host_id}][%d] v1HostsIdPutForbidden %s", 403, payload)
}

func (o *V1HostsIDPutForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostsIDPutForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostsIDPutNotFound creates a V1HostsIDPutNotFound with default headers values
func NewV1HostsIDPutNotFound() *V1HostsIDPutNotFound {
	return &V1HostsIDPutNotFound{}
}

/*
V1HostsIDPutNotFound describes a response with status code 404, with default header values.

Not Found
*/
type V1HostsIDPutNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hosts Id put not found response has a 2xx status code
func (o *V1HostsIDPutNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hosts Id put not found response has a 3xx status code
func (o *V1HostsIDPutNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hosts Id put not found response has a 4xx status code
func (o *V1HostsIDPutNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 hosts Id put not found response has a 5xx status code
func (o *V1HostsIDPutNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hosts Id put not found response a status code equal to that given
func (o *V1HostsIDPutNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the v1 hosts Id put not found response
func (o *V1HostsIDPutNotFound) Code() int {
	return 404
}

func (o *V1HostsIDPutNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/hosts/{host_id}][%d] v1HostsIdPutNotFound %s", 404, payload)
}

func (o *V1HostsIDPutNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/hosts/{host_id}][%d] v1HostsIdPutNotFound %s", 404, payload)
}

func (o *V1HostsIDPutNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostsIDPutNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostsIDPutUnprocessableEntity creates a V1HostsIDPutUnprocessableEntity with default headers values
func NewV1HostsIDPutUnprocessableEntity() *V1HostsIDPutUnprocessableEntity {
	return &V1HostsIDPutUnprocessableEntity{}
}

/*
V1HostsIDPutUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type V1HostsIDPutUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hosts Id put unprocessable entity response has a 2xx status code
func (o *V1HostsIDPutUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hosts Id put unprocessable entity response has a 3xx status code
func (o *V1HostsIDPutUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hosts Id put unprocessable entity response has a 4xx status code
func (o *V1HostsIDPutUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 hosts Id put unprocessable entity response has a 5xx status code
func (o *V1HostsIDPutUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hosts Id put unprocessable entity response a status code equal to that given
func (o *V1HostsIDPutUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the v1 hosts Id put unprocessable entity response
func (o *V1HostsIDPutUnprocessableEntity) Code() int {
	return 422
}

func (o *V1HostsIDPutUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/hosts/{host_id}][%d] v1HostsIdPutUnprocessableEntity %s", 422, payload)
}

func (o *V1HostsIDPutUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/hosts/{host_id}][%d] v1HostsIdPutUnprocessableEntity %s", 422, payload)
}

func (o *V1HostsIDPutUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostsIDPutUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostsIDPutInternalServerError creates a V1HostsIDPutInternalServerError with default headers values
func NewV1HostsIDPutInternalServerError() *V1HostsIDPutInternalServerError {
	return &V1HostsIDPutInternalServerError{}
}

/*
V1HostsIDPutInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1HostsIDPutInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hosts Id put internal server error response has a 2xx status code
func (o *V1HostsIDPutInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hosts Id put internal server error response has a 3xx status code
func (o *V1HostsIDPutInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hosts Id put internal server error response has a 4xx status code
func (o *V1HostsIDPutInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 hosts Id put internal server error response has a 5xx status code
func (o *V1HostsIDPutInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 hosts Id put internal server error response a status code equal to that given
func (o *V1HostsIDPutInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 hosts Id put internal server error response
func (o *V1HostsIDPutInternalServerError) Code() int {
	return 500
}

func (o *V1HostsIDPutInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/hosts/{host_id}][%d] v1HostsIdPutInternalServerError %s", 500, payload)
}

func (o *V1HostsIDPutInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/hosts/{host_id}][%d] v1HostsIdPutInternalServerError %s", 500, payload)
}

func (o *V1HostsIDPutInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostsIDPutInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostsIDPutGatewayTimeout creates a V1HostsIDPutGatewayTimeout with default headers values
func NewV1HostsIDPutGatewayTimeout() *V1HostsIDPutGatewayTimeout {
	return &V1HostsIDPutGatewayTimeout{}
}

/*
V1HostsIDPutGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. Request is still processing and taking longer than expected.
*/
type V1HostsIDPutGatewayTimeout struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hosts Id put gateway timeout response has a 2xx status code
func (o *V1HostsIDPutGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hosts Id put gateway timeout response has a 3xx status code
func (o *V1HostsIDPutGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hosts Id put gateway timeout response has a 4xx status code
func (o *V1HostsIDPutGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 hosts Id put gateway timeout response has a 5xx status code
func (o *V1HostsIDPutGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 hosts Id put gateway timeout response a status code equal to that given
func (o *V1HostsIDPutGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the v1 hosts Id put gateway timeout response
func (o *V1HostsIDPutGatewayTimeout) Code() int {
	return 504
}

func (o *V1HostsIDPutGatewayTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/hosts/{host_id}][%d] v1HostsIdPutGatewayTimeout %s", 504, payload)
}

func (o *V1HostsIDPutGatewayTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/hosts/{host_id}][%d] v1HostsIdPutGatewayTimeout %s", 504, payload)
}

func (o *V1HostsIDPutGatewayTimeout) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostsIDPutGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

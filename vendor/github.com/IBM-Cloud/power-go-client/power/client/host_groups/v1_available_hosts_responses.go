// Code generated by go-swagger; DO NOT EDIT.

package host_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/IBM-Cloud/power-go-client/power/models"
)

// V1AvailableHostsReader is a Reader for the V1AvailableHosts structure.
type V1AvailableHostsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1AvailableHostsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1AvailableHostsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1AvailableHostsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewV1AvailableHostsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1AvailableHostsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1AvailableHostsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewV1AvailableHostsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/available-hosts] v1.availableHosts", response, response.Code())
	}
}

// NewV1AvailableHostsOK creates a V1AvailableHostsOK with default headers values
func NewV1AvailableHostsOK() *V1AvailableHostsOK {
	return &V1AvailableHostsOK{}
}

/*
V1AvailableHostsOK describes a response with status code 200, with default header values.

OK
*/
type V1AvailableHostsOK struct {
	Payload models.AvailableHostList
}

// IsSuccess returns true when this v1 available hosts o k response has a 2xx status code
func (o *V1AvailableHostsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 available hosts o k response has a 3xx status code
func (o *V1AvailableHostsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 available hosts o k response has a 4xx status code
func (o *V1AvailableHostsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 available hosts o k response has a 5xx status code
func (o *V1AvailableHostsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 available hosts o k response a status code equal to that given
func (o *V1AvailableHostsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 available hosts o k response
func (o *V1AvailableHostsOK) Code() int {
	return 200
}

func (o *V1AvailableHostsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/available-hosts][%d] v1AvailableHostsOK %s", 200, payload)
}

func (o *V1AvailableHostsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/available-hosts][%d] v1AvailableHostsOK %s", 200, payload)
}

func (o *V1AvailableHostsOK) GetPayload() models.AvailableHostList {
	return o.Payload
}

func (o *V1AvailableHostsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1AvailableHostsBadRequest creates a V1AvailableHostsBadRequest with default headers values
func NewV1AvailableHostsBadRequest() *V1AvailableHostsBadRequest {
	return &V1AvailableHostsBadRequest{}
}

/*
V1AvailableHostsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1AvailableHostsBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 available hosts bad request response has a 2xx status code
func (o *V1AvailableHostsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 available hosts bad request response has a 3xx status code
func (o *V1AvailableHostsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 available hosts bad request response has a 4xx status code
func (o *V1AvailableHostsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 available hosts bad request response has a 5xx status code
func (o *V1AvailableHostsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 available hosts bad request response a status code equal to that given
func (o *V1AvailableHostsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 available hosts bad request response
func (o *V1AvailableHostsBadRequest) Code() int {
	return 400
}

func (o *V1AvailableHostsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/available-hosts][%d] v1AvailableHostsBadRequest %s", 400, payload)
}

func (o *V1AvailableHostsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/available-hosts][%d] v1AvailableHostsBadRequest %s", 400, payload)
}

func (o *V1AvailableHostsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1AvailableHostsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1AvailableHostsUnauthorized creates a V1AvailableHostsUnauthorized with default headers values
func NewV1AvailableHostsUnauthorized() *V1AvailableHostsUnauthorized {
	return &V1AvailableHostsUnauthorized{}
}

/*
V1AvailableHostsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type V1AvailableHostsUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 available hosts unauthorized response has a 2xx status code
func (o *V1AvailableHostsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 available hosts unauthorized response has a 3xx status code
func (o *V1AvailableHostsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 available hosts unauthorized response has a 4xx status code
func (o *V1AvailableHostsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 available hosts unauthorized response has a 5xx status code
func (o *V1AvailableHostsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 available hosts unauthorized response a status code equal to that given
func (o *V1AvailableHostsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the v1 available hosts unauthorized response
func (o *V1AvailableHostsUnauthorized) Code() int {
	return 401
}

func (o *V1AvailableHostsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/available-hosts][%d] v1AvailableHostsUnauthorized %s", 401, payload)
}

func (o *V1AvailableHostsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/available-hosts][%d] v1AvailableHostsUnauthorized %s", 401, payload)
}

func (o *V1AvailableHostsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1AvailableHostsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1AvailableHostsForbidden creates a V1AvailableHostsForbidden with default headers values
func NewV1AvailableHostsForbidden() *V1AvailableHostsForbidden {
	return &V1AvailableHostsForbidden{}
}

/*
V1AvailableHostsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1AvailableHostsForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 available hosts forbidden response has a 2xx status code
func (o *V1AvailableHostsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 available hosts forbidden response has a 3xx status code
func (o *V1AvailableHostsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 available hosts forbidden response has a 4xx status code
func (o *V1AvailableHostsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 available hosts forbidden response has a 5xx status code
func (o *V1AvailableHostsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 available hosts forbidden response a status code equal to that given
func (o *V1AvailableHostsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 available hosts forbidden response
func (o *V1AvailableHostsForbidden) Code() int {
	return 403
}

func (o *V1AvailableHostsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/available-hosts][%d] v1AvailableHostsForbidden %s", 403, payload)
}

func (o *V1AvailableHostsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/available-hosts][%d] v1AvailableHostsForbidden %s", 403, payload)
}

func (o *V1AvailableHostsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1AvailableHostsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1AvailableHostsInternalServerError creates a V1AvailableHostsInternalServerError with default headers values
func NewV1AvailableHostsInternalServerError() *V1AvailableHostsInternalServerError {
	return &V1AvailableHostsInternalServerError{}
}

/*
V1AvailableHostsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1AvailableHostsInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 available hosts internal server error response has a 2xx status code
func (o *V1AvailableHostsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 available hosts internal server error response has a 3xx status code
func (o *V1AvailableHostsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 available hosts internal server error response has a 4xx status code
func (o *V1AvailableHostsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 available hosts internal server error response has a 5xx status code
func (o *V1AvailableHostsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 available hosts internal server error response a status code equal to that given
func (o *V1AvailableHostsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 available hosts internal server error response
func (o *V1AvailableHostsInternalServerError) Code() int {
	return 500
}

func (o *V1AvailableHostsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/available-hosts][%d] v1AvailableHostsInternalServerError %s", 500, payload)
}

func (o *V1AvailableHostsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/available-hosts][%d] v1AvailableHostsInternalServerError %s", 500, payload)
}

func (o *V1AvailableHostsInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1AvailableHostsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1AvailableHostsGatewayTimeout creates a V1AvailableHostsGatewayTimeout with default headers values
func NewV1AvailableHostsGatewayTimeout() *V1AvailableHostsGatewayTimeout {
	return &V1AvailableHostsGatewayTimeout{}
}

/*
V1AvailableHostsGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. Request is still processing and taking longer than expected.
*/
type V1AvailableHostsGatewayTimeout struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 available hosts gateway timeout response has a 2xx status code
func (o *V1AvailableHostsGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 available hosts gateway timeout response has a 3xx status code
func (o *V1AvailableHostsGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 available hosts gateway timeout response has a 4xx status code
func (o *V1AvailableHostsGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 available hosts gateway timeout response has a 5xx status code
func (o *V1AvailableHostsGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 available hosts gateway timeout response a status code equal to that given
func (o *V1AvailableHostsGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the v1 available hosts gateway timeout response
func (o *V1AvailableHostsGatewayTimeout) Code() int {
	return 504
}

func (o *V1AvailableHostsGatewayTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/available-hosts][%d] v1AvailableHostsGatewayTimeout %s", 504, payload)
}

func (o *V1AvailableHostsGatewayTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/available-hosts][%d] v1AvailableHostsGatewayTimeout %s", 504, payload)
}

func (o *V1AvailableHostsGatewayTimeout) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1AvailableHostsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

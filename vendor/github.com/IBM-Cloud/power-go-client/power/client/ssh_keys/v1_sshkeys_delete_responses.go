// Code generated by go-swagger; DO NOT EDIT.

package ssh_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/IBM-Cloud/power-go-client/power/models"
)

// V1SshkeysDeleteReader is a Reader for the V1SshkeysDelete structure.
type V1SshkeysDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1SshkeysDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1SshkeysDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1SshkeysDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewV1SshkeysDeleteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1SshkeysDeleteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV1SshkeysDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewV1SshkeysDeleteGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1SshkeysDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/ssh-keys/{sshkey_id}] v1.sshkeys.delete", response, response.Code())
	}
}

// NewV1SshkeysDeleteOK creates a V1SshkeysDeleteOK with default headers values
func NewV1SshkeysDeleteOK() *V1SshkeysDeleteOK {
	return &V1SshkeysDeleteOK{}
}

/*
V1SshkeysDeleteOK describes a response with status code 200, with default header values.

OK
*/
type V1SshkeysDeleteOK struct {
	Payload models.Object
}

// IsSuccess returns true when this v1 sshkeys delete o k response has a 2xx status code
func (o *V1SshkeysDeleteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 sshkeys delete o k response has a 3xx status code
func (o *V1SshkeysDeleteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 sshkeys delete o k response has a 4xx status code
func (o *V1SshkeysDeleteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 sshkeys delete o k response has a 5xx status code
func (o *V1SshkeysDeleteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 sshkeys delete o k response a status code equal to that given
func (o *V1SshkeysDeleteOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 sshkeys delete o k response
func (o *V1SshkeysDeleteOK) Code() int {
	return 200
}

func (o *V1SshkeysDeleteOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysDeleteOK %s", 200, payload)
}

func (o *V1SshkeysDeleteOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysDeleteOK %s", 200, payload)
}

func (o *V1SshkeysDeleteOK) GetPayload() models.Object {
	return o.Payload
}

func (o *V1SshkeysDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SshkeysDeleteBadRequest creates a V1SshkeysDeleteBadRequest with default headers values
func NewV1SshkeysDeleteBadRequest() *V1SshkeysDeleteBadRequest {
	return &V1SshkeysDeleteBadRequest{}
}

/*
V1SshkeysDeleteBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1SshkeysDeleteBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 sshkeys delete bad request response has a 2xx status code
func (o *V1SshkeysDeleteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 sshkeys delete bad request response has a 3xx status code
func (o *V1SshkeysDeleteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 sshkeys delete bad request response has a 4xx status code
func (o *V1SshkeysDeleteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 sshkeys delete bad request response has a 5xx status code
func (o *V1SshkeysDeleteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 sshkeys delete bad request response a status code equal to that given
func (o *V1SshkeysDeleteBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 sshkeys delete bad request response
func (o *V1SshkeysDeleteBadRequest) Code() int {
	return 400
}

func (o *V1SshkeysDeleteBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysDeleteBadRequest %s", 400, payload)
}

func (o *V1SshkeysDeleteBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysDeleteBadRequest %s", 400, payload)
}

func (o *V1SshkeysDeleteBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1SshkeysDeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SshkeysDeleteUnauthorized creates a V1SshkeysDeleteUnauthorized with default headers values
func NewV1SshkeysDeleteUnauthorized() *V1SshkeysDeleteUnauthorized {
	return &V1SshkeysDeleteUnauthorized{}
}

/*
V1SshkeysDeleteUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type V1SshkeysDeleteUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 sshkeys delete unauthorized response has a 2xx status code
func (o *V1SshkeysDeleteUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 sshkeys delete unauthorized response has a 3xx status code
func (o *V1SshkeysDeleteUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 sshkeys delete unauthorized response has a 4xx status code
func (o *V1SshkeysDeleteUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 sshkeys delete unauthorized response has a 5xx status code
func (o *V1SshkeysDeleteUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 sshkeys delete unauthorized response a status code equal to that given
func (o *V1SshkeysDeleteUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the v1 sshkeys delete unauthorized response
func (o *V1SshkeysDeleteUnauthorized) Code() int {
	return 401
}

func (o *V1SshkeysDeleteUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysDeleteUnauthorized %s", 401, payload)
}

func (o *V1SshkeysDeleteUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysDeleteUnauthorized %s", 401, payload)
}

func (o *V1SshkeysDeleteUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1SshkeysDeleteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SshkeysDeleteForbidden creates a V1SshkeysDeleteForbidden with default headers values
func NewV1SshkeysDeleteForbidden() *V1SshkeysDeleteForbidden {
	return &V1SshkeysDeleteForbidden{}
}

/*
V1SshkeysDeleteForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1SshkeysDeleteForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 sshkeys delete forbidden response has a 2xx status code
func (o *V1SshkeysDeleteForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 sshkeys delete forbidden response has a 3xx status code
func (o *V1SshkeysDeleteForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 sshkeys delete forbidden response has a 4xx status code
func (o *V1SshkeysDeleteForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 sshkeys delete forbidden response has a 5xx status code
func (o *V1SshkeysDeleteForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 sshkeys delete forbidden response a status code equal to that given
func (o *V1SshkeysDeleteForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 sshkeys delete forbidden response
func (o *V1SshkeysDeleteForbidden) Code() int {
	return 403
}

func (o *V1SshkeysDeleteForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysDeleteForbidden %s", 403, payload)
}

func (o *V1SshkeysDeleteForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysDeleteForbidden %s", 403, payload)
}

func (o *V1SshkeysDeleteForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1SshkeysDeleteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SshkeysDeleteNotFound creates a V1SshkeysDeleteNotFound with default headers values
func NewV1SshkeysDeleteNotFound() *V1SshkeysDeleteNotFound {
	return &V1SshkeysDeleteNotFound{}
}

/*
V1SshkeysDeleteNotFound describes a response with status code 404, with default header values.

Not Found
*/
type V1SshkeysDeleteNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 sshkeys delete not found response has a 2xx status code
func (o *V1SshkeysDeleteNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 sshkeys delete not found response has a 3xx status code
func (o *V1SshkeysDeleteNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 sshkeys delete not found response has a 4xx status code
func (o *V1SshkeysDeleteNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 sshkeys delete not found response has a 5xx status code
func (o *V1SshkeysDeleteNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 sshkeys delete not found response a status code equal to that given
func (o *V1SshkeysDeleteNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the v1 sshkeys delete not found response
func (o *V1SshkeysDeleteNotFound) Code() int {
	return 404
}

func (o *V1SshkeysDeleteNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysDeleteNotFound %s", 404, payload)
}

func (o *V1SshkeysDeleteNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysDeleteNotFound %s", 404, payload)
}

func (o *V1SshkeysDeleteNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1SshkeysDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SshkeysDeleteGone creates a V1SshkeysDeleteGone with default headers values
func NewV1SshkeysDeleteGone() *V1SshkeysDeleteGone {
	return &V1SshkeysDeleteGone{}
}

/*
V1SshkeysDeleteGone describes a response with status code 410, with default header values.

Gone
*/
type V1SshkeysDeleteGone struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 sshkeys delete gone response has a 2xx status code
func (o *V1SshkeysDeleteGone) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 sshkeys delete gone response has a 3xx status code
func (o *V1SshkeysDeleteGone) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 sshkeys delete gone response has a 4xx status code
func (o *V1SshkeysDeleteGone) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 sshkeys delete gone response has a 5xx status code
func (o *V1SshkeysDeleteGone) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 sshkeys delete gone response a status code equal to that given
func (o *V1SshkeysDeleteGone) IsCode(code int) bool {
	return code == 410
}

// Code gets the status code for the v1 sshkeys delete gone response
func (o *V1SshkeysDeleteGone) Code() int {
	return 410
}

func (o *V1SshkeysDeleteGone) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysDeleteGone %s", 410, payload)
}

func (o *V1SshkeysDeleteGone) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysDeleteGone %s", 410, payload)
}

func (o *V1SshkeysDeleteGone) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1SshkeysDeleteGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SshkeysDeleteInternalServerError creates a V1SshkeysDeleteInternalServerError with default headers values
func NewV1SshkeysDeleteInternalServerError() *V1SshkeysDeleteInternalServerError {
	return &V1SshkeysDeleteInternalServerError{}
}

/*
V1SshkeysDeleteInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1SshkeysDeleteInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 sshkeys delete internal server error response has a 2xx status code
func (o *V1SshkeysDeleteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 sshkeys delete internal server error response has a 3xx status code
func (o *V1SshkeysDeleteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 sshkeys delete internal server error response has a 4xx status code
func (o *V1SshkeysDeleteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 sshkeys delete internal server error response has a 5xx status code
func (o *V1SshkeysDeleteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 sshkeys delete internal server error response a status code equal to that given
func (o *V1SshkeysDeleteInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 sshkeys delete internal server error response
func (o *V1SshkeysDeleteInternalServerError) Code() int {
	return 500
}

func (o *V1SshkeysDeleteInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysDeleteInternalServerError %s", 500, payload)
}

func (o *V1SshkeysDeleteInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysDeleteInternalServerError %s", 500, payload)
}

func (o *V1SshkeysDeleteInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1SshkeysDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package ssh_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/IBM-Cloud/power-go-client/power/models"
)

// V1SshkeysGetallReader is a Reader for the V1SshkeysGetall structure.
type V1SshkeysGetallReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1SshkeysGetallReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1SshkeysGetallOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1SshkeysGetallBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewV1SshkeysGetallUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1SshkeysGetallForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV1SshkeysGetallNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1SshkeysGetallInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/ssh-keys] v1.sshkeys.getall", response, response.Code())
	}
}

// NewV1SshkeysGetallOK creates a V1SshkeysGetallOK with default headers values
func NewV1SshkeysGetallOK() *V1SshkeysGetallOK {
	return &V1SshkeysGetallOK{}
}

/*
V1SshkeysGetallOK describes a response with status code 200, with default header values.

OK
*/
type V1SshkeysGetallOK struct {
	Payload *models.WorkspaceSSHKeys
}

// IsSuccess returns true when this v1 sshkeys getall o k response has a 2xx status code
func (o *V1SshkeysGetallOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 sshkeys getall o k response has a 3xx status code
func (o *V1SshkeysGetallOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 sshkeys getall o k response has a 4xx status code
func (o *V1SshkeysGetallOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 sshkeys getall o k response has a 5xx status code
func (o *V1SshkeysGetallOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 sshkeys getall o k response a status code equal to that given
func (o *V1SshkeysGetallOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 sshkeys getall o k response
func (o *V1SshkeysGetallOK) Code() int {
	return 200
}

func (o *V1SshkeysGetallOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys][%d] v1SshkeysGetallOK %s", 200, payload)
}

func (o *V1SshkeysGetallOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys][%d] v1SshkeysGetallOK %s", 200, payload)
}

func (o *V1SshkeysGetallOK) GetPayload() *models.WorkspaceSSHKeys {
	return o.Payload
}

func (o *V1SshkeysGetallOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WorkspaceSSHKeys)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SshkeysGetallBadRequest creates a V1SshkeysGetallBadRequest with default headers values
func NewV1SshkeysGetallBadRequest() *V1SshkeysGetallBadRequest {
	return &V1SshkeysGetallBadRequest{}
}

/*
V1SshkeysGetallBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1SshkeysGetallBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 sshkeys getall bad request response has a 2xx status code
func (o *V1SshkeysGetallBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 sshkeys getall bad request response has a 3xx status code
func (o *V1SshkeysGetallBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 sshkeys getall bad request response has a 4xx status code
func (o *V1SshkeysGetallBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 sshkeys getall bad request response has a 5xx status code
func (o *V1SshkeysGetallBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 sshkeys getall bad request response a status code equal to that given
func (o *V1SshkeysGetallBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 sshkeys getall bad request response
func (o *V1SshkeysGetallBadRequest) Code() int {
	return 400
}

func (o *V1SshkeysGetallBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys][%d] v1SshkeysGetallBadRequest %s", 400, payload)
}

func (o *V1SshkeysGetallBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys][%d] v1SshkeysGetallBadRequest %s", 400, payload)
}

func (o *V1SshkeysGetallBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1SshkeysGetallBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SshkeysGetallUnauthorized creates a V1SshkeysGetallUnauthorized with default headers values
func NewV1SshkeysGetallUnauthorized() *V1SshkeysGetallUnauthorized {
	return &V1SshkeysGetallUnauthorized{}
}

/*
V1SshkeysGetallUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type V1SshkeysGetallUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 sshkeys getall unauthorized response has a 2xx status code
func (o *V1SshkeysGetallUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 sshkeys getall unauthorized response has a 3xx status code
func (o *V1SshkeysGetallUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 sshkeys getall unauthorized response has a 4xx status code
func (o *V1SshkeysGetallUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 sshkeys getall unauthorized response has a 5xx status code
func (o *V1SshkeysGetallUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 sshkeys getall unauthorized response a status code equal to that given
func (o *V1SshkeysGetallUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the v1 sshkeys getall unauthorized response
func (o *V1SshkeysGetallUnauthorized) Code() int {
	return 401
}

func (o *V1SshkeysGetallUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys][%d] v1SshkeysGetallUnauthorized %s", 401, payload)
}

func (o *V1SshkeysGetallUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys][%d] v1SshkeysGetallUnauthorized %s", 401, payload)
}

func (o *V1SshkeysGetallUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1SshkeysGetallUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SshkeysGetallForbidden creates a V1SshkeysGetallForbidden with default headers values
func NewV1SshkeysGetallForbidden() *V1SshkeysGetallForbidden {
	return &V1SshkeysGetallForbidden{}
}

/*
V1SshkeysGetallForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1SshkeysGetallForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 sshkeys getall forbidden response has a 2xx status code
func (o *V1SshkeysGetallForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 sshkeys getall forbidden response has a 3xx status code
func (o *V1SshkeysGetallForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 sshkeys getall forbidden response has a 4xx status code
func (o *V1SshkeysGetallForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 sshkeys getall forbidden response has a 5xx status code
func (o *V1SshkeysGetallForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 sshkeys getall forbidden response a status code equal to that given
func (o *V1SshkeysGetallForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 sshkeys getall forbidden response
func (o *V1SshkeysGetallForbidden) Code() int {
	return 403
}

func (o *V1SshkeysGetallForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys][%d] v1SshkeysGetallForbidden %s", 403, payload)
}

func (o *V1SshkeysGetallForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys][%d] v1SshkeysGetallForbidden %s", 403, payload)
}

func (o *V1SshkeysGetallForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1SshkeysGetallForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SshkeysGetallNotFound creates a V1SshkeysGetallNotFound with default headers values
func NewV1SshkeysGetallNotFound() *V1SshkeysGetallNotFound {
	return &V1SshkeysGetallNotFound{}
}

/*
V1SshkeysGetallNotFound describes a response with status code 404, with default header values.

Not Found
*/
type V1SshkeysGetallNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 sshkeys getall not found response has a 2xx status code
func (o *V1SshkeysGetallNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 sshkeys getall not found response has a 3xx status code
func (o *V1SshkeysGetallNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 sshkeys getall not found response has a 4xx status code
func (o *V1SshkeysGetallNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 sshkeys getall not found response has a 5xx status code
func (o *V1SshkeysGetallNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 sshkeys getall not found response a status code equal to that given
func (o *V1SshkeysGetallNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the v1 sshkeys getall not found response
func (o *V1SshkeysGetallNotFound) Code() int {
	return 404
}

func (o *V1SshkeysGetallNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys][%d] v1SshkeysGetallNotFound %s", 404, payload)
}

func (o *V1SshkeysGetallNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys][%d] v1SshkeysGetallNotFound %s", 404, payload)
}

func (o *V1SshkeysGetallNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1SshkeysGetallNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SshkeysGetallInternalServerError creates a V1SshkeysGetallInternalServerError with default headers values
func NewV1SshkeysGetallInternalServerError() *V1SshkeysGetallInternalServerError {
	return &V1SshkeysGetallInternalServerError{}
}

/*
V1SshkeysGetallInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1SshkeysGetallInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 sshkeys getall internal server error response has a 2xx status code
func (o *V1SshkeysGetallInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 sshkeys getall internal server error response has a 3xx status code
func (o *V1SshkeysGetallInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 sshkeys getall internal server error response has a 4xx status code
func (o *V1SshkeysGetallInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 sshkeys getall internal server error response has a 5xx status code
func (o *V1SshkeysGetallInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 sshkeys getall internal server error response a status code equal to that given
func (o *V1SshkeysGetallInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 sshkeys getall internal server error response
func (o *V1SshkeysGetallInternalServerError) Code() int {
	return 500
}

func (o *V1SshkeysGetallInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys][%d] v1SshkeysGetallInternalServerError %s", 500, payload)
}

func (o *V1SshkeysGetallInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys][%d] v1SshkeysGetallInternalServerError %s", 500, payload)
}

func (o *V1SshkeysGetallInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1SshkeysGetallInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package ssh_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/IBM-Cloud/power-go-client/power/models"
)

// V1SshkeysGetReader is a Reader for the V1SshkeysGet structure.
type V1SshkeysGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1SshkeysGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1SshkeysGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1SshkeysGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewV1SshkeysGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1SshkeysGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV1SshkeysGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1SshkeysGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/ssh-keys/{sshkey_id}] v1.sshkeys.get", response, response.Code())
	}
}

// NewV1SshkeysGetOK creates a V1SshkeysGetOK with default headers values
func NewV1SshkeysGetOK() *V1SshkeysGetOK {
	return &V1SshkeysGetOK{}
}

/*
V1SshkeysGetOK describes a response with status code 200, with default header values.

OK
*/
type V1SshkeysGetOK struct {
	Payload *models.WorkspaceSSHKey
}

// IsSuccess returns true when this v1 sshkeys get o k response has a 2xx status code
func (o *V1SshkeysGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 sshkeys get o k response has a 3xx status code
func (o *V1SshkeysGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 sshkeys get o k response has a 4xx status code
func (o *V1SshkeysGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 sshkeys get o k response has a 5xx status code
func (o *V1SshkeysGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 sshkeys get o k response a status code equal to that given
func (o *V1SshkeysGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 sshkeys get o k response
func (o *V1SshkeysGetOK) Code() int {
	return 200
}

func (o *V1SshkeysGetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysGetOK %s", 200, payload)
}

func (o *V1SshkeysGetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysGetOK %s", 200, payload)
}

func (o *V1SshkeysGetOK) GetPayload() *models.WorkspaceSSHKey {
	return o.Payload
}

func (o *V1SshkeysGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WorkspaceSSHKey)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SshkeysGetBadRequest creates a V1SshkeysGetBadRequest with default headers values
func NewV1SshkeysGetBadRequest() *V1SshkeysGetBadRequest {
	return &V1SshkeysGetBadRequest{}
}

/*
V1SshkeysGetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1SshkeysGetBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 sshkeys get bad request response has a 2xx status code
func (o *V1SshkeysGetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 sshkeys get bad request response has a 3xx status code
func (o *V1SshkeysGetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 sshkeys get bad request response has a 4xx status code
func (o *V1SshkeysGetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 sshkeys get bad request response has a 5xx status code
func (o *V1SshkeysGetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 sshkeys get bad request response a status code equal to that given
func (o *V1SshkeysGetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 sshkeys get bad request response
func (o *V1SshkeysGetBadRequest) Code() int {
	return 400
}

func (o *V1SshkeysGetBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysGetBadRequest %s", 400, payload)
}

func (o *V1SshkeysGetBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysGetBadRequest %s", 400, payload)
}

func (o *V1SshkeysGetBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1SshkeysGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SshkeysGetUnauthorized creates a V1SshkeysGetUnauthorized with default headers values
func NewV1SshkeysGetUnauthorized() *V1SshkeysGetUnauthorized {
	return &V1SshkeysGetUnauthorized{}
}

/*
V1SshkeysGetUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type V1SshkeysGetUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 sshkeys get unauthorized response has a 2xx status code
func (o *V1SshkeysGetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 sshkeys get unauthorized response has a 3xx status code
func (o *V1SshkeysGetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 sshkeys get unauthorized response has a 4xx status code
func (o *V1SshkeysGetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 sshkeys get unauthorized response has a 5xx status code
func (o *V1SshkeysGetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 sshkeys get unauthorized response a status code equal to that given
func (o *V1SshkeysGetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the v1 sshkeys get unauthorized response
func (o *V1SshkeysGetUnauthorized) Code() int {
	return 401
}

func (o *V1SshkeysGetUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysGetUnauthorized %s", 401, payload)
}

func (o *V1SshkeysGetUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysGetUnauthorized %s", 401, payload)
}

func (o *V1SshkeysGetUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1SshkeysGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SshkeysGetForbidden creates a V1SshkeysGetForbidden with default headers values
func NewV1SshkeysGetForbidden() *V1SshkeysGetForbidden {
	return &V1SshkeysGetForbidden{}
}

/*
V1SshkeysGetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1SshkeysGetForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 sshkeys get forbidden response has a 2xx status code
func (o *V1SshkeysGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 sshkeys get forbidden response has a 3xx status code
func (o *V1SshkeysGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 sshkeys get forbidden response has a 4xx status code
func (o *V1SshkeysGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 sshkeys get forbidden response has a 5xx status code
func (o *V1SshkeysGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 sshkeys get forbidden response a status code equal to that given
func (o *V1SshkeysGetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 sshkeys get forbidden response
func (o *V1SshkeysGetForbidden) Code() int {
	return 403
}

func (o *V1SshkeysGetForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysGetForbidden %s", 403, payload)
}

func (o *V1SshkeysGetForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysGetForbidden %s", 403, payload)
}

func (o *V1SshkeysGetForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1SshkeysGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SshkeysGetNotFound creates a V1SshkeysGetNotFound with default headers values
func NewV1SshkeysGetNotFound() *V1SshkeysGetNotFound {
	return &V1SshkeysGetNotFound{}
}

/*
V1SshkeysGetNotFound describes a response with status code 404, with default header values.

Not Found
*/
type V1SshkeysGetNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 sshkeys get not found response has a 2xx status code
func (o *V1SshkeysGetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 sshkeys get not found response has a 3xx status code
func (o *V1SshkeysGetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 sshkeys get not found response has a 4xx status code
func (o *V1SshkeysGetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 sshkeys get not found response has a 5xx status code
func (o *V1SshkeysGetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 sshkeys get not found response a status code equal to that given
func (o *V1SshkeysGetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the v1 sshkeys get not found response
func (o *V1SshkeysGetNotFound) Code() int {
	return 404
}

func (o *V1SshkeysGetNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysGetNotFound %s", 404, payload)
}

func (o *V1SshkeysGetNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysGetNotFound %s", 404, payload)
}

func (o *V1SshkeysGetNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1SshkeysGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1SshkeysGetInternalServerError creates a V1SshkeysGetInternalServerError with default headers values
func NewV1SshkeysGetInternalServerError() *V1SshkeysGetInternalServerError {
	return &V1SshkeysGetInternalServerError{}
}

/*
V1SshkeysGetInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1SshkeysGetInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 sshkeys get internal server error response has a 2xx status code
func (o *V1SshkeysGetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 sshkeys get internal server error response has a 3xx status code
func (o *V1SshkeysGetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 sshkeys get internal server error response has a 4xx status code
func (o *V1SshkeysGetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 sshkeys get internal server error response has a 5xx status code
func (o *V1SshkeysGetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 sshkeys get internal server error response a status code equal to that given
func (o *V1SshkeysGetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 sshkeys get internal server error response
func (o *V1SshkeysGetInternalServerError) Code() int {
	return 500
}

func (o *V1SshkeysGetInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysGetInternalServerError %s", 500, payload)
}

func (o *V1SshkeysGetInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/ssh-keys/{sshkey_id}][%d] v1SshkeysGetInternalServerError %s", 500, payload)
}

func (o *V1SshkeysGetInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1SshkeysGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

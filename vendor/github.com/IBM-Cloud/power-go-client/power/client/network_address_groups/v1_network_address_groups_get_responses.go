// Code generated by go-swagger; DO NOT EDIT.

package network_address_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/IBM-Cloud/power-go-client/power/models"
)

// V1NetworkAddressGroupsGetReader is a Reader for the V1NetworkAddressGroupsGet structure.
type V1NetworkAddressGroupsGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1NetworkAddressGroupsGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1NetworkAddressGroupsGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1NetworkAddressGroupsGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewV1NetworkAddressGroupsGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1NetworkAddressGroupsGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV1NetworkAddressGroupsGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1NetworkAddressGroupsGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/network-address-groups] v1.networkAddressGroups.get", response, response.Code())
	}
}

// NewV1NetworkAddressGroupsGetOK creates a V1NetworkAddressGroupsGetOK with default headers values
func NewV1NetworkAddressGroupsGetOK() *V1NetworkAddressGroupsGetOK {
	return &V1NetworkAddressGroupsGetOK{}
}

/*
V1NetworkAddressGroupsGetOK describes a response with status code 200, with default header values.

OK
*/
type V1NetworkAddressGroupsGetOK struct {
	Payload *models.NetworkAddressGroups
}

// IsSuccess returns true when this v1 network address groups get o k response has a 2xx status code
func (o *V1NetworkAddressGroupsGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 network address groups get o k response has a 3xx status code
func (o *V1NetworkAddressGroupsGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 network address groups get o k response has a 4xx status code
func (o *V1NetworkAddressGroupsGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 network address groups get o k response has a 5xx status code
func (o *V1NetworkAddressGroupsGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 network address groups get o k response a status code equal to that given
func (o *V1NetworkAddressGroupsGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 network address groups get o k response
func (o *V1NetworkAddressGroupsGetOK) Code() int {
	return 200
}

func (o *V1NetworkAddressGroupsGetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-address-groups][%d] v1NetworkAddressGroupsGetOK %s", 200, payload)
}

func (o *V1NetworkAddressGroupsGetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-address-groups][%d] v1NetworkAddressGroupsGetOK %s", 200, payload)
}

func (o *V1NetworkAddressGroupsGetOK) GetPayload() *models.NetworkAddressGroups {
	return o.Payload
}

func (o *V1NetworkAddressGroupsGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NetworkAddressGroups)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1NetworkAddressGroupsGetBadRequest creates a V1NetworkAddressGroupsGetBadRequest with default headers values
func NewV1NetworkAddressGroupsGetBadRequest() *V1NetworkAddressGroupsGetBadRequest {
	return &V1NetworkAddressGroupsGetBadRequest{}
}

/*
V1NetworkAddressGroupsGetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1NetworkAddressGroupsGetBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 network address groups get bad request response has a 2xx status code
func (o *V1NetworkAddressGroupsGetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 network address groups get bad request response has a 3xx status code
func (o *V1NetworkAddressGroupsGetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 network address groups get bad request response has a 4xx status code
func (o *V1NetworkAddressGroupsGetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 network address groups get bad request response has a 5xx status code
func (o *V1NetworkAddressGroupsGetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 network address groups get bad request response a status code equal to that given
func (o *V1NetworkAddressGroupsGetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 network address groups get bad request response
func (o *V1NetworkAddressGroupsGetBadRequest) Code() int {
	return 400
}

func (o *V1NetworkAddressGroupsGetBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-address-groups][%d] v1NetworkAddressGroupsGetBadRequest %s", 400, payload)
}

func (o *V1NetworkAddressGroupsGetBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-address-groups][%d] v1NetworkAddressGroupsGetBadRequest %s", 400, payload)
}

func (o *V1NetworkAddressGroupsGetBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1NetworkAddressGroupsGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1NetworkAddressGroupsGetUnauthorized creates a V1NetworkAddressGroupsGetUnauthorized with default headers values
func NewV1NetworkAddressGroupsGetUnauthorized() *V1NetworkAddressGroupsGetUnauthorized {
	return &V1NetworkAddressGroupsGetUnauthorized{}
}

/*
V1NetworkAddressGroupsGetUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type V1NetworkAddressGroupsGetUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 network address groups get unauthorized response has a 2xx status code
func (o *V1NetworkAddressGroupsGetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 network address groups get unauthorized response has a 3xx status code
func (o *V1NetworkAddressGroupsGetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 network address groups get unauthorized response has a 4xx status code
func (o *V1NetworkAddressGroupsGetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 network address groups get unauthorized response has a 5xx status code
func (o *V1NetworkAddressGroupsGetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 network address groups get unauthorized response a status code equal to that given
func (o *V1NetworkAddressGroupsGetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the v1 network address groups get unauthorized response
func (o *V1NetworkAddressGroupsGetUnauthorized) Code() int {
	return 401
}

func (o *V1NetworkAddressGroupsGetUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-address-groups][%d] v1NetworkAddressGroupsGetUnauthorized %s", 401, payload)
}

func (o *V1NetworkAddressGroupsGetUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-address-groups][%d] v1NetworkAddressGroupsGetUnauthorized %s", 401, payload)
}

func (o *V1NetworkAddressGroupsGetUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1NetworkAddressGroupsGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1NetworkAddressGroupsGetForbidden creates a V1NetworkAddressGroupsGetForbidden with default headers values
func NewV1NetworkAddressGroupsGetForbidden() *V1NetworkAddressGroupsGetForbidden {
	return &V1NetworkAddressGroupsGetForbidden{}
}

/*
V1NetworkAddressGroupsGetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1NetworkAddressGroupsGetForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 network address groups get forbidden response has a 2xx status code
func (o *V1NetworkAddressGroupsGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 network address groups get forbidden response has a 3xx status code
func (o *V1NetworkAddressGroupsGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 network address groups get forbidden response has a 4xx status code
func (o *V1NetworkAddressGroupsGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 network address groups get forbidden response has a 5xx status code
func (o *V1NetworkAddressGroupsGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 network address groups get forbidden response a status code equal to that given
func (o *V1NetworkAddressGroupsGetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 network address groups get forbidden response
func (o *V1NetworkAddressGroupsGetForbidden) Code() int {
	return 403
}

func (o *V1NetworkAddressGroupsGetForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-address-groups][%d] v1NetworkAddressGroupsGetForbidden %s", 403, payload)
}

func (o *V1NetworkAddressGroupsGetForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-address-groups][%d] v1NetworkAddressGroupsGetForbidden %s", 403, payload)
}

func (o *V1NetworkAddressGroupsGetForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1NetworkAddressGroupsGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1NetworkAddressGroupsGetNotFound creates a V1NetworkAddressGroupsGetNotFound with default headers values
func NewV1NetworkAddressGroupsGetNotFound() *V1NetworkAddressGroupsGetNotFound {
	return &V1NetworkAddressGroupsGetNotFound{}
}

/*
V1NetworkAddressGroupsGetNotFound describes a response with status code 404, with default header values.

Not Found
*/
type V1NetworkAddressGroupsGetNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 network address groups get not found response has a 2xx status code
func (o *V1NetworkAddressGroupsGetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 network address groups get not found response has a 3xx status code
func (o *V1NetworkAddressGroupsGetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 network address groups get not found response has a 4xx status code
func (o *V1NetworkAddressGroupsGetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 network address groups get not found response has a 5xx status code
func (o *V1NetworkAddressGroupsGetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 network address groups get not found response a status code equal to that given
func (o *V1NetworkAddressGroupsGetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the v1 network address groups get not found response
func (o *V1NetworkAddressGroupsGetNotFound) Code() int {
	return 404
}

func (o *V1NetworkAddressGroupsGetNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-address-groups][%d] v1NetworkAddressGroupsGetNotFound %s", 404, payload)
}

func (o *V1NetworkAddressGroupsGetNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-address-groups][%d] v1NetworkAddressGroupsGetNotFound %s", 404, payload)
}

func (o *V1NetworkAddressGroupsGetNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1NetworkAddressGroupsGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1NetworkAddressGroupsGetInternalServerError creates a V1NetworkAddressGroupsGetInternalServerError with default headers values
func NewV1NetworkAddressGroupsGetInternalServerError() *V1NetworkAddressGroupsGetInternalServerError {
	return &V1NetworkAddressGroupsGetInternalServerError{}
}

/*
V1NetworkAddressGroupsGetInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1NetworkAddressGroupsGetInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 network address groups get internal server error response has a 2xx status code
func (o *V1NetworkAddressGroupsGetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 network address groups get internal server error response has a 3xx status code
func (o *V1NetworkAddressGroupsGetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 network address groups get internal server error response has a 4xx status code
func (o *V1NetworkAddressGroupsGetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 network address groups get internal server error response has a 5xx status code
func (o *V1NetworkAddressGroupsGetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 network address groups get internal server error response a status code equal to that given
func (o *V1NetworkAddressGroupsGetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 network address groups get internal server error response
func (o *V1NetworkAddressGroupsGetInternalServerError) Code() int {
	return 500
}

func (o *V1NetworkAddressGroupsGetInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-address-groups][%d] v1NetworkAddressGroupsGetInternalServerError %s", 500, payload)
}

func (o *V1NetworkAddressGroupsGetInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/network-address-groups][%d] v1NetworkAddressGroupsGetInternalServerError %s", 500, payload)
}

func (o *V1NetworkAddressGroupsGetInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1NetworkAddressGroupsGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

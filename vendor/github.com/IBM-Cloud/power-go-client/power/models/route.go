// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Route route
//
// swagger:model Route
type Route struct {

	// The route action
	// Required: true
	// Enum: ["deliver"]
	Action *string `json:"action"`

	// Indicates if the route is advertised externally of the workspace to PER and\or peer networks
	// Required: true
	// Enum: ["enable","disable"]
	Advertise *string `json:"advertise"`

	// The route's crn
	// Required: true
	Crn *string `json:"crn"`

	// The route destination
	// Required: true
	Destination *string `json:"destination"`

	// The destination type
	// Required: true
	// Enum: ["ipv4-address"]
	DestinationType *string `json:"destinationType"`

	// Indicates if the route should be enabled in the fabric
	Enabled bool `json:"enabled,omitempty"`

	// The unique route ID
	// Required: true
	ID *string `json:"id"`

	// Name of the route
	// Required: true
	// Max Length: 128
	// Pattern: ^[\s]*[A-Za-z0-9:_.\-][A-Za-z0-9\s:_.\-]*$
	Name *string `json:"name"`

	// The next hop
	// Required: true
	NextHop *string `json:"nextHop"`

	// The next hop type
	// Required: true
	// Enum: ["ipv4-address"]
	NextHopType *string `json:"nextHopType"`

	// The state of the route
	// Required: true
	// Enum: ["defined","deployed","disabled"]
	State *string `json:"state"`

	// user tags
	UserTags Tags `json:"userTags,omitempty"`
}

// Validate validates this route
func (m *Route) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdvertise(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextHop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextHopType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var routeTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["deliver"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routeTypeActionPropEnum = append(routeTypeActionPropEnum, v)
	}
}

const (

	// RouteActionDeliver captures enum value "deliver"
	RouteActionDeliver string = "deliver"
)

// prop value enum
func (m *Route) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routeTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Route) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

var routeTypeAdvertisePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enable","disable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routeTypeAdvertisePropEnum = append(routeTypeAdvertisePropEnum, v)
	}
}

const (

	// RouteAdvertiseEnable captures enum value "enable"
	RouteAdvertiseEnable string = "enable"

	// RouteAdvertiseDisable captures enum value "disable"
	RouteAdvertiseDisable string = "disable"
)

// prop value enum
func (m *Route) validateAdvertiseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routeTypeAdvertisePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Route) validateAdvertise(formats strfmt.Registry) error {

	if err := validate.Required("advertise", "body", m.Advertise); err != nil {
		return err
	}

	// value enum
	if err := m.validateAdvertiseEnum("advertise", "body", *m.Advertise); err != nil {
		return err
	}

	return nil
}

func (m *Route) validateCrn(formats strfmt.Registry) error {

	if err := validate.Required("crn", "body", m.Crn); err != nil {
		return err
	}

	return nil
}

func (m *Route) validateDestination(formats strfmt.Registry) error {

	if err := validate.Required("destination", "body", m.Destination); err != nil {
		return err
	}

	return nil
}

var routeTypeDestinationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ipv4-address"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routeTypeDestinationTypePropEnum = append(routeTypeDestinationTypePropEnum, v)
	}
}

const (

	// RouteDestinationTypeIPV4DashAddress captures enum value "ipv4-address"
	RouteDestinationTypeIPV4DashAddress string = "ipv4-address"
)

// prop value enum
func (m *Route) validateDestinationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routeTypeDestinationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Route) validateDestinationType(formats strfmt.Registry) error {

	if err := validate.Required("destinationType", "body", m.DestinationType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDestinationTypeEnum("destinationType", "body", *m.DestinationType); err != nil {
		return err
	}

	return nil
}

func (m *Route) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Route) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 128); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", *m.Name, `^[\s]*[A-Za-z0-9:_.\-][A-Za-z0-9\s:_.\-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Route) validateNextHop(formats strfmt.Registry) error {

	if err := validate.Required("nextHop", "body", m.NextHop); err != nil {
		return err
	}

	return nil
}

var routeTypeNextHopTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ipv4-address"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routeTypeNextHopTypePropEnum = append(routeTypeNextHopTypePropEnum, v)
	}
}

const (

	// RouteNextHopTypeIPV4DashAddress captures enum value "ipv4-address"
	RouteNextHopTypeIPV4DashAddress string = "ipv4-address"
)

// prop value enum
func (m *Route) validateNextHopTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routeTypeNextHopTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Route) validateNextHopType(formats strfmt.Registry) error {

	if err := validate.Required("nextHopType", "body", m.NextHopType); err != nil {
		return err
	}

	// value enum
	if err := m.validateNextHopTypeEnum("nextHopType", "body", *m.NextHopType); err != nil {
		return err
	}

	return nil
}

var routeTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["defined","deployed","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routeTypeStatePropEnum = append(routeTypeStatePropEnum, v)
	}
}

const (

	// RouteStateDefined captures enum value "defined"
	RouteStateDefined string = "defined"

	// RouteStateDeployed captures enum value "deployed"
	RouteStateDeployed string = "deployed"

	// RouteStateDisabled captures enum value "disabled"
	RouteStateDisabled string = "disabled"
)

// prop value enum
func (m *Route) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routeTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Route) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *Route) validateUserTags(formats strfmt.Registry) error {
	if swag.IsZero(m.UserTags) { // not required
		return nil
	}

	if err := m.UserTags.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("userTags")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("userTags")
		}
		return err
	}

	return nil
}

// ContextValidate validate this route based on the context it is used
func (m *Route) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Route) contextValidateUserTags(ctx context.Context, formats strfmt.Registry) error {

	if err := m.UserTags.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("userTags")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("userTags")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Route) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Route) UnmarshalBinary(b []byte) error {
	var res Route
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

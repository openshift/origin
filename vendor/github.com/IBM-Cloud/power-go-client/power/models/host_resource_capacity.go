// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HostResourceCapacity host resource capacity
//
// swagger:model HostResourceCapacity
type HostResourceCapacity struct {

	// available
	// Required: true
	Available *float64 `json:"available"`

	// reserved
	// Required: true
	Reserved *float64 `json:"reserved"`

	// total
	// Required: true
	Total *float64 `json:"total"`

	// used
	// Required: true
	Used *float64 `json:"used"`
}

// Validate validates this host resource capacity
func (m *HostResourceCapacity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReserved(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostResourceCapacity) validateAvailable(formats strfmt.Registry) error {

	if err := validate.Required("available", "body", m.Available); err != nil {
		return err
	}

	return nil
}

func (m *HostResourceCapacity) validateReserved(formats strfmt.Registry) error {

	if err := validate.Required("reserved", "body", m.Reserved); err != nil {
		return err
	}

	return nil
}

func (m *HostResourceCapacity) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("total", "body", m.Total); err != nil {
		return err
	}

	return nil
}

func (m *HostResourceCapacity) validateUsed(formats strfmt.Registry) error {

	if err := validate.Required("used", "body", m.Used); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this host resource capacity based on context it is used
func (m *HostResourceCapacity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HostResourceCapacity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostResourceCapacity) UnmarshalBinary(b []byte) error {
	var res HostResourceCapacity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StoragePoolCombined Combined Storage Pool Capacity
//
// swagger:model StoragePoolCombined
type StoragePoolCombined struct {

	// Pool name
	// Required: true
	PoolName *string `json:"poolName"`

	// Available/Unused pool capacity (GB)
	// Required: true
	Storage *int64 `json:"storage"`

	// Total pool capacity (GB)
	// Required: true
	TotalStorage *int64 `json:"totalStorage"`
}

// Validate validates this storage pool combined
func (m *StoragePoolCombined) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePoolName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalStorage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePoolCombined) validatePoolName(formats strfmt.Registry) error {

	if err := validate.Required("poolName", "body", m.PoolName); err != nil {
		return err
	}

	return nil
}

func (m *StoragePoolCombined) validateStorage(formats strfmt.Registry) error {

	if err := validate.Required("storage", "body", m.Storage); err != nil {
		return err
	}

	return nil
}

func (m *StoragePoolCombined) validateTotalStorage(formats strfmt.Registry) error {

	if err := validate.Required("totalStorage", "body", m.TotalStorage); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this storage pool combined based on context it is used
func (m *StoragePoolCombined) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StoragePoolCombined) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragePoolCombined) UnmarshalBinary(b []byte) error {
	var res StoragePoolCombined
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

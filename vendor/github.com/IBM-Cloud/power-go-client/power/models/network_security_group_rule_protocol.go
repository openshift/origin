// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkSecurityGroupRuleProtocol network security group rule protocol
//
// swagger:model NetworkSecurityGroupRuleProtocol
type NetworkSecurityGroupRuleProtocol struct {

	// If icmp type, a ICMP packet type affected by ICMP rules and if not present then all types are matched
	// Enum: ["all","echo","echo-reply","source-quench","time-exceeded","destination-unreach"]
	IcmpType *string `json:"icmpType,omitempty"`

	// If tcp type, the list of TCP flags and if not present then all flags are matched
	TCPFlags []*NetworkSecurityGroupRuleProtocolTCPFlag `json:"tcpFlags"`

	// The protocol of the network traffic
	// Enum: ["icmp","tcp","udp","all"]
	Type string `json:"type,omitempty"`
}

// Validate validates this network security group rule protocol
func (m *NetworkSecurityGroupRuleProtocol) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIcmpType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTCPFlags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var networkSecurityGroupRuleProtocolTypeIcmpTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["all","echo","echo-reply","source-quench","time-exceeded","destination-unreach"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkSecurityGroupRuleProtocolTypeIcmpTypePropEnum = append(networkSecurityGroupRuleProtocolTypeIcmpTypePropEnum, v)
	}
}

const (

	// NetworkSecurityGroupRuleProtocolIcmpTypeAll captures enum value "all"
	NetworkSecurityGroupRuleProtocolIcmpTypeAll string = "all"

	// NetworkSecurityGroupRuleProtocolIcmpTypeEcho captures enum value "echo"
	NetworkSecurityGroupRuleProtocolIcmpTypeEcho string = "echo"

	// NetworkSecurityGroupRuleProtocolIcmpTypeEchoDashReply captures enum value "echo-reply"
	NetworkSecurityGroupRuleProtocolIcmpTypeEchoDashReply string = "echo-reply"

	// NetworkSecurityGroupRuleProtocolIcmpTypeSourceDashQuench captures enum value "source-quench"
	NetworkSecurityGroupRuleProtocolIcmpTypeSourceDashQuench string = "source-quench"

	// NetworkSecurityGroupRuleProtocolIcmpTypeTimeDashExceeded captures enum value "time-exceeded"
	NetworkSecurityGroupRuleProtocolIcmpTypeTimeDashExceeded string = "time-exceeded"

	// NetworkSecurityGroupRuleProtocolIcmpTypeDestinationDashUnreach captures enum value "destination-unreach"
	NetworkSecurityGroupRuleProtocolIcmpTypeDestinationDashUnreach string = "destination-unreach"
)

// prop value enum
func (m *NetworkSecurityGroupRuleProtocol) validateIcmpTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, networkSecurityGroupRuleProtocolTypeIcmpTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetworkSecurityGroupRuleProtocol) validateIcmpType(formats strfmt.Registry) error {
	if swag.IsZero(m.IcmpType) { // not required
		return nil
	}

	// value enum
	if err := m.validateIcmpTypeEnum("icmpType", "body", *m.IcmpType); err != nil {
		return err
	}

	return nil
}

func (m *NetworkSecurityGroupRuleProtocol) validateTCPFlags(formats strfmt.Registry) error {
	if swag.IsZero(m.TCPFlags) { // not required
		return nil
	}

	for i := 0; i < len(m.TCPFlags); i++ {
		if swag.IsZero(m.TCPFlags[i]) { // not required
			continue
		}

		if m.TCPFlags[i] != nil {
			if err := m.TCPFlags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tcpFlags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tcpFlags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var networkSecurityGroupRuleProtocolTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["icmp","tcp","udp","all"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkSecurityGroupRuleProtocolTypeTypePropEnum = append(networkSecurityGroupRuleProtocolTypeTypePropEnum, v)
	}
}

const (

	// NetworkSecurityGroupRuleProtocolTypeIcmp captures enum value "icmp"
	NetworkSecurityGroupRuleProtocolTypeIcmp string = "icmp"

	// NetworkSecurityGroupRuleProtocolTypeTCP captures enum value "tcp"
	NetworkSecurityGroupRuleProtocolTypeTCP string = "tcp"

	// NetworkSecurityGroupRuleProtocolTypeUDP captures enum value "udp"
	NetworkSecurityGroupRuleProtocolTypeUDP string = "udp"

	// NetworkSecurityGroupRuleProtocolTypeAll captures enum value "all"
	NetworkSecurityGroupRuleProtocolTypeAll string = "all"
)

// prop value enum
func (m *NetworkSecurityGroupRuleProtocol) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, networkSecurityGroupRuleProtocolTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetworkSecurityGroupRuleProtocol) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this network security group rule protocol based on the context it is used
func (m *NetworkSecurityGroupRuleProtocol) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTCPFlags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkSecurityGroupRuleProtocol) contextValidateTCPFlags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TCPFlags); i++ {

		if m.TCPFlags[i] != nil {

			if swag.IsZero(m.TCPFlags[i]) { // not required
				return nil
			}

			if err := m.TCPFlags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tcpFlags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tcpFlags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkSecurityGroupRuleProtocol) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkSecurityGroupRuleProtocol) UnmarshalBinary(b []byte) error {
	var res NetworkSecurityGroupRuleProtocol
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

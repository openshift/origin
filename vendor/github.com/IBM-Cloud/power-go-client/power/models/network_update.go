// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkUpdate network update
//
// swagger:model NetworkUpdate
type NetworkUpdate struct {

	// Indicates if the network is advertised externally of the workspace to PER and\or peer networks
	// Enum: ["enable","disable"]
	Advertise string `json:"advertise,omitempty"`

	// Indicates if the ARP broadcast is enabled
	// Enum: ["enable","disable"]
	ArpBroadcast string `json:"arpBroadcast,omitempty"`

	// Replaces the current DNS Servers
	DNSServers []string `json:"dnsServers"`

	// Replaces the current Gateway IP Address
	Gateway *string `json:"gateway,omitempty"`

	// Replaces the current IP Address Ranges
	IPAddressRanges []*IPAddressRange `json:"ipAddressRanges"`

	// Replaces the current Network Name
	Name *string `json:"name,omitempty"`
}

// Validate validates this network update
func (m *NetworkUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdvertise(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArpBroadcast(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddressRanges(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var networkUpdateTypeAdvertisePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enable","disable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkUpdateTypeAdvertisePropEnum = append(networkUpdateTypeAdvertisePropEnum, v)
	}
}

const (

	// NetworkUpdateAdvertiseEnable captures enum value "enable"
	NetworkUpdateAdvertiseEnable string = "enable"

	// NetworkUpdateAdvertiseDisable captures enum value "disable"
	NetworkUpdateAdvertiseDisable string = "disable"
)

// prop value enum
func (m *NetworkUpdate) validateAdvertiseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, networkUpdateTypeAdvertisePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetworkUpdate) validateAdvertise(formats strfmt.Registry) error {
	if swag.IsZero(m.Advertise) { // not required
		return nil
	}

	// value enum
	if err := m.validateAdvertiseEnum("advertise", "body", m.Advertise); err != nil {
		return err
	}

	return nil
}

var networkUpdateTypeArpBroadcastPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enable","disable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkUpdateTypeArpBroadcastPropEnum = append(networkUpdateTypeArpBroadcastPropEnum, v)
	}
}

const (

	// NetworkUpdateArpBroadcastEnable captures enum value "enable"
	NetworkUpdateArpBroadcastEnable string = "enable"

	// NetworkUpdateArpBroadcastDisable captures enum value "disable"
	NetworkUpdateArpBroadcastDisable string = "disable"
)

// prop value enum
func (m *NetworkUpdate) validateArpBroadcastEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, networkUpdateTypeArpBroadcastPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetworkUpdate) validateArpBroadcast(formats strfmt.Registry) error {
	if swag.IsZero(m.ArpBroadcast) { // not required
		return nil
	}

	// value enum
	if err := m.validateArpBroadcastEnum("arpBroadcast", "body", m.ArpBroadcast); err != nil {
		return err
	}

	return nil
}

func (m *NetworkUpdate) validateIPAddressRanges(formats strfmt.Registry) error {
	if swag.IsZero(m.IPAddressRanges) { // not required
		return nil
	}

	for i := 0; i < len(m.IPAddressRanges); i++ {
		if swag.IsZero(m.IPAddressRanges[i]) { // not required
			continue
		}

		if m.IPAddressRanges[i] != nil {
			if err := m.IPAddressRanges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ipAddressRanges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ipAddressRanges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this network update based on the context it is used
func (m *NetworkUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIPAddressRanges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkUpdate) contextValidateIPAddressRanges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IPAddressRanges); i++ {

		if m.IPAddressRanges[i] != nil {

			if swag.IsZero(m.IPAddressRanges[i]) { // not required
				return nil
			}

			if err := m.IPAddressRanges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ipAddressRanges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ipAddressRanges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkUpdate) UnmarshalBinary(b []byte) error {
	var res NetworkUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

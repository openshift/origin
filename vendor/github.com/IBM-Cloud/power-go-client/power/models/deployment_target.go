// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeploymentTarget deployment target
//
// swagger:model DeploymentTarget
type DeploymentTarget struct {

	// The uuid of the host group or host
	// Required: true
	ID *string `json:"id"`

	// specify if deploying to a host group or a host
	// Required: true
	// Enum: ["hostGroup","host"]
	Type *string `json:"type"`
}

// Validate validates this deployment target
func (m *DeploymentTarget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentTarget) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var deploymentTargetTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["hostGroup","host"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentTargetTypeTypePropEnum = append(deploymentTargetTypeTypePropEnum, v)
	}
}

const (

	// DeploymentTargetTypeHostGroup captures enum value "hostGroup"
	DeploymentTargetTypeHostGroup string = "hostGroup"

	// DeploymentTargetTypeHost captures enum value "host"
	DeploymentTargetTypeHost string = "host"
)

// prop value enum
func (m *DeploymentTarget) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deploymentTargetTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeploymentTarget) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this deployment target based on context it is used
func (m *DeploymentTarget) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentTarget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentTarget) UnmarshalBinary(b []byte) error {
	var res DeploymentTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

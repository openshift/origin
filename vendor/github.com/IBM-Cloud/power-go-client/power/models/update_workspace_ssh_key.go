// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateWorkspaceSSHKey update workspace SSH key
//
// swagger:model UpdateWorkspaceSSHKey
type UpdateWorkspaceSSHKey struct {

	// Description of the sshkey
	Description *string `json:"description,omitempty" datastore:"description"`

	// User defined name for the SSH key
	// Max Length: 128
	// Pattern: ^[A-Za-z0-9-_]+(?: +[A-Za-z0-9-_]+)*$
	Name *string `json:"name,omitempty" datastore:"name"`

	// SSH RSA key
	SSHKey *string `json:"sshKey,omitempty" datastore:"sshKey"`

	// Visibility of the sshkey; workspace suggests ssh-key is only accessible in a workspace, account suggests ssh-key is accessible throughout an account
	// Enum: ["account","workspace"]
	Visibility *string `json:"visibility,omitempty" datastore:"visibility"`
}

// Validate validates this update workspace SSH key
func (m *UpdateWorkspaceSSHKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateWorkspaceSSHKey) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", *m.Name, 128); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", *m.Name, `^[A-Za-z0-9-_]+(?: +[A-Za-z0-9-_]+)*$`); err != nil {
		return err
	}

	return nil
}

var updateWorkspaceSshKeyTypeVisibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["account","workspace"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateWorkspaceSshKeyTypeVisibilityPropEnum = append(updateWorkspaceSshKeyTypeVisibilityPropEnum, v)
	}
}

const (

	// UpdateWorkspaceSSHKeyVisibilityAccount captures enum value "account"
	UpdateWorkspaceSSHKeyVisibilityAccount string = "account"

	// UpdateWorkspaceSSHKeyVisibilityWorkspace captures enum value "workspace"
	UpdateWorkspaceSSHKeyVisibilityWorkspace string = "workspace"
)

// prop value enum
func (m *UpdateWorkspaceSSHKey) validateVisibilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateWorkspaceSshKeyTypeVisibilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateWorkspaceSSHKey) validateVisibility(formats strfmt.Registry) error {
	if swag.IsZero(m.Visibility) { // not required
		return nil
	}

	// value enum
	if err := m.validateVisibilityEnum("visibility", "body", *m.Visibility); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update workspace SSH key based on context it is used
func (m *UpdateWorkspaceSSHKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateWorkspaceSSHKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateWorkspaceSSHKey) UnmarshalBinary(b []byte) error {
	var res UpdateWorkspaceSSHKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetServerVirtualSerialNumber get server virtual serial number
//
// swagger:model GetServerVirtualSerialNumber
type GetServerVirtualSerialNumber struct {

	// Description of the Virtual Serial Number
	// Required: true
	Description *string `json:"description"`

	// Virtual Serial Number
	// Required: true
	Serial *string `json:"serial"`

	// software tier
	SoftwareTier SoftwareTier `json:"softwareTier,omitempty"`
}

// Validate validates this get server virtual serial number
func (m *GetServerVirtualSerialNumber) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSerial(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwareTier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetServerVirtualSerialNumber) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *GetServerVirtualSerialNumber) validateSerial(formats strfmt.Registry) error {

	if err := validate.Required("serial", "body", m.Serial); err != nil {
		return err
	}

	return nil
}

func (m *GetServerVirtualSerialNumber) validateSoftwareTier(formats strfmt.Registry) error {
	if swag.IsZero(m.SoftwareTier) { // not required
		return nil
	}

	if err := m.SoftwareTier.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("softwareTier")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("softwareTier")
		}
		return err
	}

	return nil
}

// ContextValidate validate this get server virtual serial number based on the context it is used
func (m *GetServerVirtualSerialNumber) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSoftwareTier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetServerVirtualSerialNumber) contextValidateSoftwareTier(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.SoftwareTier) { // not required
		return nil
	}

	if err := m.SoftwareTier.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("softwareTier")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("softwareTier")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetServerVirtualSerialNumber) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetServerVirtualSerialNumber) UnmarshalBinary(b []byte) error {
	var res GetServerVirtualSerialNumber
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

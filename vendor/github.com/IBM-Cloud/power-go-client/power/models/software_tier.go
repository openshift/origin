// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SoftwareTier Software tier (IBMi licensing)
//
// swagger:model SoftwareTier
type SoftwareTier string

func NewSoftwareTier(value SoftwareTier) *SoftwareTier {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SoftwareTier.
func (m SoftwareTier) Pointer() *SoftwareTier {
	return &m
}

const (

	// SoftwareTierP05 captures enum value "P05"
	SoftwareTierP05 SoftwareTier = "P05"

	// SoftwareTierP10 captures enum value "P10"
	SoftwareTierP10 SoftwareTier = "P10"

	// SoftwareTierP20 captures enum value "P20"
	SoftwareTierP20 SoftwareTier = "P20"

	// SoftwareTierP30 captures enum value "P30"
	SoftwareTierP30 SoftwareTier = "P30"
)

// for schema
var softwareTierEnum []interface{}

func init() {
	var res []SoftwareTier
	if err := json.Unmarshal([]byte(`["P05","P10","P20","P30"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		softwareTierEnum = append(softwareTierEnum, v)
	}
}

func (m SoftwareTier) validateSoftwareTierEnum(path, location string, value SoftwareTier) error {
	if err := validate.EnumCase(path, location, value, softwareTierEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this software tier
func (m SoftwareTier) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSoftwareTierEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this software tier based on context it is used
func (m SoftwareTier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkCreatePeer network create peer
//
// swagger:model NetworkCreatePeer
type NetworkCreatePeer struct {

	// ID of the network peer
	// Required: true
	ID *string `json:"id"`

	// network address translation
	NetworkAddressTranslation *NetworkAddressTranslation `json:"networkAddressTranslation,omitempty"`

	// type
	Type NetworkPeerType `json:"type,omitempty"`
}

// Validate validates this network create peer
func (m *NetworkCreatePeer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkAddressTranslation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkCreatePeer) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *NetworkCreatePeer) validateNetworkAddressTranslation(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkAddressTranslation) { // not required
		return nil
	}

	if m.NetworkAddressTranslation != nil {
		if err := m.NetworkAddressTranslation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkAddressTranslation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkAddressTranslation")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkCreatePeer) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this network create peer based on the context it is used
func (m *NetworkCreatePeer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNetworkAddressTranslation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkCreatePeer) contextValidateNetworkAddressTranslation(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkAddressTranslation != nil {

		if swag.IsZero(m.NetworkAddressTranslation) { // not required
			return nil
		}

		if err := m.NetworkAddressTranslation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkAddressTranslation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkAddressTranslation")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkCreatePeer) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkCreatePeer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkCreatePeer) UnmarshalBinary(b []byte) error {
	var res NetworkCreatePeer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

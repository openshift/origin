package schema

import "io"

// Checksum represents the image checksum
type Checksum struct {
	ChecksumAlgorithm string `json:"checksum_algorithm"`
	ChecksumValue     string `json:"checksum_value"`
}

// ImageVersionResources The image version, which is composed of a product name and product version.
type ImageVersionResources struct {

	// Name of the producer/distribution of the image. For example windows or red hat.
	ProductName string `json:"product_name"`

	// Version *string for the disk image.
	ProductVersion string `json:"product_version"`
}

// ImageResources describes the image spec resources object.
type ImageResources struct {

	// The supported CPU architecture for a disk image.
	Architecture string `json:"architecture,omitempty"`

	// Checksum of the image. The checksum is used for image validation if the image has a source specified. For images
	// that do not have their source specified the checksum is generated by the image service.
	Checksum *Checksum `json:"checksum,omitempty"`

	// The type of image.
	ImageType string `json:"image_type,omitempty"`

	// The source URI points at the location of a the source image which is used to create/update image.
	SourceURI string `json:"source_uri,omitempty"`

	InitialPlacementRefList []Reference `json:"initial_placement_ref_list,omitempty"`

	// The image version
	Version *ImageVersionResources `json:"version,omitempty"`
}

// Image An intentful representation of a image spec
type Image struct {

	// A description for image.
	Description string `json:"description,omitempty"`

	// image Name.
	Name string `json:"name,omitempty"`

	Resources *ImageResources `json:"resources"`
}

// ImageVersionStatus represents the image version, which is composed of a product name and product version.
type ImageVersionStatus struct {

	// Name of the producer/distribution of the image. For example windows or red hat.
	ProductName string `json:"product_name"`

	// Version *string for the disk image.
	ProductVersion string `json:"product_version"`
}

// ImageResourcesDefStatus describes the image status resources object.
type ImageResourcesDefStatus struct {

	// The supported CPU architecture for a disk image.
	Architecture string `json:"architecture,omitempty"`

	// Checksum of the image. The checksum is used for image validation if the image has a source specified. For images
	// that do not have their source specified the checksum is generated by the image service.
	Checksum *Checksum `json:"checksum,omitempty"`

	// The type of image.
	ImageType string `json:"image_type,omitempty"`

	// List of URIs where the raw image data can be accessed.
	RetrievalURIList []string `json:"retrieval_uri_list,omitempty"`

	// The size of the image in bytes.
	SizeBytes int64 `json:"size_bytes,omitempty"`

	// The source URI points at the location of a the source image which is used to create/update image.
	SourceURI string `json:"source_uri,omitempty"`

	// The image version
	Version *ImageVersionStatus `json:"version,omitempty"`
}

// ImageDefStatus represents an intentful representation of a image status
type ImageDefStatus struct {
	AvailabilityZoneReference *Reference `json:"availability_zone_reference,omitempty"`

	ClusterReference *Reference `json:"cluster_reference,omitempty"`

	// A description for image.
	Description string `json:"description,omitempty"`

	// Any error messages for the image, if in an error state.
	MessageList []*MessageResource `json:"message_list,omitempty"`

	// image Name.
	Name string `json:"name"`

	Resources ImageResourcesDefStatus `json:"resources,omitempty"`

	// The state of the image.
	State string `json:"state,omitempty"`

	ExecutionContext *ExecutionContext `json:"execution_context,omitempty"`
}

// ImageIntent represents the response object for intentful operations on a image
type ImageIntent struct {
	APIVersion string `json:"api_version,omitempty"`

	Metadata *Metadata `json:"metadata"`

	Spec *Image `json:"spec,omitempty"`

	Status *ImageDefStatus `json:"status,omitempty"`
}

type ImageIntentRequest struct {
	APIVersion *string `json:"api_version,omitempty"`

	Metadata *Metadata `json:"metadata"`

	Spec *Image `json:"spec,omitempty"`
}

// ImageListIntent represents the response object for intentful operation of images
type ImageListIntent struct {
	APIVersion *string `json:"api_version"`

	Entities []*ImageIntent `json:"entities,omitempty"`

	Metadata *ListMetadata `json:"metadata"`
}

type File struct {
	// ContentType used in the HTTP header `Content-Type`
	ContentType string `json:"content_type"`

	// Content of the file
	Body io.Reader `json:"body"`
}

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	configv1 "github.com/openshift/api/config/v1"
	metav1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// OIDCClientStatusApplyConfiguration represents a declarative configuration of the OIDCClientStatus type for use
// with apply.
type OIDCClientStatusApplyConfiguration struct {
	ComponentName      *string                                 `json:"componentName,omitempty"`
	ComponentNamespace *string                                 `json:"componentNamespace,omitempty"`
	CurrentOIDCClients []OIDCClientReferenceApplyConfiguration `json:"currentOIDCClients,omitempty"`
	ConsumingUsers     []configv1.ConsumingUser                `json:"consumingUsers,omitempty"`
	Conditions         []metav1.ConditionApplyConfiguration    `json:"conditions,omitempty"`
}

// OIDCClientStatusApplyConfiguration constructs a declarative configuration of the OIDCClientStatus type for use with
// apply.
func OIDCClientStatus() *OIDCClientStatusApplyConfiguration {
	return &OIDCClientStatusApplyConfiguration{}
}

// WithComponentName sets the ComponentName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ComponentName field is set to the value of the last call.
func (b *OIDCClientStatusApplyConfiguration) WithComponentName(value string) *OIDCClientStatusApplyConfiguration {
	b.ComponentName = &value
	return b
}

// WithComponentNamespace sets the ComponentNamespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ComponentNamespace field is set to the value of the last call.
func (b *OIDCClientStatusApplyConfiguration) WithComponentNamespace(value string) *OIDCClientStatusApplyConfiguration {
	b.ComponentNamespace = &value
	return b
}

// WithCurrentOIDCClients adds the given value to the CurrentOIDCClients field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the CurrentOIDCClients field.
func (b *OIDCClientStatusApplyConfiguration) WithCurrentOIDCClients(values ...*OIDCClientReferenceApplyConfiguration) *OIDCClientStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithCurrentOIDCClients")
		}
		b.CurrentOIDCClients = append(b.CurrentOIDCClients, *values[i])
	}
	return b
}

// WithConsumingUsers adds the given value to the ConsumingUsers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ConsumingUsers field.
func (b *OIDCClientStatusApplyConfiguration) WithConsumingUsers(values ...configv1.ConsumingUser) *OIDCClientStatusApplyConfiguration {
	for i := range values {
		b.ConsumingUsers = append(b.ConsumingUsers, values[i])
	}
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *OIDCClientStatusApplyConfiguration) WithConditions(values ...*metav1.ConditionApplyConfiguration) *OIDCClientStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

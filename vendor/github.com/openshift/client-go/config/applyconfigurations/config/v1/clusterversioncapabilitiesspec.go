// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/openshift/api/config/v1"
)

// ClusterVersionCapabilitiesSpecApplyConfiguration represents a declarative configuration of the ClusterVersionCapabilitiesSpec type for use
// with apply.
type ClusterVersionCapabilitiesSpecApplyConfiguration struct {
	BaselineCapabilitySet         *v1.ClusterVersionCapabilitySet `json:"baselineCapabilitySet,omitempty"`
	AdditionalEnabledCapabilities []v1.ClusterVersionCapability   `json:"additionalEnabledCapabilities,omitempty"`
}

// ClusterVersionCapabilitiesSpecApplyConfiguration constructs a declarative configuration of the ClusterVersionCapabilitiesSpec type for use with
// apply.
func ClusterVersionCapabilitiesSpec() *ClusterVersionCapabilitiesSpecApplyConfiguration {
	return &ClusterVersionCapabilitiesSpecApplyConfiguration{}
}

// WithBaselineCapabilitySet sets the BaselineCapabilitySet field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BaselineCapabilitySet field is set to the value of the last call.
func (b *ClusterVersionCapabilitiesSpecApplyConfiguration) WithBaselineCapabilitySet(value v1.ClusterVersionCapabilitySet) *ClusterVersionCapabilitiesSpecApplyConfiguration {
	b.BaselineCapabilitySet = &value
	return b
}

// WithAdditionalEnabledCapabilities adds the given value to the AdditionalEnabledCapabilities field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AdditionalEnabledCapabilities field.
func (b *ClusterVersionCapabilitiesSpecApplyConfiguration) WithAdditionalEnabledCapabilities(values ...v1.ClusterVersionCapability) *ClusterVersionCapabilitiesSpecApplyConfiguration {
	for i := range values {
		b.AdditionalEnabledCapabilities = append(b.AdditionalEnabledCapabilities, values[i])
	}
	return b
}

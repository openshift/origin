// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// OIDCClientConfigApplyConfiguration represents a declarative configuration of the OIDCClientConfig type for use
// with apply.
type OIDCClientConfigApplyConfiguration struct {
	ComponentName      *string                                `json:"componentName,omitempty"`
	ComponentNamespace *string                                `json:"componentNamespace,omitempty"`
	ClientID           *string                                `json:"clientID,omitempty"`
	ClientSecret       *SecretNameReferenceApplyConfiguration `json:"clientSecret,omitempty"`
	ExtraScopes        []string                               `json:"extraScopes,omitempty"`
}

// OIDCClientConfigApplyConfiguration constructs a declarative configuration of the OIDCClientConfig type for use with
// apply.
func OIDCClientConfig() *OIDCClientConfigApplyConfiguration {
	return &OIDCClientConfigApplyConfiguration{}
}

// WithComponentName sets the ComponentName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ComponentName field is set to the value of the last call.
func (b *OIDCClientConfigApplyConfiguration) WithComponentName(value string) *OIDCClientConfigApplyConfiguration {
	b.ComponentName = &value
	return b
}

// WithComponentNamespace sets the ComponentNamespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ComponentNamespace field is set to the value of the last call.
func (b *OIDCClientConfigApplyConfiguration) WithComponentNamespace(value string) *OIDCClientConfigApplyConfiguration {
	b.ComponentNamespace = &value
	return b
}

// WithClientID sets the ClientID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClientID field is set to the value of the last call.
func (b *OIDCClientConfigApplyConfiguration) WithClientID(value string) *OIDCClientConfigApplyConfiguration {
	b.ClientID = &value
	return b
}

// WithClientSecret sets the ClientSecret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClientSecret field is set to the value of the last call.
func (b *OIDCClientConfigApplyConfiguration) WithClientSecret(value *SecretNameReferenceApplyConfiguration) *OIDCClientConfigApplyConfiguration {
	b.ClientSecret = value
	return b
}

// WithExtraScopes adds the given value to the ExtraScopes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExtraScopes field.
func (b *OIDCClientConfigApplyConfiguration) WithExtraScopes(values ...string) *OIDCClientConfigApplyConfiguration {
	for i := range values {
		b.ExtraScopes = append(b.ExtraScopes, values[i])
	}
	return b
}

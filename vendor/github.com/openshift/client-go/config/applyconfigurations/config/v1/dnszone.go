// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// DNSZoneApplyConfiguration represents a declarative configuration of the DNSZone type for use
// with apply.
type DNSZoneApplyConfiguration struct {
	ID   *string           `json:"id,omitempty"`
	Tags map[string]string `json:"tags,omitempty"`
}

// DNSZoneApplyConfiguration constructs a declarative configuration of the DNSZone type for use with
// apply.
func DNSZone() *DNSZoneApplyConfiguration {
	return &DNSZoneApplyConfiguration{}
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *DNSZoneApplyConfiguration) WithID(value string) *DNSZoneApplyConfiguration {
	b.ID = &value
	return b
}

// WithTags puts the entries into the Tags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Tags field,
// overwriting an existing map entries in Tags field with the same key.
func (b *DNSZoneApplyConfiguration) WithTags(entries map[string]string) *DNSZoneApplyConfiguration {
	if b.Tags == nil && len(entries) > 0 {
		b.Tags = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Tags[k] = v
	}
	return b
}

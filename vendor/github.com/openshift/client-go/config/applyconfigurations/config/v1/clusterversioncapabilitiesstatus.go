// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/openshift/api/config/v1"
)

// ClusterVersionCapabilitiesStatusApplyConfiguration represents a declarative configuration of the ClusterVersionCapabilitiesStatus type for use
// with apply.
type ClusterVersionCapabilitiesStatusApplyConfiguration struct {
	EnabledCapabilities []v1.ClusterVersionCapability `json:"enabledCapabilities,omitempty"`
	KnownCapabilities   []v1.ClusterVersionCapability `json:"knownCapabilities,omitempty"`
}

// ClusterVersionCapabilitiesStatusApplyConfiguration constructs a declarative configuration of the ClusterVersionCapabilitiesStatus type for use with
// apply.
func ClusterVersionCapabilitiesStatus() *ClusterVersionCapabilitiesStatusApplyConfiguration {
	return &ClusterVersionCapabilitiesStatusApplyConfiguration{}
}

// WithEnabledCapabilities adds the given value to the EnabledCapabilities field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the EnabledCapabilities field.
func (b *ClusterVersionCapabilitiesStatusApplyConfiguration) WithEnabledCapabilities(values ...v1.ClusterVersionCapability) *ClusterVersionCapabilitiesStatusApplyConfiguration {
	for i := range values {
		b.EnabledCapabilities = append(b.EnabledCapabilities, values[i])
	}
	return b
}

// WithKnownCapabilities adds the given value to the KnownCapabilities field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the KnownCapabilities field.
func (b *ClusterVersionCapabilitiesStatusApplyConfiguration) WithKnownCapabilities(values ...v1.ClusterVersionCapability) *ClusterVersionCapabilitiesStatusApplyConfiguration {
	for i := range values {
		b.KnownCapabilities = append(b.KnownCapabilities, values[i])
	}
	return b
}

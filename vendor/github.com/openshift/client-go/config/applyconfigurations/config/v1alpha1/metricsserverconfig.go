// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	configv1alpha1 "github.com/openshift/api/config/v1alpha1"
	v1 "k8s.io/api/core/v1"
)

// MetricsServerConfigApplyConfiguration represents a declarative configuration of the MetricsServerConfig type for use
// with apply.
type MetricsServerConfigApplyConfiguration struct {
	Audit                     *AuditApplyConfiguration              `json:"audit,omitempty"`
	NodeSelector              map[string]string                     `json:"nodeSelector,omitempty"`
	Tolerations               []v1.Toleration                       `json:"tolerations,omitempty"`
	Verbosity                 *configv1alpha1.VerbosityLevel        `json:"verbosity,omitempty"`
	Resources                 []ContainerResourceApplyConfiguration `json:"resources,omitempty"`
	TopologySpreadConstraints []v1.TopologySpreadConstraint         `json:"topologySpreadConstraints,omitempty"`
}

// MetricsServerConfigApplyConfiguration constructs a declarative configuration of the MetricsServerConfig type for use with
// apply.
func MetricsServerConfig() *MetricsServerConfigApplyConfiguration {
	return &MetricsServerConfigApplyConfiguration{}
}

// WithAudit sets the Audit field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Audit field is set to the value of the last call.
func (b *MetricsServerConfigApplyConfiguration) WithAudit(value *AuditApplyConfiguration) *MetricsServerConfigApplyConfiguration {
	b.Audit = value
	return b
}

// WithNodeSelector puts the entries into the NodeSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the NodeSelector field,
// overwriting an existing map entries in NodeSelector field with the same key.
func (b *MetricsServerConfigApplyConfiguration) WithNodeSelector(entries map[string]string) *MetricsServerConfigApplyConfiguration {
	if b.NodeSelector == nil && len(entries) > 0 {
		b.NodeSelector = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.NodeSelector[k] = v
	}
	return b
}

// WithTolerations adds the given value to the Tolerations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tolerations field.
func (b *MetricsServerConfigApplyConfiguration) WithTolerations(values ...v1.Toleration) *MetricsServerConfigApplyConfiguration {
	for i := range values {
		b.Tolerations = append(b.Tolerations, values[i])
	}
	return b
}

// WithVerbosity sets the Verbosity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Verbosity field is set to the value of the last call.
func (b *MetricsServerConfigApplyConfiguration) WithVerbosity(value configv1alpha1.VerbosityLevel) *MetricsServerConfigApplyConfiguration {
	b.Verbosity = &value
	return b
}

// WithResources adds the given value to the Resources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Resources field.
func (b *MetricsServerConfigApplyConfiguration) WithResources(values ...*ContainerResourceApplyConfiguration) *MetricsServerConfigApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithResources")
		}
		b.Resources = append(b.Resources, *values[i])
	}
	return b
}

// WithTopologySpreadConstraints adds the given value to the TopologySpreadConstraints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the TopologySpreadConstraints field.
func (b *MetricsServerConfigApplyConfiguration) WithTopologySpreadConstraints(values ...v1.TopologySpreadConstraint) *MetricsServerConfigApplyConfiguration {
	for i := range values {
		b.TopologySpreadConstraints = append(b.TopologySpreadConstraints, values[i])
	}
	return b
}

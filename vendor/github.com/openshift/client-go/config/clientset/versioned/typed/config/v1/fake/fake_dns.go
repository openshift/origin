// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/config/v1"
	configv1 "github.com/openshift/client-go/config/applyconfigurations/config/v1"
	typedconfigv1 "github.com/openshift/client-go/config/clientset/versioned/typed/config/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeDNSes implements DNSInterface
type fakeDNSes struct {
	*gentype.FakeClientWithListAndApply[*v1.DNS, *v1.DNSList, *configv1.DNSApplyConfiguration]
	Fake *FakeConfigV1
}

func newFakeDNSes(fake *FakeConfigV1) typedconfigv1.DNSInterface {
	return &fakeDNSes{
		gentype.NewFakeClientWithListAndApply[*v1.DNS, *v1.DNSList, *configv1.DNSApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("dnses"),
			v1.SchemeGroupVersion.WithKind("DNS"),
			func() *v1.DNS { return &v1.DNS{} },
			func() *v1.DNSList { return &v1.DNSList{} },
			func(dst, src *v1.DNSList) { dst.ListMeta = src.ListMeta },
			func(list *v1.DNSList) []*v1.DNS { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.DNSList, items []*v1.DNS) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}

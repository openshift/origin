// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	v1 "github.com/openshift/api/oauth/v1"
	oauthv1 "github.com/openshift/client-go/oauth/applyconfigurations/oauth/v1"
	scheme "github.com/openshift/client-go/oauth/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// UserOAuthAccessTokensGetter has a method to return a UserOAuthAccessTokenInterface.
// A group's client should implement this interface.
type UserOAuthAccessTokensGetter interface {
	UserOAuthAccessTokens() UserOAuthAccessTokenInterface
}

// UserOAuthAccessTokenInterface has methods to work with UserOAuthAccessToken resources.
type UserOAuthAccessTokenInterface interface {
	Create(ctx context.Context, userOAuthAccessToken *v1.UserOAuthAccessToken, opts metav1.CreateOptions) (*v1.UserOAuthAccessToken, error)
	Update(ctx context.Context, userOAuthAccessToken *v1.UserOAuthAccessToken, opts metav1.UpdateOptions) (*v1.UserOAuthAccessToken, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.UserOAuthAccessToken, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.UserOAuthAccessTokenList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.UserOAuthAccessToken, err error)
	Apply(ctx context.Context, userOAuthAccessToken *oauthv1.UserOAuthAccessTokenApplyConfiguration, opts metav1.ApplyOptions) (result *v1.UserOAuthAccessToken, err error)
	UserOAuthAccessTokenExpansion
}

// userOAuthAccessTokens implements UserOAuthAccessTokenInterface
type userOAuthAccessTokens struct {
	*gentype.ClientWithListAndApply[*v1.UserOAuthAccessToken, *v1.UserOAuthAccessTokenList, *oauthv1.UserOAuthAccessTokenApplyConfiguration]
}

// newUserOAuthAccessTokens returns a UserOAuthAccessTokens
func newUserOAuthAccessTokens(c *OauthV1Client) *userOAuthAccessTokens {
	return &userOAuthAccessTokens{
		gentype.NewClientWithListAndApply[*v1.UserOAuthAccessToken, *v1.UserOAuthAccessTokenList, *oauthv1.UserOAuthAccessTokenApplyConfiguration](
			"useroauthaccesstokens",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *v1.UserOAuthAccessToken { return &v1.UserOAuthAccessToken{} },
			func() *v1.UserOAuthAccessTokenList { return &v1.UserOAuthAccessTokenList{} }),
	}
}

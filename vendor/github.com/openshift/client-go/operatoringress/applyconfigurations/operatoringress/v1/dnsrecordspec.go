// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	operatoringressv1 "github.com/openshift/api/operatoringress/v1"
)

// DNSRecordSpecApplyConfiguration represents a declarative configuration of the DNSRecordSpec type for use
// with apply.
type DNSRecordSpecApplyConfiguration struct {
	DNSName             *string                                `json:"dnsName,omitempty"`
	Targets             []string                               `json:"targets,omitempty"`
	RecordType          *operatoringressv1.DNSRecordType       `json:"recordType,omitempty"`
	RecordTTL           *int64                                 `json:"recordTTL,omitempty"`
	DNSManagementPolicy *operatoringressv1.DNSManagementPolicy `json:"dnsManagementPolicy,omitempty"`
}

// DNSRecordSpecApplyConfiguration constructs a declarative configuration of the DNSRecordSpec type for use with
// apply.
func DNSRecordSpec() *DNSRecordSpecApplyConfiguration {
	return &DNSRecordSpecApplyConfiguration{}
}

// WithDNSName sets the DNSName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DNSName field is set to the value of the last call.
func (b *DNSRecordSpecApplyConfiguration) WithDNSName(value string) *DNSRecordSpecApplyConfiguration {
	b.DNSName = &value
	return b
}

// WithTargets adds the given value to the Targets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Targets field.
func (b *DNSRecordSpecApplyConfiguration) WithTargets(values ...string) *DNSRecordSpecApplyConfiguration {
	for i := range values {
		b.Targets = append(b.Targets, values[i])
	}
	return b
}

// WithRecordType sets the RecordType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RecordType field is set to the value of the last call.
func (b *DNSRecordSpecApplyConfiguration) WithRecordType(value operatoringressv1.DNSRecordType) *DNSRecordSpecApplyConfiguration {
	b.RecordType = &value
	return b
}

// WithRecordTTL sets the RecordTTL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RecordTTL field is set to the value of the last call.
func (b *DNSRecordSpecApplyConfiguration) WithRecordTTL(value int64) *DNSRecordSpecApplyConfiguration {
	b.RecordTTL = &value
	return b
}

// WithDNSManagementPolicy sets the DNSManagementPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DNSManagementPolicy field is set to the value of the last call.
func (b *DNSRecordSpecApplyConfiguration) WithDNSManagementPolicy(value operatoringressv1.DNSManagementPolicy) *DNSRecordSpecApplyConfiguration {
	b.DNSManagementPolicy = &value
	return b
}

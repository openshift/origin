// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// DNSRecordStatusApplyConfiguration represents a declarative configuration of the DNSRecordStatus type for use
// with apply.
type DNSRecordStatusApplyConfiguration struct {
	Zones              []DNSZoneStatusApplyConfiguration `json:"zones,omitempty"`
	ObservedGeneration *int64                            `json:"observedGeneration,omitempty"`
}

// DNSRecordStatusApplyConfiguration constructs a declarative configuration of the DNSRecordStatus type for use with
// apply.
func DNSRecordStatus() *DNSRecordStatusApplyConfiguration {
	return &DNSRecordStatusApplyConfiguration{}
}

// WithZones adds the given value to the Zones field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Zones field.
func (b *DNSRecordStatusApplyConfiguration) WithZones(values ...*DNSZoneStatusApplyConfiguration) *DNSRecordStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithZones")
		}
		b.Zones = append(b.Zones, *values[i])
	}
	return b
}

// WithObservedGeneration sets the ObservedGeneration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ObservedGeneration field is set to the value of the last call.
func (b *DNSRecordStatusApplyConfiguration) WithObservedGeneration(value int64) *DNSRecordStatusApplyConfiguration {
	b.ObservedGeneration = &value
	return b
}

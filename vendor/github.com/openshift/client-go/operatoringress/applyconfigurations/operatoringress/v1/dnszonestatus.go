// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	configv1 "github.com/openshift/api/config/v1"
)

// DNSZoneStatusApplyConfiguration represents a declarative configuration of the DNSZoneStatus type for use
// with apply.
type DNSZoneStatusApplyConfiguration struct {
	DNSZone    *configv1.DNSZone                    `json:"dnsZone,omitempty"`
	Conditions []DNSZoneConditionApplyConfiguration `json:"conditions,omitempty"`
}

// DNSZoneStatusApplyConfiguration constructs a declarative configuration of the DNSZoneStatus type for use with
// apply.
func DNSZoneStatus() *DNSZoneStatusApplyConfiguration {
	return &DNSZoneStatusApplyConfiguration{}
}

// WithDNSZone sets the DNSZone field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DNSZone field is set to the value of the last call.
func (b *DNSZoneStatusApplyConfiguration) WithDNSZone(value configv1.DNSZone) *DNSZoneStatusApplyConfiguration {
	b.DNSZone = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *DNSZoneStatusApplyConfiguration) WithConditions(values ...*DNSZoneConditionApplyConfiguration) *DNSZoneStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

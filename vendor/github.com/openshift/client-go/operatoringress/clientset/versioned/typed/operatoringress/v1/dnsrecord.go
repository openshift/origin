// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	context "context"

	operatoringressv1 "github.com/openshift/api/operatoringress/v1"
	applyconfigurationsoperatoringressv1 "github.com/openshift/client-go/operatoringress/applyconfigurations/operatoringress/v1"
	scheme "github.com/openshift/client-go/operatoringress/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// DNSRecordsGetter has a method to return a DNSRecordInterface.
// A group's client should implement this interface.
type DNSRecordsGetter interface {
	DNSRecords(namespace string) DNSRecordInterface
}

// DNSRecordInterface has methods to work with DNSRecord resources.
type DNSRecordInterface interface {
	Create(ctx context.Context, dNSRecord *operatoringressv1.DNSRecord, opts metav1.CreateOptions) (*operatoringressv1.DNSRecord, error)
	Update(ctx context.Context, dNSRecord *operatoringressv1.DNSRecord, opts metav1.UpdateOptions) (*operatoringressv1.DNSRecord, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, dNSRecord *operatoringressv1.DNSRecord, opts metav1.UpdateOptions) (*operatoringressv1.DNSRecord, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*operatoringressv1.DNSRecord, error)
	List(ctx context.Context, opts metav1.ListOptions) (*operatoringressv1.DNSRecordList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *operatoringressv1.DNSRecord, err error)
	Apply(ctx context.Context, dNSRecord *applyconfigurationsoperatoringressv1.DNSRecordApplyConfiguration, opts metav1.ApplyOptions) (result *operatoringressv1.DNSRecord, err error)
	// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
	ApplyStatus(ctx context.Context, dNSRecord *applyconfigurationsoperatoringressv1.DNSRecordApplyConfiguration, opts metav1.ApplyOptions) (result *operatoringressv1.DNSRecord, err error)
	DNSRecordExpansion
}

// dNSRecords implements DNSRecordInterface
type dNSRecords struct {
	*gentype.ClientWithListAndApply[*operatoringressv1.DNSRecord, *operatoringressv1.DNSRecordList, *applyconfigurationsoperatoringressv1.DNSRecordApplyConfiguration]
}

// newDNSRecords returns a DNSRecords
func newDNSRecords(c *IngressV1Client, namespace string) *dNSRecords {
	return &dNSRecords{
		gentype.NewClientWithListAndApply[*operatoringressv1.DNSRecord, *operatoringressv1.DNSRecordList, *applyconfigurationsoperatoringressv1.DNSRecordApplyConfiguration](
			"dnsrecords",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *operatoringressv1.DNSRecord { return &operatoringressv1.DNSRecord{} },
			func() *operatoringressv1.DNSRecordList { return &operatoringressv1.DNSRecordList{} },
		),
	}
}

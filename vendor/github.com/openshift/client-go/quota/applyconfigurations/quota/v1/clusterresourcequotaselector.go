// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// ClusterResourceQuotaSelectorApplyConfiguration represents a declarative configuration of the ClusterResourceQuotaSelector type for use
// with apply.
type ClusterResourceQuotaSelectorApplyConfiguration struct {
	LabelSelector      *v1.LabelSelectorApplyConfiguration `json:"labels,omitempty"`
	AnnotationSelector map[string]string                   `json:"annotations,omitempty"`
}

// ClusterResourceQuotaSelectorApplyConfiguration constructs a declarative configuration of the ClusterResourceQuotaSelector type for use with
// apply.
func ClusterResourceQuotaSelector() *ClusterResourceQuotaSelectorApplyConfiguration {
	return &ClusterResourceQuotaSelectorApplyConfiguration{}
}

// WithLabelSelector sets the LabelSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LabelSelector field is set to the value of the last call.
func (b *ClusterResourceQuotaSelectorApplyConfiguration) WithLabelSelector(value *v1.LabelSelectorApplyConfiguration) *ClusterResourceQuotaSelectorApplyConfiguration {
	b.LabelSelector = value
	return b
}

// WithAnnotationSelector puts the entries into the AnnotationSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the AnnotationSelector field,
// overwriting an existing map entries in AnnotationSelector field with the same key.
func (b *ClusterResourceQuotaSelectorApplyConfiguration) WithAnnotationSelector(entries map[string]string) *ClusterResourceQuotaSelectorApplyConfiguration {
	if b.AnnotationSelector == nil && len(entries) > 0 {
		b.AnnotationSelector = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.AnnotationSelector[k] = v
	}
	return b
}

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	buildv1 "github.com/openshift/api/build/v1"
	corev1 "k8s.io/api/core/v1"
)

// CommonSpecApplyConfiguration represents a declarative configuration of the CommonSpec type for use
// with apply.
type CommonSpecApplyConfiguration struct {
	ServiceAccount            *string                                `json:"serviceAccount,omitempty"`
	Source                    *BuildSourceApplyConfiguration         `json:"source,omitempty"`
	Revision                  *SourceRevisionApplyConfiguration      `json:"revision,omitempty"`
	Strategy                  *BuildStrategyApplyConfiguration       `json:"strategy,omitempty"`
	Output                    *BuildOutputApplyConfiguration         `json:"output,omitempty"`
	Resources                 *corev1.ResourceRequirements           `json:"resources,omitempty"`
	PostCommit                *BuildPostCommitSpecApplyConfiguration `json:"postCommit,omitempty"`
	CompletionDeadlineSeconds *int64                                 `json:"completionDeadlineSeconds,omitempty"`
	NodeSelector              *buildv1.OptionalNodeSelector          `json:"nodeSelector,omitempty"`
	MountTrustedCA            *bool                                  `json:"mountTrustedCA,omitempty"`
}

// CommonSpecApplyConfiguration constructs a declarative configuration of the CommonSpec type for use with
// apply.
func CommonSpec() *CommonSpecApplyConfiguration {
	return &CommonSpecApplyConfiguration{}
}

// WithServiceAccount sets the ServiceAccount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceAccount field is set to the value of the last call.
func (b *CommonSpecApplyConfiguration) WithServiceAccount(value string) *CommonSpecApplyConfiguration {
	b.ServiceAccount = &value
	return b
}

// WithSource sets the Source field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Source field is set to the value of the last call.
func (b *CommonSpecApplyConfiguration) WithSource(value *BuildSourceApplyConfiguration) *CommonSpecApplyConfiguration {
	b.Source = value
	return b
}

// WithRevision sets the Revision field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Revision field is set to the value of the last call.
func (b *CommonSpecApplyConfiguration) WithRevision(value *SourceRevisionApplyConfiguration) *CommonSpecApplyConfiguration {
	b.Revision = value
	return b
}

// WithStrategy sets the Strategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Strategy field is set to the value of the last call.
func (b *CommonSpecApplyConfiguration) WithStrategy(value *BuildStrategyApplyConfiguration) *CommonSpecApplyConfiguration {
	b.Strategy = value
	return b
}

// WithOutput sets the Output field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Output field is set to the value of the last call.
func (b *CommonSpecApplyConfiguration) WithOutput(value *BuildOutputApplyConfiguration) *CommonSpecApplyConfiguration {
	b.Output = value
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *CommonSpecApplyConfiguration) WithResources(value corev1.ResourceRequirements) *CommonSpecApplyConfiguration {
	b.Resources = &value
	return b
}

// WithPostCommit sets the PostCommit field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PostCommit field is set to the value of the last call.
func (b *CommonSpecApplyConfiguration) WithPostCommit(value *BuildPostCommitSpecApplyConfiguration) *CommonSpecApplyConfiguration {
	b.PostCommit = value
	return b
}

// WithCompletionDeadlineSeconds sets the CompletionDeadlineSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CompletionDeadlineSeconds field is set to the value of the last call.
func (b *CommonSpecApplyConfiguration) WithCompletionDeadlineSeconds(value int64) *CommonSpecApplyConfiguration {
	b.CompletionDeadlineSeconds = &value
	return b
}

// WithNodeSelector sets the NodeSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeSelector field is set to the value of the last call.
func (b *CommonSpecApplyConfiguration) WithNodeSelector(value buildv1.OptionalNodeSelector) *CommonSpecApplyConfiguration {
	b.NodeSelector = &value
	return b
}

// WithMountTrustedCA sets the MountTrustedCA field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MountTrustedCA field is set to the value of the last call.
func (b *CommonSpecApplyConfiguration) WithMountTrustedCA(value bool) *CommonSpecApplyConfiguration {
	b.MountTrustedCA = &value
	return b
}

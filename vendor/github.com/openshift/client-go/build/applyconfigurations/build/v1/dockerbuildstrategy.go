// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	buildv1 "github.com/openshift/api/build/v1"
	v1 "k8s.io/api/core/v1"
)

// DockerBuildStrategyApplyConfiguration represents a declarative configuration of the DockerBuildStrategy type for use
// with apply.
type DockerBuildStrategyApplyConfiguration struct {
	From                    *v1.ObjectReference              `json:"from,omitempty"`
	PullSecret              *v1.LocalObjectReference         `json:"pullSecret,omitempty"`
	NoCache                 *bool                            `json:"noCache,omitempty"`
	Env                     []v1.EnvVar                      `json:"env,omitempty"`
	ForcePull               *bool                            `json:"forcePull,omitempty"`
	DockerfilePath          *string                          `json:"dockerfilePath,omitempty"`
	BuildArgs               []v1.EnvVar                      `json:"buildArgs,omitempty"`
	ImageOptimizationPolicy *buildv1.ImageOptimizationPolicy `json:"imageOptimizationPolicy,omitempty"`
	Volumes                 []BuildVolumeApplyConfiguration  `json:"volumes,omitempty"`
}

// DockerBuildStrategyApplyConfiguration constructs a declarative configuration of the DockerBuildStrategy type for use with
// apply.
func DockerBuildStrategy() *DockerBuildStrategyApplyConfiguration {
	return &DockerBuildStrategyApplyConfiguration{}
}

// WithFrom sets the From field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the From field is set to the value of the last call.
func (b *DockerBuildStrategyApplyConfiguration) WithFrom(value v1.ObjectReference) *DockerBuildStrategyApplyConfiguration {
	b.From = &value
	return b
}

// WithPullSecret sets the PullSecret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PullSecret field is set to the value of the last call.
func (b *DockerBuildStrategyApplyConfiguration) WithPullSecret(value v1.LocalObjectReference) *DockerBuildStrategyApplyConfiguration {
	b.PullSecret = &value
	return b
}

// WithNoCache sets the NoCache field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NoCache field is set to the value of the last call.
func (b *DockerBuildStrategyApplyConfiguration) WithNoCache(value bool) *DockerBuildStrategyApplyConfiguration {
	b.NoCache = &value
	return b
}

// WithEnv adds the given value to the Env field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Env field.
func (b *DockerBuildStrategyApplyConfiguration) WithEnv(values ...v1.EnvVar) *DockerBuildStrategyApplyConfiguration {
	for i := range values {
		b.Env = append(b.Env, values[i])
	}
	return b
}

// WithForcePull sets the ForcePull field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ForcePull field is set to the value of the last call.
func (b *DockerBuildStrategyApplyConfiguration) WithForcePull(value bool) *DockerBuildStrategyApplyConfiguration {
	b.ForcePull = &value
	return b
}

// WithDockerfilePath sets the DockerfilePath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DockerfilePath field is set to the value of the last call.
func (b *DockerBuildStrategyApplyConfiguration) WithDockerfilePath(value string) *DockerBuildStrategyApplyConfiguration {
	b.DockerfilePath = &value
	return b
}

// WithBuildArgs adds the given value to the BuildArgs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the BuildArgs field.
func (b *DockerBuildStrategyApplyConfiguration) WithBuildArgs(values ...v1.EnvVar) *DockerBuildStrategyApplyConfiguration {
	for i := range values {
		b.BuildArgs = append(b.BuildArgs, values[i])
	}
	return b
}

// WithImageOptimizationPolicy sets the ImageOptimizationPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImageOptimizationPolicy field is set to the value of the last call.
func (b *DockerBuildStrategyApplyConfiguration) WithImageOptimizationPolicy(value buildv1.ImageOptimizationPolicy) *DockerBuildStrategyApplyConfiguration {
	b.ImageOptimizationPolicy = &value
	return b
}

// WithVolumes adds the given value to the Volumes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Volumes field.
func (b *DockerBuildStrategyApplyConfiguration) WithVolumes(values ...*BuildVolumeApplyConfiguration) *DockerBuildStrategyApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithVolumes")
		}
		b.Volumes = append(b.Volumes, *values[i])
	}
	return b
}

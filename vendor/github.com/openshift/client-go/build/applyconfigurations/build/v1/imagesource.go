// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/api/core/v1"
)

// ImageSourceApplyConfiguration represents a declarative configuration of the ImageSource type for use
// with apply.
type ImageSourceApplyConfiguration struct {
	From       *v1.ObjectReference                 `json:"from,omitempty"`
	As         []string                            `json:"as,omitempty"`
	Paths      []ImageSourcePathApplyConfiguration `json:"paths,omitempty"`
	PullSecret *v1.LocalObjectReference            `json:"pullSecret,omitempty"`
}

// ImageSourceApplyConfiguration constructs a declarative configuration of the ImageSource type for use with
// apply.
func ImageSource() *ImageSourceApplyConfiguration {
	return &ImageSourceApplyConfiguration{}
}

// WithFrom sets the From field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the From field is set to the value of the last call.
func (b *ImageSourceApplyConfiguration) WithFrom(value v1.ObjectReference) *ImageSourceApplyConfiguration {
	b.From = &value
	return b
}

// WithAs adds the given value to the As field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the As field.
func (b *ImageSourceApplyConfiguration) WithAs(values ...string) *ImageSourceApplyConfiguration {
	for i := range values {
		b.As = append(b.As, values[i])
	}
	return b
}

// WithPaths adds the given value to the Paths field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Paths field.
func (b *ImageSourceApplyConfiguration) WithPaths(values ...*ImageSourcePathApplyConfiguration) *ImageSourceApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPaths")
		}
		b.Paths = append(b.Paths, *values[i])
	}
	return b
}

// WithPullSecret sets the PullSecret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PullSecret field is set to the value of the last call.
func (b *ImageSourceApplyConfiguration) WithPullSecret(value v1.LocalObjectReference) *ImageSourceApplyConfiguration {
	b.PullSecret = &value
	return b
}

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	time "time"

	v1 "github.com/openshift/api/build/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// BuildStatusApplyConfiguration represents a declarative configuration of the BuildStatus type for use
// with apply.
type BuildStatusApplyConfiguration struct {
	Phase                      *v1.BuildPhase                       `json:"phase,omitempty"`
	Cancelled                  *bool                                `json:"cancelled,omitempty"`
	Reason                     *v1.StatusReason                     `json:"reason,omitempty"`
	Message                    *string                              `json:"message,omitempty"`
	StartTimestamp             *metav1.Time                         `json:"startTimestamp,omitempty"`
	CompletionTimestamp        *metav1.Time                         `json:"completionTimestamp,omitempty"`
	Duration                   *time.Duration                       `json:"duration,omitempty"`
	OutputDockerImageReference *string                              `json:"outputDockerImageReference,omitempty"`
	Config                     *corev1.ObjectReference              `json:"config,omitempty"`
	Output                     *BuildStatusOutputApplyConfiguration `json:"output,omitempty"`
	Stages                     []StageInfoApplyConfiguration        `json:"stages,omitempty"`
	LogSnippet                 *string                              `json:"logSnippet,omitempty"`
	Conditions                 []BuildConditionApplyConfiguration   `json:"conditions,omitempty"`
}

// BuildStatusApplyConfiguration constructs a declarative configuration of the BuildStatus type for use with
// apply.
func BuildStatus() *BuildStatusApplyConfiguration {
	return &BuildStatusApplyConfiguration{}
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *BuildStatusApplyConfiguration) WithPhase(value v1.BuildPhase) *BuildStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// WithCancelled sets the Cancelled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Cancelled field is set to the value of the last call.
func (b *BuildStatusApplyConfiguration) WithCancelled(value bool) *BuildStatusApplyConfiguration {
	b.Cancelled = &value
	return b
}

// WithReason sets the Reason field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Reason field is set to the value of the last call.
func (b *BuildStatusApplyConfiguration) WithReason(value v1.StatusReason) *BuildStatusApplyConfiguration {
	b.Reason = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *BuildStatusApplyConfiguration) WithMessage(value string) *BuildStatusApplyConfiguration {
	b.Message = &value
	return b
}

// WithStartTimestamp sets the StartTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StartTimestamp field is set to the value of the last call.
func (b *BuildStatusApplyConfiguration) WithStartTimestamp(value metav1.Time) *BuildStatusApplyConfiguration {
	b.StartTimestamp = &value
	return b
}

// WithCompletionTimestamp sets the CompletionTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CompletionTimestamp field is set to the value of the last call.
func (b *BuildStatusApplyConfiguration) WithCompletionTimestamp(value metav1.Time) *BuildStatusApplyConfiguration {
	b.CompletionTimestamp = &value
	return b
}

// WithDuration sets the Duration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Duration field is set to the value of the last call.
func (b *BuildStatusApplyConfiguration) WithDuration(value time.Duration) *BuildStatusApplyConfiguration {
	b.Duration = &value
	return b
}

// WithOutputDockerImageReference sets the OutputDockerImageReference field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OutputDockerImageReference field is set to the value of the last call.
func (b *BuildStatusApplyConfiguration) WithOutputDockerImageReference(value string) *BuildStatusApplyConfiguration {
	b.OutputDockerImageReference = &value
	return b
}

// WithConfig sets the Config field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Config field is set to the value of the last call.
func (b *BuildStatusApplyConfiguration) WithConfig(value corev1.ObjectReference) *BuildStatusApplyConfiguration {
	b.Config = &value
	return b
}

// WithOutput sets the Output field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Output field is set to the value of the last call.
func (b *BuildStatusApplyConfiguration) WithOutput(value *BuildStatusOutputApplyConfiguration) *BuildStatusApplyConfiguration {
	b.Output = value
	return b
}

// WithStages adds the given value to the Stages field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Stages field.
func (b *BuildStatusApplyConfiguration) WithStages(values ...*StageInfoApplyConfiguration) *BuildStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithStages")
		}
		b.Stages = append(b.Stages, *values[i])
	}
	return b
}

// WithLogSnippet sets the LogSnippet field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LogSnippet field is set to the value of the last call.
func (b *BuildStatusApplyConfiguration) WithLogSnippet(value string) *BuildStatusApplyConfiguration {
	b.LogSnippet = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *BuildStatusApplyConfiguration) WithConditions(values ...*BuildConditionApplyConfiguration) *BuildStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

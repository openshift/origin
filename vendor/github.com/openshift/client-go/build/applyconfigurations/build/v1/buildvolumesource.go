// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/openshift/api/build/v1"
	corev1 "k8s.io/api/core/v1"
)

// BuildVolumeSourceApplyConfiguration represents a declarative configuration of the BuildVolumeSource type for use
// with apply.
type BuildVolumeSourceApplyConfiguration struct {
	Type      *v1.BuildVolumeSourceType     `json:"type,omitempty"`
	Secret    *corev1.SecretVolumeSource    `json:"secret,omitempty"`
	ConfigMap *corev1.ConfigMapVolumeSource `json:"configMap,omitempty"`
	CSI       *corev1.CSIVolumeSource       `json:"csi,omitempty"`
}

// BuildVolumeSourceApplyConfiguration constructs a declarative configuration of the BuildVolumeSource type for use with
// apply.
func BuildVolumeSource() *BuildVolumeSourceApplyConfiguration {
	return &BuildVolumeSourceApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *BuildVolumeSourceApplyConfiguration) WithType(value v1.BuildVolumeSourceType) *BuildVolumeSourceApplyConfiguration {
	b.Type = &value
	return b
}

// WithSecret sets the Secret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Secret field is set to the value of the last call.
func (b *BuildVolumeSourceApplyConfiguration) WithSecret(value corev1.SecretVolumeSource) *BuildVolumeSourceApplyConfiguration {
	b.Secret = &value
	return b
}

// WithConfigMap sets the ConfigMap field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConfigMap field is set to the value of the last call.
func (b *BuildVolumeSourceApplyConfiguration) WithConfigMap(value corev1.ConfigMapVolumeSource) *BuildVolumeSourceApplyConfiguration {
	b.ConfigMap = &value
	return b
}

// WithCSI sets the CSI field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CSI field is set to the value of the last call.
func (b *BuildVolumeSourceApplyConfiguration) WithCSI(value corev1.CSIVolumeSource) *BuildVolumeSourceApplyConfiguration {
	b.CSI = &value
	return b
}

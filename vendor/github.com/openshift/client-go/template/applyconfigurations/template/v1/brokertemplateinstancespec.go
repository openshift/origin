// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/api/core/v1"
)

// BrokerTemplateInstanceSpecApplyConfiguration represents a declarative configuration of the BrokerTemplateInstanceSpec type for use
// with apply.
type BrokerTemplateInstanceSpecApplyConfiguration struct {
	TemplateInstance *v1.ObjectReference `json:"templateInstance,omitempty"`
	Secret           *v1.ObjectReference `json:"secret,omitempty"`
	BindingIDs       []string            `json:"bindingIDs,omitempty"`
}

// BrokerTemplateInstanceSpecApplyConfiguration constructs a declarative configuration of the BrokerTemplateInstanceSpec type for use with
// apply.
func BrokerTemplateInstanceSpec() *BrokerTemplateInstanceSpecApplyConfiguration {
	return &BrokerTemplateInstanceSpecApplyConfiguration{}
}

// WithTemplateInstance sets the TemplateInstance field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TemplateInstance field is set to the value of the last call.
func (b *BrokerTemplateInstanceSpecApplyConfiguration) WithTemplateInstance(value v1.ObjectReference) *BrokerTemplateInstanceSpecApplyConfiguration {
	b.TemplateInstance = &value
	return b
}

// WithSecret sets the Secret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Secret field is set to the value of the last call.
func (b *BrokerTemplateInstanceSpecApplyConfiguration) WithSecret(value v1.ObjectReference) *BrokerTemplateInstanceSpecApplyConfiguration {
	b.Secret = &value
	return b
}

// WithBindingIDs adds the given value to the BindingIDs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the BindingIDs field.
func (b *BrokerTemplateInstanceSpecApplyConfiguration) WithBindingIDs(values ...string) *BrokerTemplateInstanceSpecApplyConfiguration {
	for i := range values {
		b.BindingIDs = append(b.BindingIDs, values[i])
	}
	return b
}

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// TemplateInstanceStatusApplyConfiguration represents a declarative configuration of the TemplateInstanceStatus type for use
// with apply.
type TemplateInstanceStatusApplyConfiguration struct {
	Conditions []TemplateInstanceConditionApplyConfiguration `json:"conditions,omitempty"`
	Objects    []TemplateInstanceObjectApplyConfiguration    `json:"objects,omitempty"`
}

// TemplateInstanceStatusApplyConfiguration constructs a declarative configuration of the TemplateInstanceStatus type for use with
// apply.
func TemplateInstanceStatus() *TemplateInstanceStatusApplyConfiguration {
	return &TemplateInstanceStatusApplyConfiguration{}
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *TemplateInstanceStatusApplyConfiguration) WithConditions(values ...*TemplateInstanceConditionApplyConfiguration) *TemplateInstanceStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithObjects adds the given value to the Objects field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Objects field.
func (b *TemplateInstanceStatusApplyConfiguration) WithObjects(values ...*TemplateInstanceObjectApplyConfiguration) *TemplateInstanceStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithObjects")
		}
		b.Objects = append(b.Objects, *values[i])
	}
	return b
}

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// IngressControllerHTTPHeaderActionsApplyConfiguration represents a declarative configuration of the IngressControllerHTTPHeaderActions type for use
// with apply.
type IngressControllerHTTPHeaderActionsApplyConfiguration struct {
	Response []IngressControllerHTTPHeaderApplyConfiguration `json:"response,omitempty"`
	Request  []IngressControllerHTTPHeaderApplyConfiguration `json:"request,omitempty"`
}

// IngressControllerHTTPHeaderActionsApplyConfiguration constructs a declarative configuration of the IngressControllerHTTPHeaderActions type for use with
// apply.
func IngressControllerHTTPHeaderActions() *IngressControllerHTTPHeaderActionsApplyConfiguration {
	return &IngressControllerHTTPHeaderActionsApplyConfiguration{}
}

// WithResponse adds the given value to the Response field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Response field.
func (b *IngressControllerHTTPHeaderActionsApplyConfiguration) WithResponse(values ...*IngressControllerHTTPHeaderApplyConfiguration) *IngressControllerHTTPHeaderActionsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithResponse")
		}
		b.Response = append(b.Response, *values[i])
	}
	return b
}

// WithRequest adds the given value to the Request field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Request field.
func (b *IngressControllerHTTPHeaderActionsApplyConfiguration) WithRequest(values ...*IngressControllerHTTPHeaderApplyConfiguration) *IngressControllerHTTPHeaderActionsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRequest")
		}
		b.Request = append(b.Request, *values[i])
	}
	return b
}

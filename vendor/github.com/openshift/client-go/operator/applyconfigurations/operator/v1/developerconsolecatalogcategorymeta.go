// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// DeveloperConsoleCatalogCategoryMetaApplyConfiguration represents a declarative configuration of the DeveloperConsoleCatalogCategoryMeta type for use
// with apply.
type DeveloperConsoleCatalogCategoryMetaApplyConfiguration struct {
	ID    *string  `json:"id,omitempty"`
	Label *string  `json:"label,omitempty"`
	Tags  []string `json:"tags,omitempty"`
}

// DeveloperConsoleCatalogCategoryMetaApplyConfiguration constructs a declarative configuration of the DeveloperConsoleCatalogCategoryMeta type for use with
// apply.
func DeveloperConsoleCatalogCategoryMeta() *DeveloperConsoleCatalogCategoryMetaApplyConfiguration {
	return &DeveloperConsoleCatalogCategoryMetaApplyConfiguration{}
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *DeveloperConsoleCatalogCategoryMetaApplyConfiguration) WithID(value string) *DeveloperConsoleCatalogCategoryMetaApplyConfiguration {
	b.ID = &value
	return b
}

// WithLabel sets the Label field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Label field is set to the value of the last call.
func (b *DeveloperConsoleCatalogCategoryMetaApplyConfiguration) WithLabel(value string) *DeveloperConsoleCatalogCategoryMetaApplyConfiguration {
	b.Label = &value
	return b
}

// WithTags adds the given value to the Tags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tags field.
func (b *DeveloperConsoleCatalogCategoryMetaApplyConfiguration) WithTags(values ...string) *DeveloperConsoleCatalogCategoryMetaApplyConfiguration {
	for i := range values {
		b.Tags = append(b.Tags, values[i])
	}
	return b
}

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// AuthenticationStatusApplyConfiguration represents a declarative configuration of the AuthenticationStatus type for use
// with apply.
type AuthenticationStatusApplyConfiguration struct {
	OAuthAPIServer                   *OAuthAPIServerStatusApplyConfiguration `json:"oauthAPIServer,omitempty"`
	OperatorStatusApplyConfiguration `json:",inline"`
}

// AuthenticationStatusApplyConfiguration constructs a declarative configuration of the AuthenticationStatus type for use with
// apply.
func AuthenticationStatus() *AuthenticationStatusApplyConfiguration {
	return &AuthenticationStatusApplyConfiguration{}
}

// WithOAuthAPIServer sets the OAuthAPIServer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OAuthAPIServer field is set to the value of the last call.
func (b *AuthenticationStatusApplyConfiguration) WithOAuthAPIServer(value *OAuthAPIServerStatusApplyConfiguration) *AuthenticationStatusApplyConfiguration {
	b.OAuthAPIServer = value
	return b
}

// WithObservedGeneration sets the ObservedGeneration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ObservedGeneration field is set to the value of the last call.
func (b *AuthenticationStatusApplyConfiguration) WithObservedGeneration(value int64) *AuthenticationStatusApplyConfiguration {
	b.ObservedGeneration = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *AuthenticationStatusApplyConfiguration) WithConditions(values ...*OperatorConditionApplyConfiguration) *AuthenticationStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *AuthenticationStatusApplyConfiguration) WithVersion(value string) *AuthenticationStatusApplyConfiguration {
	b.Version = &value
	return b
}

// WithReadyReplicas sets the ReadyReplicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReadyReplicas field is set to the value of the last call.
func (b *AuthenticationStatusApplyConfiguration) WithReadyReplicas(value int32) *AuthenticationStatusApplyConfiguration {
	b.ReadyReplicas = &value
	return b
}

// WithLatestAvailableRevision sets the LatestAvailableRevision field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LatestAvailableRevision field is set to the value of the last call.
func (b *AuthenticationStatusApplyConfiguration) WithLatestAvailableRevision(value int32) *AuthenticationStatusApplyConfiguration {
	b.LatestAvailableRevision = &value
	return b
}

// WithGenerations adds the given value to the Generations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Generations field.
func (b *AuthenticationStatusApplyConfiguration) WithGenerations(values ...*GenerationStatusApplyConfiguration) *AuthenticationStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithGenerations")
		}
		b.Generations = append(b.Generations, *values[i])
	}
	return b
}

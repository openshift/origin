// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/openshift/api/operator/v1"
)

// ProxyConfigApplyConfiguration represents a declarative configuration of the ProxyConfig type for use
// with apply.
type ProxyConfigApplyConfiguration struct {
	IptablesSyncPeriod *string                         `json:"iptablesSyncPeriod,omitempty"`
	BindAddress        *string                         `json:"bindAddress,omitempty"`
	ProxyArguments     map[string]v1.ProxyArgumentList `json:"proxyArguments,omitempty"`
}

// ProxyConfigApplyConfiguration constructs a declarative configuration of the ProxyConfig type for use with
// apply.
func ProxyConfig() *ProxyConfigApplyConfiguration {
	return &ProxyConfigApplyConfiguration{}
}

// WithIptablesSyncPeriod sets the IptablesSyncPeriod field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IptablesSyncPeriod field is set to the value of the last call.
func (b *ProxyConfigApplyConfiguration) WithIptablesSyncPeriod(value string) *ProxyConfigApplyConfiguration {
	b.IptablesSyncPeriod = &value
	return b
}

// WithBindAddress sets the BindAddress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BindAddress field is set to the value of the last call.
func (b *ProxyConfigApplyConfiguration) WithBindAddress(value string) *ProxyConfigApplyConfiguration {
	b.BindAddress = &value
	return b
}

// WithProxyArguments puts the entries into the ProxyArguments field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ProxyArguments field,
// overwriting an existing map entries in ProxyArguments field with the same key.
func (b *ProxyConfigApplyConfiguration) WithProxyArguments(entries map[string]v1.ProxyArgumentList) *ProxyConfigApplyConfiguration {
	if b.ProxyArguments == nil && len(entries) > 0 {
		b.ProxyArguments = make(map[string]v1.ProxyArgumentList, len(entries))
	}
	for k, v := range entries {
		b.ProxyArguments[k] = v
	}
	return b
}

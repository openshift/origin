// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// EtcdBackupStatusApplyConfiguration represents a declarative configuration of the EtcdBackupStatus type for use
// with apply.
type EtcdBackupStatusApplyConfiguration struct {
	Conditions []v1.ConditionApplyConfiguration      `json:"conditions,omitempty"`
	BackupJob  *BackupJobReferenceApplyConfiguration `json:"backupJob,omitempty"`
}

// EtcdBackupStatusApplyConfiguration constructs a declarative configuration of the EtcdBackupStatus type for use with
// apply.
func EtcdBackupStatus() *EtcdBackupStatusApplyConfiguration {
	return &EtcdBackupStatusApplyConfiguration{}
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *EtcdBackupStatusApplyConfiguration) WithConditions(values ...*v1.ConditionApplyConfiguration) *EtcdBackupStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithBackupJob sets the BackupJob field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackupJob field is set to the value of the last call.
func (b *EtcdBackupStatusApplyConfiguration) WithBackupJob(value *BackupJobReferenceApplyConfiguration) *EtcdBackupStatusApplyConfiguration {
	b.BackupJob = value
	return b
}

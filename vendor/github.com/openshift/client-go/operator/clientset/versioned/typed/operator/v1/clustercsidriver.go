// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	context "context"

	operatorv1 "github.com/openshift/api/operator/v1"
	applyconfigurationsoperatorv1 "github.com/openshift/client-go/operator/applyconfigurations/operator/v1"
	scheme "github.com/openshift/client-go/operator/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// ClusterCSIDriversGetter has a method to return a ClusterCSIDriverInterface.
// A group's client should implement this interface.
type ClusterCSIDriversGetter interface {
	ClusterCSIDrivers() ClusterCSIDriverInterface
}

// ClusterCSIDriverInterface has methods to work with ClusterCSIDriver resources.
type ClusterCSIDriverInterface interface {
	Create(ctx context.Context, clusterCSIDriver *operatorv1.ClusterCSIDriver, opts metav1.CreateOptions) (*operatorv1.ClusterCSIDriver, error)
	Update(ctx context.Context, clusterCSIDriver *operatorv1.ClusterCSIDriver, opts metav1.UpdateOptions) (*operatorv1.ClusterCSIDriver, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, clusterCSIDriver *operatorv1.ClusterCSIDriver, opts metav1.UpdateOptions) (*operatorv1.ClusterCSIDriver, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*operatorv1.ClusterCSIDriver, error)
	List(ctx context.Context, opts metav1.ListOptions) (*operatorv1.ClusterCSIDriverList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *operatorv1.ClusterCSIDriver, err error)
	Apply(ctx context.Context, clusterCSIDriver *applyconfigurationsoperatorv1.ClusterCSIDriverApplyConfiguration, opts metav1.ApplyOptions) (result *operatorv1.ClusterCSIDriver, err error)
	// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
	ApplyStatus(ctx context.Context, clusterCSIDriver *applyconfigurationsoperatorv1.ClusterCSIDriverApplyConfiguration, opts metav1.ApplyOptions) (result *operatorv1.ClusterCSIDriver, err error)
	ClusterCSIDriverExpansion
}

// clusterCSIDrivers implements ClusterCSIDriverInterface
type clusterCSIDrivers struct {
	*gentype.ClientWithListAndApply[*operatorv1.ClusterCSIDriver, *operatorv1.ClusterCSIDriverList, *applyconfigurationsoperatorv1.ClusterCSIDriverApplyConfiguration]
}

// newClusterCSIDrivers returns a ClusterCSIDrivers
func newClusterCSIDrivers(c *OperatorV1Client) *clusterCSIDrivers {
	return &clusterCSIDrivers{
		gentype.NewClientWithListAndApply[*operatorv1.ClusterCSIDriver, *operatorv1.ClusterCSIDriverList, *applyconfigurationsoperatorv1.ClusterCSIDriverApplyConfiguration](
			"clustercsidrivers",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *operatorv1.ClusterCSIDriver { return &operatorv1.ClusterCSIDriver{} },
			func() *operatorv1.ClusterCSIDriverList { return &operatorv1.ClusterCSIDriverList{} },
		),
	}
}

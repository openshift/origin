// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	v1 "github.com/openshift/api/operator/v1"
	operatorv1 "github.com/openshift/client-go/operator/applyconfigurations/operator/v1"
	scheme "github.com/openshift/client-go/operator/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// OpenShiftAPIServersGetter has a method to return a OpenShiftAPIServerInterface.
// A group's client should implement this interface.
type OpenShiftAPIServersGetter interface {
	OpenShiftAPIServers() OpenShiftAPIServerInterface
}

// OpenShiftAPIServerInterface has methods to work with OpenShiftAPIServer resources.
type OpenShiftAPIServerInterface interface {
	Create(ctx context.Context, openShiftAPIServer *v1.OpenShiftAPIServer, opts metav1.CreateOptions) (*v1.OpenShiftAPIServer, error)
	Update(ctx context.Context, openShiftAPIServer *v1.OpenShiftAPIServer, opts metav1.UpdateOptions) (*v1.OpenShiftAPIServer, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, openShiftAPIServer *v1.OpenShiftAPIServer, opts metav1.UpdateOptions) (*v1.OpenShiftAPIServer, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.OpenShiftAPIServer, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.OpenShiftAPIServerList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.OpenShiftAPIServer, err error)
	Apply(ctx context.Context, openShiftAPIServer *operatorv1.OpenShiftAPIServerApplyConfiguration, opts metav1.ApplyOptions) (result *v1.OpenShiftAPIServer, err error)
	// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
	ApplyStatus(ctx context.Context, openShiftAPIServer *operatorv1.OpenShiftAPIServerApplyConfiguration, opts metav1.ApplyOptions) (result *v1.OpenShiftAPIServer, err error)
	OpenShiftAPIServerExpansion
}

// openShiftAPIServers implements OpenShiftAPIServerInterface
type openShiftAPIServers struct {
	*gentype.ClientWithListAndApply[*v1.OpenShiftAPIServer, *v1.OpenShiftAPIServerList, *operatorv1.OpenShiftAPIServerApplyConfiguration]
}

// newOpenShiftAPIServers returns a OpenShiftAPIServers
func newOpenShiftAPIServers(c *OperatorV1Client) *openShiftAPIServers {
	return &openShiftAPIServers{
		gentype.NewClientWithListAndApply[*v1.OpenShiftAPIServer, *v1.OpenShiftAPIServerList, *operatorv1.OpenShiftAPIServerApplyConfiguration](
			"openshiftapiservers",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *v1.OpenShiftAPIServer { return &v1.OpenShiftAPIServer{} },
			func() *v1.OpenShiftAPIServerList { return &v1.OpenShiftAPIServerList{} }),
	}
}

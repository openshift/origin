// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	context "context"

	consolev1 "github.com/openshift/api/console/v1"
	applyconfigurationsconsolev1 "github.com/openshift/client-go/console/applyconfigurations/console/v1"
	scheme "github.com/openshift/client-go/console/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// ConsoleYAMLSamplesGetter has a method to return a ConsoleYAMLSampleInterface.
// A group's client should implement this interface.
type ConsoleYAMLSamplesGetter interface {
	ConsoleYAMLSamples() ConsoleYAMLSampleInterface
}

// ConsoleYAMLSampleInterface has methods to work with ConsoleYAMLSample resources.
type ConsoleYAMLSampleInterface interface {
	Create(ctx context.Context, consoleYAMLSample *consolev1.ConsoleYAMLSample, opts metav1.CreateOptions) (*consolev1.ConsoleYAMLSample, error)
	Update(ctx context.Context, consoleYAMLSample *consolev1.ConsoleYAMLSample, opts metav1.UpdateOptions) (*consolev1.ConsoleYAMLSample, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*consolev1.ConsoleYAMLSample, error)
	List(ctx context.Context, opts metav1.ListOptions) (*consolev1.ConsoleYAMLSampleList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *consolev1.ConsoleYAMLSample, err error)
	Apply(ctx context.Context, consoleYAMLSample *applyconfigurationsconsolev1.ConsoleYAMLSampleApplyConfiguration, opts metav1.ApplyOptions) (result *consolev1.ConsoleYAMLSample, err error)
	ConsoleYAMLSampleExpansion
}

// consoleYAMLSamples implements ConsoleYAMLSampleInterface
type consoleYAMLSamples struct {
	*gentype.ClientWithListAndApply[*consolev1.ConsoleYAMLSample, *consolev1.ConsoleYAMLSampleList, *applyconfigurationsconsolev1.ConsoleYAMLSampleApplyConfiguration]
}

// newConsoleYAMLSamples returns a ConsoleYAMLSamples
func newConsoleYAMLSamples(c *ConsoleV1Client) *consoleYAMLSamples {
	return &consoleYAMLSamples{
		gentype.NewClientWithListAndApply[*consolev1.ConsoleYAMLSample, *consolev1.ConsoleYAMLSampleList, *applyconfigurationsconsolev1.ConsoleYAMLSampleApplyConfiguration](
			"consoleyamlsamples",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *consolev1.ConsoleYAMLSample { return &consolev1.ConsoleYAMLSample{} },
			func() *consolev1.ConsoleYAMLSampleList { return &consolev1.ConsoleYAMLSampleList{} },
		),
	}
}

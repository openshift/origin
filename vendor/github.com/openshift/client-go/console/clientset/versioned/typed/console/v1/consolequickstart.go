// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	v1 "github.com/openshift/api/console/v1"
	consolev1 "github.com/openshift/client-go/console/applyconfigurations/console/v1"
	scheme "github.com/openshift/client-go/console/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// ConsoleQuickStartsGetter has a method to return a ConsoleQuickStartInterface.
// A group's client should implement this interface.
type ConsoleQuickStartsGetter interface {
	ConsoleQuickStarts() ConsoleQuickStartInterface
}

// ConsoleQuickStartInterface has methods to work with ConsoleQuickStart resources.
type ConsoleQuickStartInterface interface {
	Create(ctx context.Context, consoleQuickStart *v1.ConsoleQuickStart, opts metav1.CreateOptions) (*v1.ConsoleQuickStart, error)
	Update(ctx context.Context, consoleQuickStart *v1.ConsoleQuickStart, opts metav1.UpdateOptions) (*v1.ConsoleQuickStart, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.ConsoleQuickStart, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.ConsoleQuickStartList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.ConsoleQuickStart, err error)
	Apply(ctx context.Context, consoleQuickStart *consolev1.ConsoleQuickStartApplyConfiguration, opts metav1.ApplyOptions) (result *v1.ConsoleQuickStart, err error)
	ConsoleQuickStartExpansion
}

// consoleQuickStarts implements ConsoleQuickStartInterface
type consoleQuickStarts struct {
	*gentype.ClientWithListAndApply[*v1.ConsoleQuickStart, *v1.ConsoleQuickStartList, *consolev1.ConsoleQuickStartApplyConfiguration]
}

// newConsoleQuickStarts returns a ConsoleQuickStarts
func newConsoleQuickStarts(c *ConsoleV1Client) *consoleQuickStarts {
	return &consoleQuickStarts{
		gentype.NewClientWithListAndApply[*v1.ConsoleQuickStart, *v1.ConsoleQuickStartList, *consolev1.ConsoleQuickStartApplyConfiguration](
			"consolequickstarts",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *v1.ConsoleQuickStart { return &v1.ConsoleQuickStart{} },
			func() *v1.ConsoleQuickStartList { return &v1.ConsoleQuickStartList{} }),
	}
}

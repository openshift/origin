// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	v1 "github.com/openshift/api/console/v1"
	consolev1 "github.com/openshift/client-go/console/applyconfigurations/console/v1"
	scheme "github.com/openshift/client-go/console/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// ConsolePluginsGetter has a method to return a ConsolePluginInterface.
// A group's client should implement this interface.
type ConsolePluginsGetter interface {
	ConsolePlugins() ConsolePluginInterface
}

// ConsolePluginInterface has methods to work with ConsolePlugin resources.
type ConsolePluginInterface interface {
	Create(ctx context.Context, consolePlugin *v1.ConsolePlugin, opts metav1.CreateOptions) (*v1.ConsolePlugin, error)
	Update(ctx context.Context, consolePlugin *v1.ConsolePlugin, opts metav1.UpdateOptions) (*v1.ConsolePlugin, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.ConsolePlugin, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.ConsolePluginList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.ConsolePlugin, err error)
	Apply(ctx context.Context, consolePlugin *consolev1.ConsolePluginApplyConfiguration, opts metav1.ApplyOptions) (result *v1.ConsolePlugin, err error)
	ConsolePluginExpansion
}

// consolePlugins implements ConsolePluginInterface
type consolePlugins struct {
	*gentype.ClientWithListAndApply[*v1.ConsolePlugin, *v1.ConsolePluginList, *consolev1.ConsolePluginApplyConfiguration]
}

// newConsolePlugins returns a ConsolePlugins
func newConsolePlugins(c *ConsoleV1Client) *consolePlugins {
	return &consolePlugins{
		gentype.NewClientWithListAndApply[*v1.ConsolePlugin, *v1.ConsolePluginList, *consolev1.ConsolePluginApplyConfiguration](
			"consoleplugins",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *v1.ConsolePlugin { return &v1.ConsolePlugin{} },
			func() *v1.ConsolePluginList { return &v1.ConsolePluginList{} }),
	}
}

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	v1 "github.com/openshift/api/console/v1"
	consolev1 "github.com/openshift/client-go/console/applyconfigurations/console/v1"
	scheme "github.com/openshift/client-go/console/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// ConsoleNotificationsGetter has a method to return a ConsoleNotificationInterface.
// A group's client should implement this interface.
type ConsoleNotificationsGetter interface {
	ConsoleNotifications() ConsoleNotificationInterface
}

// ConsoleNotificationInterface has methods to work with ConsoleNotification resources.
type ConsoleNotificationInterface interface {
	Create(ctx context.Context, consoleNotification *v1.ConsoleNotification, opts metav1.CreateOptions) (*v1.ConsoleNotification, error)
	Update(ctx context.Context, consoleNotification *v1.ConsoleNotification, opts metav1.UpdateOptions) (*v1.ConsoleNotification, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.ConsoleNotification, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.ConsoleNotificationList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.ConsoleNotification, err error)
	Apply(ctx context.Context, consoleNotification *consolev1.ConsoleNotificationApplyConfiguration, opts metav1.ApplyOptions) (result *v1.ConsoleNotification, err error)
	ConsoleNotificationExpansion
}

// consoleNotifications implements ConsoleNotificationInterface
type consoleNotifications struct {
	*gentype.ClientWithListAndApply[*v1.ConsoleNotification, *v1.ConsoleNotificationList, *consolev1.ConsoleNotificationApplyConfiguration]
}

// newConsoleNotifications returns a ConsoleNotifications
func newConsoleNotifications(c *ConsoleV1Client) *consoleNotifications {
	return &consoleNotifications{
		gentype.NewClientWithListAndApply[*v1.ConsoleNotification, *v1.ConsoleNotificationList, *consolev1.ConsoleNotificationApplyConfiguration](
			"consolenotifications",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *v1.ConsoleNotification { return &v1.ConsoleNotification{} },
			func() *v1.ConsoleNotificationList { return &v1.ConsoleNotificationList{} }),
	}
}

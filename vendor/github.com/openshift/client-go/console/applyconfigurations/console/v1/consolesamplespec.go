// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// ConsoleSampleSpecApplyConfiguration represents a declarative configuration of the ConsoleSampleSpec type for use
// with apply.
type ConsoleSampleSpecApplyConfiguration struct {
	Title       *string                                `json:"title,omitempty"`
	Abstract    *string                                `json:"abstract,omitempty"`
	Description *string                                `json:"description,omitempty"`
	Icon        *string                                `json:"icon,omitempty"`
	Type        *string                                `json:"type,omitempty"`
	Provider    *string                                `json:"provider,omitempty"`
	Tags        []string                               `json:"tags,omitempty"`
	Source      *ConsoleSampleSourceApplyConfiguration `json:"source,omitempty"`
}

// ConsoleSampleSpecApplyConfiguration constructs a declarative configuration of the ConsoleSampleSpec type for use with
// apply.
func ConsoleSampleSpec() *ConsoleSampleSpecApplyConfiguration {
	return &ConsoleSampleSpecApplyConfiguration{}
}

// WithTitle sets the Title field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Title field is set to the value of the last call.
func (b *ConsoleSampleSpecApplyConfiguration) WithTitle(value string) *ConsoleSampleSpecApplyConfiguration {
	b.Title = &value
	return b
}

// WithAbstract sets the Abstract field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Abstract field is set to the value of the last call.
func (b *ConsoleSampleSpecApplyConfiguration) WithAbstract(value string) *ConsoleSampleSpecApplyConfiguration {
	b.Abstract = &value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *ConsoleSampleSpecApplyConfiguration) WithDescription(value string) *ConsoleSampleSpecApplyConfiguration {
	b.Description = &value
	return b
}

// WithIcon sets the Icon field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Icon field is set to the value of the last call.
func (b *ConsoleSampleSpecApplyConfiguration) WithIcon(value string) *ConsoleSampleSpecApplyConfiguration {
	b.Icon = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *ConsoleSampleSpecApplyConfiguration) WithType(value string) *ConsoleSampleSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithProvider sets the Provider field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Provider field is set to the value of the last call.
func (b *ConsoleSampleSpecApplyConfiguration) WithProvider(value string) *ConsoleSampleSpecApplyConfiguration {
	b.Provider = &value
	return b
}

// WithTags adds the given value to the Tags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tags field.
func (b *ConsoleSampleSpecApplyConfiguration) WithTags(values ...string) *ConsoleSampleSpecApplyConfiguration {
	for i := range values {
		b.Tags = append(b.Tags, values[i])
	}
	return b
}

// WithSource sets the Source field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Source field is set to the value of the last call.
func (b *ConsoleSampleSpecApplyConfiguration) WithSource(value *ConsoleSampleSourceApplyConfiguration) *ConsoleSampleSpecApplyConfiguration {
	b.Source = value
	return b
}

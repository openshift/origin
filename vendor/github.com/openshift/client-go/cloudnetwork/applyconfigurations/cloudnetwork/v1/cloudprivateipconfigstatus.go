// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	metav1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// CloudPrivateIPConfigStatusApplyConfiguration represents a declarative configuration of the CloudPrivateIPConfigStatus type for use
// with apply.
type CloudPrivateIPConfigStatusApplyConfiguration struct {
	Node       *string                              `json:"node,omitempty"`
	Conditions []metav1.ConditionApplyConfiguration `json:"conditions,omitempty"`
}

// CloudPrivateIPConfigStatusApplyConfiguration constructs a declarative configuration of the CloudPrivateIPConfigStatus type for use with
// apply.
func CloudPrivateIPConfigStatus() *CloudPrivateIPConfigStatusApplyConfiguration {
	return &CloudPrivateIPConfigStatusApplyConfiguration{}
}

// WithNode sets the Node field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Node field is set to the value of the last call.
func (b *CloudPrivateIPConfigStatusApplyConfiguration) WithNode(value string) *CloudPrivateIPConfigStatusApplyConfiguration {
	b.Node = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *CloudPrivateIPConfigStatusApplyConfiguration) WithConditions(values ...*metav1.ConditionApplyConfiguration) *CloudPrivateIPConfigStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

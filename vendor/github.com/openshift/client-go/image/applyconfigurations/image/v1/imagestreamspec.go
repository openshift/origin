// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// ImageStreamSpecApplyConfiguration represents a declarative configuration of the ImageStreamSpec type for use
// with apply.
type ImageStreamSpecApplyConfiguration struct {
	LookupPolicy          *ImageLookupPolicyApplyConfiguration `json:"lookupPolicy,omitempty"`
	DockerImageRepository *string                              `json:"dockerImageRepository,omitempty"`
	Tags                  []TagReferenceApplyConfiguration     `json:"tags,omitempty"`
}

// ImageStreamSpecApplyConfiguration constructs a declarative configuration of the ImageStreamSpec type for use with
// apply.
func ImageStreamSpec() *ImageStreamSpecApplyConfiguration {
	return &ImageStreamSpecApplyConfiguration{}
}

// WithLookupPolicy sets the LookupPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LookupPolicy field is set to the value of the last call.
func (b *ImageStreamSpecApplyConfiguration) WithLookupPolicy(value *ImageLookupPolicyApplyConfiguration) *ImageStreamSpecApplyConfiguration {
	b.LookupPolicy = value
	return b
}

// WithDockerImageRepository sets the DockerImageRepository field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DockerImageRepository field is set to the value of the last call.
func (b *ImageStreamSpecApplyConfiguration) WithDockerImageRepository(value string) *ImageStreamSpecApplyConfiguration {
	b.DockerImageRepository = &value
	return b
}

// WithTags adds the given value to the Tags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tags field.
func (b *ImageStreamSpecApplyConfiguration) WithTags(values ...*TagReferenceApplyConfiguration) *ImageStreamSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTags")
		}
		b.Tags = append(b.Tags, *values[i])
	}
	return b
}

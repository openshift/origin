// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	v1 "github.com/openshift/api/image/v1"
	scheme "github.com/openshift/client-go/image/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gentype "k8s.io/client-go/gentype"
)

// ImageStreamTagsGetter has a method to return a ImageStreamTagInterface.
// A group's client should implement this interface.
type ImageStreamTagsGetter interface {
	ImageStreamTags(namespace string) ImageStreamTagInterface
}

// ImageStreamTagInterface has methods to work with ImageStreamTag resources.
type ImageStreamTagInterface interface {
	Create(ctx context.Context, imageStreamTag *v1.ImageStreamTag, opts metav1.CreateOptions) (*v1.ImageStreamTag, error)
	Update(ctx context.Context, imageStreamTag *v1.ImageStreamTag, opts metav1.UpdateOptions) (*v1.ImageStreamTag, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.ImageStreamTag, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.ImageStreamTagList, error)
	ImageStreamTagExpansion
}

// imageStreamTags implements ImageStreamTagInterface
type imageStreamTags struct {
	*gentype.ClientWithList[*v1.ImageStreamTag, *v1.ImageStreamTagList]
}

// newImageStreamTags returns a ImageStreamTags
func newImageStreamTags(c *ImageV1Client, namespace string) *imageStreamTags {
	return &imageStreamTags{
		gentype.NewClientWithList[*v1.ImageStreamTag, *v1.ImageStreamTagList](
			"imagestreamtags",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1.ImageStreamTag { return &v1.ImageStreamTag{} },
			func() *v1.ImageStreamTagList { return &v1.ImageStreamTagList{} }),
	}
}
